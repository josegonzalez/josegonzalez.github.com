<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jose Diaz-Gonzalez</title>
    <description>CakePHP Core Developer, Accidental Ops Guy, and Occasional Blogger</description>
    <link>http://josediazgonzalez.com/</link>
    <atom:link href="http://josediazgonzalez.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 14 Apr 2017 21:09:38 +0000</pubDate>
    <lastBuildDate>Fri, 14 Apr 2017 21:09:38 +0000</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Why CakePHP (CakeFest) does not currently have a Diversity Scholarship</title>
        <description>&lt;p&gt;This is a response to the allegation that the CakePHP organization does not wish to promote diversity within it’s userbase.&lt;/p&gt;

&lt;h2 id=&quot;first-some-stats&quot;&gt;First, some stats&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;27 Core Developers. Not all active, not including doc translation teams&lt;/li&gt;
  &lt;li&gt;5-6 continents, dozens of timezones&lt;/li&gt;
  &lt;li&gt;We do not ask for race or gender of team members&lt;/li&gt;
  &lt;li&gt;All unpaid&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do we have a paucity of Women/POC/LGBTQ members on the core team? Yes, we do.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;IIRC we’ve had trans members in the past (one is currently inactive) but we can certainly do better.&lt;/li&gt;
  &lt;li&gt;At the moment, our only active female contributor is our community organizer - she does a tremendous job of it.&lt;/li&gt;
  &lt;li&gt;Our team is pretty diverse ethnically, though we I think we can do better with contributors from Africa, the Middle East, and Asia.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;No, I don’t make it a habit to ask whether someone considers themselves LGBTQ. That’s their decision to share, not mine, and doesn’t have any real bearing on whether their contributions have merit. Meritocracy is a separate issue, and I’m happy to discuss my (probably incorrect) thoughts on it, but that will have to wait for another day.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;how-to-join-the-cakephp-core-team&quot;&gt;How to Join the CakePHP Core Team&lt;/h2&gt;

&lt;p&gt;Things you can do that make you eligible:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Contribute to documentation: We have a ton of active doc translation teams, and this is the easiest way to get onto our core team. Simply start and continue to contribute docs. There isn’t a magic bar to when we do a core invite, though we’ll give you commit access after you’ve proven that you’re here to stay.&lt;/li&gt;
  &lt;li&gt;Write something useful for the community: Whether its a useful tutorial site, a widely used utility, or a ton of plugins/integration code, this is a way to give back while still owning your own code.&lt;/li&gt;
  &lt;li&gt;Be active in support channels: We have a ton of users asking questions, you may know many of the answers. IRC/Slack are easiest, as they have most visibility with the core teams, but we would support anyone who wants to provide support otherwise.&lt;/li&gt;
  &lt;li&gt;Design work: OSS projects are always looking for work.&lt;/li&gt;
  &lt;li&gt;Contribute code to the core or related projects: Many have entered this way, and I doubt this will cease to be a way to get commit bit.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are, of course, others, but this is just some context into the various ways we get users contributing.&lt;/p&gt;

&lt;h2 id=&quot;cakefest-conference&quot;&gt;CakeFest Conference&lt;/h2&gt;

&lt;p&gt;Every year, about 100-150 people attend the conference. We intentionally keep the conference small in order to ensure we can:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Provide quality instruction during the workshops&lt;/li&gt;
  &lt;li&gt;Have Core Developers speak with as many of the attendees as possible&lt;/li&gt;
  &lt;li&gt;Ensure our conference costs do not overrun the amount of money we take in via ticket sales and sponsorship.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;how-does-the-conference-make-money&quot;&gt;How does the conference make money&lt;/h3&gt;

&lt;p&gt;We charge for tickets, the majority of purchases coming before Early Bird, so they are lower in price.&lt;/p&gt;

&lt;p&gt;We also take sponsorships from companies in the development community, though many companies have budgets that need to be pre-approved, and thus sometimes we apply too late for some to be able to contribute. The majority of the funding ends up coming from one or two Gold sponsors.&lt;/p&gt;

&lt;p&gt;We do not publish what CakeFest costs are, nor the budget, but I can promise you that - because of our ticket prices - its very rare that it makes any money. No one is getting rich off of it, despite what feelings about conference organizing you may have.&lt;/p&gt;

&lt;p&gt;Our alternative is, of course, to raise ticket prices, but we believe that it is better for our userbase to be able to afford the conference and resulting travel expenses than to make a quick buck.&lt;/p&gt;

&lt;h3 id=&quot;who-pays-for-cakephp&quot;&gt;Who pays for CakePHP&lt;/h3&gt;

&lt;p&gt;Aside from sponsors and ticket sales, CakeDC has traditionally footed the bill for any overages - and in some cases they are quite high - with individual core members contributing money out of pocket for certain things.&lt;/p&gt;

&lt;p&gt;We also occasionally have core members or speakers pay for things out of their pocket or a company per diem. These usually cover small group events, offsite lunch/dinners. This is generally appreciated but not required of anyone.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I personally gave $1k of my money for the SF conference to cover a group event, after which I had trouble finding money to pay for a hostel I was staying at during the rest of my stay in SF. Derp.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;core-team-attendance&quot;&gt;Core Team Attendance&lt;/h3&gt;

&lt;p&gt;Conference attendance is awesome, and we wish everyone could attend. More than three-quarters of the core team is unable to attend at any given CakeFest, due to a variety of issues:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Visa Requirements for certain countries: If its in a country not friendly to your place of citizenship, this can be an issue.&lt;/li&gt;
  &lt;li&gt;Timing and other commitments: Some people have children and cannot take off, or it conflicts with other arrangements.&lt;/li&gt;
  &lt;li&gt;Money: We try to reimburse certain things (flights) and schedule others (hotel), but cannot in all cases.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We still have a few core team members who have never attended a single CakeFest. My hope is that we can figure out how to move CakeFest to a locale they can afford to travel to.&lt;/p&gt;

&lt;h3 id=&quot;speaker-diversity&quot;&gt;Speaker Diversity&lt;/h3&gt;

&lt;p&gt;I wish I could say the numbers here were good. From what I hear about other conferences, hey seem to be on par with general PHP conference diversity numbers.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We normally have 1 or 2 Women speakers.&lt;/li&gt;
  &lt;li&gt;Half or more of our speakers are POC, with at least half of those being non-core.&lt;/li&gt;
  &lt;li&gt;As far as I can tell - again, I don’t make a habit of asking - it is rare that we have an LGBTQ speaker.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those numbers are pretty similar over all scheduled CakeFests.&lt;/p&gt;

&lt;p&gt;All talks are chosen without speaker names by the core team. The only ones that know potential speaker names/details are Larry Masters (Project Lead) and Megan Lalk (Community Manager). Though I was reasonably involved in planning, this year I did not know speaker names in advance.&lt;/p&gt;

&lt;p&gt;In the event of a tie between a core and non-core speaker, Larry and Megan will err on the side of the non-core speaker. We also make certain exceptions for new speakers and those who fall into groups that don’t traditionally speak in our conferences (Women/PoC/LGBTQ). We always err on the side of diversity, which usually is pretty easy as those speakers usually submit great talk topics.&lt;/p&gt;

&lt;h3 id=&quot;attendee-diversity&quot;&gt;Attendee Diversity&lt;/h3&gt;

&lt;p&gt;This is pretty abysmal IMO. We do reasonably well with PoC, but very poorly with Women/LGBTQ. I don’t have exact numbers - see above where I don’t ask about sexual orientation - but my recollection is we generally have 1-2 Women attend, and 1-2 LGBTQ community members attend.&lt;/p&gt;

&lt;p&gt;I think we can do better.&lt;/p&gt;

&lt;p&gt;Larry Masters and myself have already started the ball rolling in this direction, though it’s slow going because of life/work commitments. I’ve been in contact with Larry about several initiatives in both the PHP and general development community, including those that we can directly financially contribute to.&lt;/p&gt;

&lt;p&gt;As an aside, we also backed off from certain organizations because of issues raised - by those previously affiliated or working with said orgs - with how those funds might be used.&lt;/p&gt;

&lt;h3 id=&quot;scholarships&quot;&gt;Scholarships&lt;/h3&gt;

&lt;p&gt;We’ve never done a full scholarship - conference/travel/hotel - but we have done partial scholarships that include conference/workshop tickets. This was pretty successful when we previously had it in NYC, and we gave students at the University hosting the event free access to everything in the event.&lt;/p&gt;

&lt;p&gt;This is something I think we can pretty easily do on an as needed basis, and works incredibly well for enriching the local community. It’s something I looked into this year but as I do not live in NYC, it is harder to get in touch with good local organizations. Suggestions welcome, as I think we can still do something in this realm.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For what it’s worth, I believe more than half of the students attending that year under our partial scholarship were Women/PoC/LGBTQ.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;funding-scholarships&quot;&gt;Funding Scholarships&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;This section is more of a rant than anything else, as it was a public, personal attack on whether or not I care about the issue.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’ll also quickly touch on the idea that I/anyone could have saved $10 every day over the past year to help personally sponsor a full scholarship to CakeFest.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I’m historically pretty terrible with money, and between moving, medical expenses, living expenses, and subletting my old apartment at a loss, I actually don’t have much money to spare at the moment. Not that it’s anyone’s business, but I previously planned to purchase a (very cheap) car for my mother - hers is failboating left and right - but had to use that for unforeseen expenses that came up. Yeah, I could have saved $10 every day, but not this year.&lt;/li&gt;
  &lt;li&gt;CakePHP - the organization - has no money.
    &lt;ul&gt;
      &lt;li&gt;Server costs are paid for by Rackspace.&lt;/li&gt;
      &lt;li&gt;Server maintenance is performed by me (for free).&lt;/li&gt;
      &lt;li&gt;Application development is provided by CakeDC, who pays their developers to work on OSS for CakePHP.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;CakePHP - the core team - is a diverse group of people who have their own financial worries. Some are reasonably well off, and others are not. Whether they donate money is up to them. Setting up a non-profit that can take donations for the purposes of funding a scholarship is not free (time or money) and as we are all volunteers, it’s unlikely that any of us will take the initiative to set something up and ensure it remains viable.&lt;/li&gt;
  &lt;li&gt;CakeDC - a company who funds a lot of CakePHP initiatives - already donates quite a bit to the well-being of the CakePHP project. As much as I’d love them to setup a scholarship, I’d also love for their developers to continue to get a paycheck for their OSS work.
    &lt;ul&gt;
      &lt;li&gt;All training income from CakeDC goes to funding CakeFest.&lt;/li&gt;
      &lt;li&gt;CakeDC employees are paid to contribute OSS to cakephp/cakephp, personal projects, and CakeDC OSS.&lt;/li&gt;
      &lt;li&gt;CakeDC employees are paid to develop certain CakePHP-related sites.&lt;/li&gt;
      &lt;li&gt;CakeDC pays for ongoing design work (most of which was previously done by the awesome Story family)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In short, there isn’t really all that much extra money to fund this sort of thing easily. There is also the overhead of properly administrating any funds, and ensuring that such funding continues to grow. I believe there are other organizations that are better equipped to handle such responsibilities - BlackGirlsCode, PHPWomen, etc. - and will try and help any such organizations who wish to engage the CakePHP community/CakeFest as best we can.&lt;/p&gt;

&lt;h2 id=&quot;going-forward&quot;&gt;Going Forward&lt;/h2&gt;

&lt;p&gt;Ideally we have some form of publicized scholarship. I think we’ll spend some time after this CakeFest planning out what that looks like. I already have a few ideas that seemed to be well-received, so my guess is they’ll be in full swing next year.&lt;/p&gt;

&lt;p&gt;I don’t think a full-ride scholarship will be viable unless there are private donations. Any who wish to fund such operations, please feel free to contact me or our community organizer, &lt;a href=&quot;https://www.cakedc.com/team/MeganKleyweg&quot;&gt;Megan Lalk&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for supporting the CakePHP community and it’s developers. Working on CakePHP is labor of love, so while we try to do quite a bit to help our communities, it’s not always possible without your continued help and support.&lt;/p&gt;
</description>
        <pubDate>Fri, 14 Apr 2017 13:51:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2017/04/14/why-cakefest-does-not-currently-have-a-diversity-scholarship/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2017/04/14/why-cakefest-does-not-currently-have-a-diversity-scholarship/</guid>
        
        <category>cakephp</category>
        
        <category>cakefest</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Deploying our application</title>
        <description>&lt;p&gt;A friend of mine asked for a custom website, so here I am, writing a custom cms. I know, there are plenty of systems out there that would handle his needs, but it’s also a good excuse to play around with CakePHP 3, so here we are.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the lazy, the codebase we’ll be working on will be available on &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016&quot;&gt;GitHub&lt;/a&gt;. I will be pushing each set of changes on the date when each blog post in this series is published. No cheating!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;errata-from-previous-post&quot;&gt;Errata from previous post&lt;/h2&gt;

&lt;p&gt;Looks like I should run the code before committing it. Here are a few issues with the last post:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The OrderNotificationBehavior was attached improperly. It should be as follows:&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;addBehavior(&#39;PhotoPostType.OrderNotification&#39;);
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;The namespace for &lt;code&gt;OrderNotificationBehavior&lt;/code&gt; should be &lt;code&gt;namespace PhotoPostType\Model\Behavior;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The &lt;code&gt;use&lt;/code&gt; statement for &lt;code&gt;QueueTrait&lt;/code&gt; should be &lt;code&gt;use Josegonzalez\CakeQueuesadilla\Traits\QueueTrait;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Missing a comma on line 20 of &lt;code&gt;OrderNotificationBehavior&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Extra semicolon around line 34 of &lt;code&gt;OrderNotificationBehavior&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Missing data from the &lt;code&gt;shipped&lt;/code&gt; MailerJob enqueue in &lt;code&gt;OrderNotificationBehavior&lt;/code&gt;. It should be:&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&#39;data&#39; =&amp;gt; [
    &#39;order_id&#39; =&amp;gt; $entity-&amp;gt;id
],
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks to those who’ve pointed out my derps. These fixes are available as the first commit in the current release.&lt;/p&gt;

&lt;h2 id=&quot;creating-a-heroku-application&quot;&gt;Creating a heroku application&lt;/h2&gt;

&lt;p&gt;First, you’ll want to install the &lt;a href=&quot;https://devcenter.heroku.com/articles/heroku-cli&quot;&gt;heroku cli&lt;/a&gt;. This will be used to orchestrate our application on heroku.&lt;/p&gt;

&lt;p&gt;In the app repository, I ran the following to create a new heroku app:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;heroku create
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is a bit of configuration we need to set in order to get our app fully working in heroku. First, lets ensure our &lt;code&gt;config/.env.default&lt;/code&gt; does not override our environment variables by setting an application name:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;heroku config:set APP_NAME=calico
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we’ll disable debug, as otherwise deploying will have errors regarding DebugKit not being installed. On heroku, packages in our composer.json &lt;code&gt;require-dev&lt;/code&gt; section are not installed, so skipping this will mean our &lt;code&gt;config/bootstrap.php&lt;/code&gt; will attempt to load a non-existent plugin.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;heroku config:set DEBUG=false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to send email, you’ll probably want to configure your &lt;code&gt;EMAIL_TRANSPORT_DEFAULT_URL&lt;/code&gt; env var as well. I’ve set mine to smtp settings from a Gmail account, though if you want to use a custom email transport for an email service, you are welcome to do that as well. Don’t forget to set a primary email!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;heroku config:set EMAIL_TRANSPORT_DEFAULT_URL=&quot;mail://user:secret@localhost:25/?client=null&amp;amp;timeout=30&amp;amp;tls=null&quot;
heroku config:set PRIMARY_EMAIL=&quot;example@example.com&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ll also want to configure stripe properly. I’ll add the following to my &lt;code&gt;config/app.php&lt;/code&gt; and &lt;code&gt;config/app.default.php&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Configures Stripe
 */
&#39;Stripe&#39; =&amp;gt; [
    &#39;publishablekey&#39; =&amp;gt; env(&#39;STRIPE_PUBLISHABLEKEY&#39;, &#39;pk_test_1234&#39;),
    &#39;secretkey&#39; =&amp;gt; env(&#39;STRIPE_SECRETKEY&#39;, &#39;sk_test_abcd&#39;),
    &#39;mode&#39; =&amp;gt; env(&#39;STRIPE_MODE&#39;, &#39;test&#39;)
],

/**
 * Sets primary config for our app (email, etc.)
 */
&#39;Primary&#39; =&amp;gt; [
    &#39;email&#39; =&amp;gt; env(&#39;PRIMARY_EMAIL&#39;, &#39;example@example.com&#39;),
],
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we can set the env vars like normal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;heroku config:set STRIPE_PUBLISHABLEKEY=pk_test_1234
heroku config:set STRIPE_SECRETKEY=sk_test_abcd
heroku config:set STRIPE_MODE=test
heroku config:set PRIMARY_EMAIL=&quot;example@example.com&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Commit!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add config/app.default.php
git commit -m &quot;Ensure we read env vars for stripe and primary email configuration&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’ll configure a database, queuing, and our cache layer using some heroku addons for postgres and redis:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;heroku addons:create heroku-postgresql:hobby-dev
heroku addons:create heroku-redis:hobby-dev

APP_NAME=&quot;$(heroku config:get APP_NAME)&quot;
DATABASE_URL=&quot;$(heroku config:get DATABASE_URL)&quot;
REDIS_URL=&quot;$(heroku config:get REDIS_URL)&quot;
heroku config:set QUEUESADILLA_DEFAULT_URL=&quot;${DATABASE_URL}&quot;
heroku config:set CACHE_DEFAULT_URL=&quot;${REDIS_URL}?prefix=${APP_NAME}_&quot;
heroku config:set CACHE_CAKECORE_URL=&quot;${REDIS_URL}?prefix=${APP_NAME}_cake_core_&quot;
heroku config:set CACHE_CAKEMODEL_URL=&quot;${REDIS_URL}?prefix=${APP_NAME}_cake_model_&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One thing that needs to be done is we need to ensure we build assets in heroku, or our admin won’t be able to render assets. I ran the following command locally:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;mkdir webroot/cache_css webroot/cache_js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I added those directories to my &lt;code&gt;.gitignore&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;/webroot/cache_css
/webroot/cache_js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally, I added the following to the application’s &lt;code&gt;composer.json&lt;/code&gt; in &lt;code&gt;scripts.compile&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;&quot;mkdir webroot/cache_css webroot/cache_js&quot;,
&quot;bin/cake asset_compress build&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And I’ll commit these changes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add .gitignore composer.json
git commit -m &quot;Build assets on deploy&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we’ll need to square away our logging setup.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;heroku config:set LOG_DEBUG_URL=&quot;syslog://logs?levels[]=notice&amp;amp;levels[]=info&amp;amp;levels[]=debug&amp;amp;file=debug&quot;
heroku config:set LOG_ERROR_URL=&quot;syslog://logs?levels[]=warning&amp;amp;levels[]=error&amp;amp;levels[]=critical&amp;amp;levels[]=alert&amp;amp;levels[]=emergency&amp;amp;file=error&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now push your code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git push heroku master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You’ll see a lot of build output, but once it is done, you can type &lt;code&gt;heroku open&lt;/code&gt; to open your site in the browser.&lt;/p&gt;

&lt;h2 id=&quot;background-workers&quot;&gt;Background workers&lt;/h2&gt;

&lt;p&gt;You can add background queue workers by adding the following to your &lt;code&gt;Procfile&lt;/code&gt; if it does not already exist:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;worker: bin/cake queuesadilla
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then commit and push the change:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add Procfile
git commit -m &quot;Allow running a background worker&quot;
git push heroku master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To start a worker, you’ll need to scale it up:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;heroku ps:scale worker=1
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;logging-in&quot;&gt;Logging in&lt;/h2&gt;

&lt;p&gt;You’ll need to create a user to login as. To do so, you can start a new heroku dyno:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;heroku run bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then run our helper &lt;code&gt;UserShell&lt;/code&gt; to create the first user:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake user --username-field email
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;homework-time-uploading-images&quot;&gt;Homework Time: Uploading images&lt;/h2&gt;

&lt;p&gt;This will require a bit of reworking. Firstly, data is not persisted, so we need to store it on an external filesystem. I prefer &lt;a href=&quot;http://flysystem.thephpleague.com/adapter/aws-s3-v3/&quot;&gt;AWS S3&lt;/a&gt; for storing static files. Fortunately, flysystem supports quite adapters for different storage engines, so you can use whatever you’d like.&lt;/p&gt;

&lt;p&gt;There are two places in the codebase you’ll need to edit:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;UsersTable&lt;/code&gt;: The &lt;code&gt;Josegonzalez/Upload&lt;/code&gt; behavior can be configured to use any adapter. Documentation &lt;a href=&quot;https://cakephp-upload.readthedocs.io/en/latest/configuration.html&quot;&gt;here&lt;/a&gt; on that.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;PhotoPostType&lt;/code&gt;: The adapter configured for upload is the &lt;code&gt;Local&lt;/code&gt; adapter. Use whichever one you feel most comfortable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I won’t be making these changes in my version, but in a future release of my client’s CMS, these two should be configurable :)&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;For those that may just want to ensure their codebase matches what has been done so far, the codebase is available on GitHub and tagged as &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016/tree/0.0.24&quot;&gt;0.0.24&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And that’s a rap! We’ve created a fully-functioning CMS with:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Image uploading&lt;/li&gt;
  &lt;li&gt;Custom theme support&lt;/li&gt;
  &lt;li&gt;CrudView-generated admin dashboard&lt;/li&gt;
  &lt;li&gt;User authentication&lt;/li&gt;
  &lt;li&gt;Password reset flows&lt;/li&gt;
  &lt;li&gt;Email sending and previews&lt;/li&gt;
  &lt;li&gt;Background queues&lt;/li&gt;
  &lt;li&gt;Simple ecommerce functionality&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lots of stuff here for really not much code, and it was all thanks to the power of CakePHP.&lt;/p&gt;

&lt;p&gt;Be sure to follow along via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2016 CakeAdvent Calendar.&lt;/p&gt;

&lt;p&gt;Hope you all had as much fun as I did with this year’s CakeAdvent Calendar. Until next post, take care and happy holidays!&lt;/p&gt;
</description>
        <pubDate>Sat, 24 Dec 2016 05:04:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/12/24/deploying-our-application/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/12/24/deploying-our-application/</guid>
        
        <category>deployment</category>
        
        <category>heroku</category>
        
        <category>cakeadvent-2016</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Order status notifications</title>
        <description>&lt;p&gt;A friend of mine asked for a custom website, so here I am, writing a custom cms. I know, there are plenty of systems out there that would handle his needs, but it’s also a good excuse to play around with CakePHP 3, so here we are.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the lazy, the codebase we’ll be working on will be available on &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016&quot;&gt;GitHub&lt;/a&gt;. I will be pushing each set of changes on the date when each blog post in this series is published. No cheating!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;order-mailer-for-email-notifications&quot;&gt;Order Mailer for email notifications&lt;/h2&gt;

&lt;p&gt;First thing is we’ll need an OrderMailer to handle all the actual email sending. Here is mine:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace PhotoPostType\Mailer;

use Cake\Core\Configure;
use Cake\Mailer\Mailer;
use Josegonzalez\MailPreview\Mailer\PreviewTrait;

class OrderMailer extends Mailer
{

    use PreviewTrait;

    /**
     * Email sent on new order
     *
     * @param array $email User email
     * @param string $token Token used for validation
     * @return \Cake\Mailer\Mailer
     */
    public function newOrder($data)
    {
        $this-&amp;gt;loadModel(&#39;PhotoPostType.Orders&#39;);
        $order = $this-&amp;gt;Orders-&amp;gt;get($data[&#39;order_id&#39;]);
        return $this-&amp;gt;to(Configure::read(&#39;Primary.email&#39;))
            -&amp;gt;subject(&#39;New Order&#39;)
            -&amp;gt;template(&#39;PhotoPostType.new_order&#39;)
            -&amp;gt;set($order)
            -&amp;gt;emailFormat(&#39;html&#39;);
    }

    /**
     * Email sent on order received
     *
     * @param array $email User email
     * @param string $token Token used for validation
     * @return \Cake\Mailer\Mailer
     */
    public function received($data)
    {
        $this-&amp;gt;loadModel(&#39;PhotoPostType.Orders&#39;);
        $order = $this-&amp;gt;Orders-&amp;gt;get($data[&#39;order_id&#39;]);
        return $this-&amp;gt;to($order-&amp;gt;email)
            -&amp;gt;subject(&#39;Order Received!&#39;)
            -&amp;gt;template(&#39;PhotoPostType.received&#39;)
            -&amp;gt;set($order)
            -&amp;gt;emailFormat(&#39;html&#39;);
    }

    /**
     * Email sent on order shipped
     *
     * @param array $email User email
     * @param string $token Token used for validation
     * @return \Cake\Mailer\Mailer
     */
    public function shipped($data)
    {
        $this-&amp;gt;loadModel(&#39;PhotoPostType.Orders&#39;);
        $order = $this-&amp;gt;Orders-&amp;gt;get($data[&#39;order_id&#39;]);
        return $this-&amp;gt;to($order-&amp;gt;email)
            -&amp;gt;subject(&#39;Order Shipped!&#39;)
            -&amp;gt;template(&#39;PhotoPostType.shipped&#39;)
            -&amp;gt;set($order)
            -&amp;gt;emailFormat(&#39;html&#39;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’ve defined three different types of emails:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;newOrder&lt;/code&gt;: Sent to the email configured at &lt;code&gt;Primary.email&lt;/code&gt; when we get a new order&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;received&lt;/code&gt;: Sent to the orderer when we’ve received their order&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;shipped&lt;/code&gt;: Sent to the orderer when we’ve shipped their email&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I added the following to my &lt;code&gt;config/.env&lt;/code&gt; and &lt;code&gt;config/.env.default&lt;/code&gt; to configure the &lt;code&gt;Primary.email&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;export PRIMARY_EMAIL=&quot;example@example.com&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here are my html templates for each email, which I’ve placed in &lt;code&gt;plugins/PhotoPostType/Template/Email/html/&lt;/code&gt;. You can create equivalent text templates as well:&lt;/p&gt;

&lt;h4 id=&quot;pluginsphotoposttypetemplateemailhtmlneworderctp&quot;&gt;&lt;code&gt;plugins/PhotoPostType/Template/Email/html/new_order.ctp&lt;/code&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;h2&amp;gt;There was a new order&amp;lt;/h2&amp;gt;

&amp;lt;p&amp;gt;
    See the new order &amp;lt;?= $this-&amp;gt;Html-&amp;gt;link(&#39;here&#39;, \Cake\Routing\Router::url([
        &#39;plugin&#39; =&amp;gt; &#39;PhotoPostType&#39;,
        &#39;controller&#39; =&amp;gt; &#39;Orders&#39;,
        &#39;action&#39; =&amp;gt; &#39;index&#39;,
        $token
    ], true)); ?&amp;gt;
&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;
    Order details:
&amp;lt;/p&amp;gt;
&amp;lt;dl&amp;gt;
    &amp;lt;dt&amp;gt;name&amp;lt;/dd&amp;gt;
    &amp;lt;dd&amp;gt;&amp;lt;?= $order-&amp;gt;name ?&amp;gt;&amp;lt;/dd&amp;gt;

    &amp;lt;dt&amp;gt;address&amp;lt;/dd&amp;gt;
    &amp;lt;dd&amp;gt;&amp;lt;?= $order-&amp;gt;address_line_1 ?&amp;gt;&amp;lt;/dd&amp;gt;

    &amp;lt;dt&amp;gt;zip&amp;lt;/dd&amp;gt;
    &amp;lt;dd&amp;gt;&amp;lt;?= $order-&amp;gt;address_zip ?&amp;gt;&amp;lt;/dd&amp;gt;

    &amp;lt;dt&amp;gt;state&amp;lt;/dd&amp;gt;
    &amp;lt;dd&amp;gt;&amp;lt;?= $order-&amp;gt;address_state ?&amp;gt;&amp;lt;/dd&amp;gt;

    &amp;lt;dt&amp;gt;city&amp;lt;/dd&amp;gt;
    &amp;lt;dd&amp;gt;&amp;lt;?= $order-&amp;gt;address_city ?&amp;gt;&amp;lt;/dd&amp;gt;

    &amp;lt;dt&amp;gt;countrys&amp;lt;/dd&amp;gt;
    &amp;lt;dd&amp;gt;&amp;lt;?= $order-&amp;gt;address_country ?&amp;gt;&amp;lt;/dd&amp;gt;
&amp;lt;/dl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;pluginsphotoposttypetemplateemailhtmlreceivedctp&quot;&gt;&lt;code&gt;plugins/PhotoPostType/Template/Email/html/received.ctp&lt;/code&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;h2&amp;gt;Your order was recieved&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;
    Thanks for your order! We will be shortly shipping out your order to the following address:
&amp;lt;/p&amp;gt;
&amp;lt;dl&amp;gt;
    &amp;lt;dt&amp;gt;name&amp;lt;/dd&amp;gt;
    &amp;lt;dd&amp;gt;&amp;lt;?= $order-&amp;gt;name ?&amp;gt;&amp;lt;/dd&amp;gt;

    &amp;lt;dt&amp;gt;address&amp;lt;/dd&amp;gt;
    &amp;lt;dd&amp;gt;&amp;lt;?= $order-&amp;gt;address_line_1 ?&amp;gt;&amp;lt;/dd&amp;gt;

    &amp;lt;dt&amp;gt;zip&amp;lt;/dd&amp;gt;
    &amp;lt;dd&amp;gt;&amp;lt;?= $order-&amp;gt;address_zip ?&amp;gt;&amp;lt;/dd&amp;gt;

    &amp;lt;dt&amp;gt;state&amp;lt;/dd&amp;gt;
    &amp;lt;dd&amp;gt;&amp;lt;?= $order-&amp;gt;address_state ?&amp;gt;&amp;lt;/dd&amp;gt;

    &amp;lt;dt&amp;gt;city&amp;lt;/dd&amp;gt;
    &amp;lt;dd&amp;gt;&amp;lt;?= $order-&amp;gt;address_city ?&amp;gt;&amp;lt;/dd&amp;gt;

    &amp;lt;dt&amp;gt;countrys&amp;lt;/dd&amp;gt;
    &amp;lt;dd&amp;gt;&amp;lt;?= $order-&amp;gt;address_country ?&amp;gt;&amp;lt;/dd&amp;gt;
&amp;lt;/dl&amp;gt;
&amp;lt;p&amp;gt;Thanks again, and enjoy!&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;pluginsphotoposttypetemplateemailhtmlshippedctp&quot;&gt;&lt;code&gt;plugins/PhotoPostType/Template/Email/html/shipped.ctp&lt;/code&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;h2&amp;gt;Your order was shipped&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;
    Thanks for your order! Here are your order details:
&amp;lt;/p&amp;gt;
&amp;lt;dl&amp;gt;
    &amp;lt;dt&amp;gt;name&amp;lt;/dd&amp;gt;
    &amp;lt;dd&amp;gt;&amp;lt;?= $order-&amp;gt;name ?&amp;gt;&amp;lt;/dd&amp;gt;

    &amp;lt;dt&amp;gt;address&amp;lt;/dd&amp;gt;
    &amp;lt;dd&amp;gt;&amp;lt;?= $order-&amp;gt;address_line_1 ?&amp;gt;&amp;lt;/dd&amp;gt;

    &amp;lt;dt&amp;gt;zip&amp;lt;/dd&amp;gt;
    &amp;lt;dd&amp;gt;&amp;lt;?= $order-&amp;gt;address_zip ?&amp;gt;&amp;lt;/dd&amp;gt;

    &amp;lt;dt&amp;gt;state&amp;lt;/dd&amp;gt;
    &amp;lt;dd&amp;gt;&amp;lt;?= $order-&amp;gt;address_state ?&amp;gt;&amp;lt;/dd&amp;gt;

    &amp;lt;dt&amp;gt;city&amp;lt;/dd&amp;gt;
    &amp;lt;dd&amp;gt;&amp;lt;?= $order-&amp;gt;address_city ?&amp;gt;&amp;lt;/dd&amp;gt;

    &amp;lt;dt&amp;gt;countrys&amp;lt;/dd&amp;gt;
    &amp;lt;dd&amp;gt;&amp;lt;?= $order-&amp;gt;address_country ?&amp;gt;&amp;lt;/dd&amp;gt;
&amp;lt;/dl&amp;gt;
&amp;lt;p&amp;gt;Thanks again, and enjoy!&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty straightforward. I’ll commit my changes now.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add config/.env.default plugins/PhotoPostType/src/Mailer/OrderMailer.php plugins/PhotoPostType/src/Template/Email/html/new_order.ctp plugins/PhotoPostType/src/Template/Email/html/received.ctp plugins/PhotoPostType/src/Template/Email/html/shipped.ctp
git commit -m &quot;Create order status emails&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;shipping-emails&quot;&gt;Shipping Emails&lt;/h2&gt;

&lt;p&gt;This one was a bit more difficult to figure out where it should go. I want to hook into CakePHP’s &lt;code&gt;Model.afterSave&lt;/code&gt; event as seamlessly as possible. We could add a new event handler to our &lt;code&gt;OrdersListener&lt;/code&gt; and bind it on the Model as well, but that seems icky. I’m going to instead use model behaviors, which are purpose-built to handle all table events. The following is my &lt;code&gt;OrderNotificationBehavior&lt;/code&gt;, located at &lt;code&gt;plugins/PhotoPostType/src/Model/Behavior/OrderNotificationBehavior.php&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace PhotoPostType\Model\Behavior;

use Cake\Datasource\EntityInterface;
use Cake\Event\Event;
use Cake\ORM\Behavior;
use Josegonzalez\CakeQueuesadilla\Traits\QueueTrait;

class OrderNotificationBehavior extends Behavior
{
    use QueueTrait;

    public function afterSave(Event $event, EntityInterface $entity)
    {
        if ($entity-&amp;gt;isNew()) {
            $this-&amp;gt;push([&#39;\App\Job\MailerJob&#39;, &#39;execute&#39;], [
                &#39;action&#39; =&amp;gt; &#39;received&#39;,
                &#39;mailer&#39; =&amp;gt; &#39;PhotoPostType.Orders&#39;,
                &#39;data&#39; =&amp;gt; [
                    &#39;order_id&#39; =&amp;gt; $entity-&amp;gt;id,
                    &#39;email&#39; =&amp;gt; $entity-&amp;gt;email,
                    &#39;name&#39; =&amp;gt; $entity-&amp;gt;shipping_name,
                    &#39;address_line_1&#39; =&amp;gt; $entity-&amp;gt;shipping_address_line_1,
                    &#39;address_zip&#39; =&amp;gt; $entity-&amp;gt;shipping_address_zip,
                    &#39;address_state&#39; =&amp;gt; $entity-&amp;gt;shipping_address_state,
                    &#39;address_city&#39; =&amp;gt; $entity-&amp;gt;shipping_address_city,
                    &#39;address_country&#39; =&amp;gt; $entity-&amp;gt;shipping_address_country,
                ]
            ]);

            $this-&amp;gt;push([&#39;\App\Job\MailerJob&#39;, &#39;execute&#39;], [
                &#39;action&#39; =&amp;gt; &#39;newOrder&#39;,
                &#39;mailer&#39; =&amp;gt; &#39;PhotoPostType.Orders&#39;,
                &#39;data&#39; =&amp;gt; [
                    &#39;order_id&#39; =&amp;gt; $entity-&amp;gt;id
                ],
            ]);
        } elseif ($entity-&amp;gt;shipped) {
            $this-&amp;gt;push([&#39;\App\Job\MailerJob&#39;, &#39;execute&#39;], [
                &#39;action&#39; =&amp;gt; &#39;shipped&#39;,
                &#39;mailer&#39; =&amp;gt; &#39;PhotoPostType.Orders&#39;,
                &#39;data&#39; =&amp;gt; [
                    &#39;order_id&#39; =&amp;gt; $entity-&amp;gt;id
                ],
            ]);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s pretty straightforward. I am reusing the &lt;code&gt;MailerJob&lt;/code&gt; to send the emails in the background - awh yis - and sending all three emails depending upon whether:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The order was just created&lt;/li&gt;
  &lt;li&gt;The order was shipped&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;push&lt;/code&gt; method comes from our &lt;code&gt;QueueTrait&lt;/code&gt;, which helpfully uses the default queue handler to push jobs.&lt;/p&gt;

&lt;p&gt;Next, we’ll link it up to our &lt;code&gt;PhotoPostType.Orders::initialize()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;addBehavior(&#39;OrderNotificationBehavior&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we’re done!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git commit plugins/PhotoPostType/src/Model/Behavior/OrderNotificationBehavior.php plugins/PhotoPostType/src/Model/Table/OrdersTable.php
git commit -m &quot;Send emails when the status of the order changes&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;homework-time&quot;&gt;Homework time&lt;/h2&gt;

&lt;p&gt;You’ll notice that the CMS user has no idea what was actually ordered - they’d need to guess this from the charge id in &lt;code&gt;Stripe&lt;/code&gt;. This kinda bites, so your task is to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Track the post id that is being purchased.&lt;/li&gt;
  &lt;li&gt;Save that relation to the &lt;code&gt;orders&lt;/code&gt; table.&lt;/li&gt;
  &lt;li&gt;Display a link to what is being purchased on the &lt;code&gt;/admin/orders&lt;/code&gt; page.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;For those that may just want to ensure their codebase matches what has been done so far, the codebase is available on GitHub and tagged as &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016/tree/0.0.23&quot;&gt;0.0.23&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s been almost a month, but our CMS is rounding to a close. Our next task is to actually place it online somewhere so our client can view it and suggest any changes. Ideally this happens earlier in the process, but we’ve only just completed the initial functionality, so it’s a reasonable compromise.&lt;/p&gt;

&lt;p&gt;Be sure to follow along via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2016 CakeAdvent Calendar. Come back tomorrow for more delicious content.&lt;/p&gt;
</description>
        <pubDate>Fri, 23 Dec 2016 08:30:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/12/23/order-status-notifications/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/12/23/order-status-notifications/</guid>
        
        <category>emails</category>
        
        <category>mailers</category>
        
        <category>orders</category>
        
        <category>cakeadvent-2016</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Handling Photo Orders</title>
        <description>&lt;p&gt;A friend of mine asked for a custom website, so here I am, writing a custom cms. I know, there are plenty of systems out there that would handle his needs, but it’s also a good excuse to play around with CakePHP 3, so here we are.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the lazy, the codebase we’ll be working on will be available on &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016&quot;&gt;GitHub&lt;/a&gt;. I will be pushing each set of changes on the date when each blog post in this series is published. No cheating!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;routing-the-orders-admin-panel&quot;&gt;Routing the orders admin panel&lt;/h2&gt;

&lt;p&gt;Before we can get to configuring our admin panel, we’ll need to be able to route it. For our &lt;code&gt;PhotoPostType&lt;/code&gt;, we’ve hardcoded just a single route for viewing an order, but we want to now also properly route admin requests. Here is what I’ve modified the &lt;code&gt;plugins/PhotoPostType/config/routes.php&lt;/code&gt; to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
use Cake\Core\Configure;
use Cake\Routing\RouteBuilder;
use Cake\Routing\Router;
use Cake\Routing\Route\DashedRoute;

$routeClass = Configure::read(&#39;PhotoPostType.Routes.routeClass&#39;);
$routeClass = $routeClass ?: DashedRoute::class;

Router::plugin(&#39;PhotoPostType&#39;, [&#39;path&#39; =&amp;gt; &#39;/&#39;], function ($routes) use ($routeClass) {
    $photoPostTypePrefix = Configure::read(&#39;PhotoPostType.Routes.prefix&#39;);
    $photoPostTypePrefix = $photoPostTypePrefix ?: &#39;/order&#39;;
    $photoPostTypePrefix = &#39;/&#39; . trim($photoPostTypePrefix, &quot;\t\n\r\0\x0B/&quot;);

    $routes-&amp;gt;connect(
        $photoPostTypePrefix,
        [&#39;controller&#39; =&amp;gt; &#39;Orders&#39;, &#39;action&#39; =&amp;gt; &#39;order&#39;],
        [&#39;id&#39; =&amp;gt; &#39;\d+&#39;, &#39;pass&#39; =&amp;gt; [&#39;id&#39;], &#39;routeClass&#39; =&amp;gt; $routeClass]
    );
    $routes-&amp;gt;scope(&#39;/admin/orders&#39;, [&#39;controller&#39; =&amp;gt; &#39;Orders&#39;], function (RouteBuilder $routes) {
          $routes-&amp;gt;connect(&#39;/&#39;, [&#39;action&#39; =&amp;gt; &#39;index&#39;]);
          $routes-&amp;gt;fallbacks();
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’m now mounting the plugin under &lt;code&gt;/&lt;/code&gt; and also scoping &lt;code&gt;/admin/orders&lt;/code&gt; to our &lt;code&gt;PhotoPostType.OrdersController&lt;/code&gt;. One other small change we’ll need to do is modify our &lt;code&gt;AppController::getUtilityNavigation()&lt;/code&gt; method to scope all existing navigation elements to &lt;code&gt;plugin =&amp;gt; null&lt;/code&gt;. I’ve also added a single extra navigation element for logged in users:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;new \CrudView\Menu\MenuItem(
    &#39;Orders&#39;,
    [&#39;plugin&#39; =&amp;gt; &#39;PhotoPostType&#39;, &#39;controller&#39; =&amp;gt; &#39;Orders&#39;, &#39;action&#39; =&amp;gt; &#39;index&#39;]
),
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not the nicest thing in the world, as now we’re crossing boundaries between plugins and the application, but this will do for now. We could alternatively use an event and bind to that event in &lt;code&gt;plugins/PhotoPostType/config/bootstrap.php&lt;/code&gt;, but that seems like more trouble than it’s worth for now.&lt;/p&gt;

&lt;p&gt;Save your work:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add plugins/PhotoPostType/config/routes.php src/Controller/AppController.php
git commit -m &quot;Route and link to OrdersController admin actions&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;enabling-crudview-for-the-orderscontroller&quot;&gt;Enabling CrudView for the OrdersController&lt;/h2&gt;

&lt;p&gt;This is relatively simple. Since our &lt;code&gt;OrdersController&lt;/code&gt; eventually inherits from the &lt;code&gt;AppController&lt;/code&gt;, all we need to do is enable crud-view and allow access to it. I added the following property to my &lt;code&gt;OrdersController&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * A list of actions where the CrudView.View
 * listener should be enabled. If an action is
 * in this list but `isAdmin` is false, the
 * action will still be rendered via CrudView.View
 *
 * @var array
 */
protected $adminActions = [&#39;index&#39;, &#39;delete&#39;];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And next I’ve added the following &lt;code&gt;OrdersController::isAuthorized()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Check if the provided user is authorized for the request.
 *
 * @param array|\ArrayAccess|null $user The user to check the authorization of.
 *   If empty the user fetched from storage will be used.
 * @return bool True if $user is authorized, otherwise false
 */
public function isAuthorized($user = null)
{
    $action = $this-&amp;gt;request-&amp;gt;param(&#39;action&#39;);
    if (in_array($action, $this-&amp;gt;adminActions)) {
        return true;
    }
    return parent::isAuthorized($user);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should allow me access to the &lt;code&gt;OrdersController&lt;/code&gt;, which we will be shortly customizing via an &lt;code&gt;OrdersListener&lt;/code&gt; located in &lt;code&gt;plugins/PhotoPostType/src/Listener/OrdersListener.php&lt;/code&gt;. I’m going to bind that in our &lt;code&gt;OrdersController::initialize()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;Crud-&amp;gt;addListener(&#39;Orders&#39;, &#39;PhotoPostType\Listener\OrdersListener&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here is the skeleton for that class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace PhotoPostType\Listener;

use Cake\Event\Event;
use Crud\Listener\BaseListener;

/**
 * Orders Listener
 */
class OrdersListener extends BaseListener
{
    /**
     * Callbacks definition
     *
     * @return array
     */
    public function implementedEvents()
    {
        return [
            &#39;Crud.beforeHandle&#39; =&amp;gt; &#39;beforeHandle&#39;,
        ];
    }

    /**
     * Before Handle
     *
     * @param \Cake\Event\Event $event Event
     * @return void
     */
    public function beforeHandle(Event $event)
    {
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’m going to save my state before I get too carried away&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add plugins/PhotoPostType/src/Controller/OrdersController.php plugins/PhotoPostType/src/Listener/OrdersListener.php
git commit -m &quot;Enable CrudView for the OrdersController&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;customizing-our-index-page&quot;&gt;Customizing our index page&lt;/h2&gt;

&lt;p&gt;Our index page is a bit special. Here is what I want to do:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Disable non-CrudView actions&lt;/li&gt;
  &lt;li&gt;Show a link to the &lt;code&gt;charge_id&lt;/code&gt; on stripe&lt;/li&gt;
  &lt;li&gt;Show a single, unified element for the contact information&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the first item, we’ll want to add the following to our &lt;code&gt;OrdersController::initialize()&lt;/code&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;Crud-&amp;gt;config(&#39;actions.add&#39;, null);
$this-&amp;gt;Crud-&amp;gt;config(&#39;actions.edit&#39;, null);
$this-&amp;gt;Crud-&amp;gt;config(&#39;actions.view&#39;, null);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This completely disables the actions, while also ensuring that we don’t show any references to them in CrudView.&lt;/p&gt;

&lt;p&gt;Next, we’ll need to add the following to our &lt;code&gt;OrdersListener::beforeHandle()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;if ($event-&amp;gt;subject-&amp;gt;action === &#39;index&#39;) {
    $this-&amp;gt;beforeHandleIndex($event);

    return;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the corresponding &lt;code&gt;OrdersListener::beforeHandleIndex()&lt;/code&gt; is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Before Handle Index Action
 *
 * @param \Cake\Event\Event $event Event
 * @return void
 */
public function beforeHandleIndex(Event $event)
{
    $this-&amp;gt;_action()-&amp;gt;config(&#39;scaffold.fields&#39;, [
        &#39;id&#39;,
        &#39;chargeid&#39; =&amp;gt; [
            &#39;formatter&#39; =&amp;gt; &#39;element&#39;,
            &#39;element&#39; =&amp;gt; &#39;PhotoPostType.crud-view/index-chargeid&#39;,
        ],
        &#39;contact&#39; =&amp;gt; [
            &#39;formatter&#39; =&amp;gt; &#39;element&#39;,
            &#39;element&#39; =&amp;gt; &#39;PhotoPostType.crud-view/index-contact&#39;,
        ],
        &#39;shipped&#39; =&amp;gt; [
        ],
        &#39;created&#39; =&amp;gt; [
        ],
    ]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Previously, we used an inline anonymous function to format the page. This works okay, but in this case we’re going to be doing a bit more work, so using an element seems more appropriate. Here is the contents of my &lt;code&gt;plugins/PhotoPostType/src/Template/Element/crud-view/index-contact.ctp&lt;/code&gt; template:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?= implode(&quot;&amp;lt;br&amp;gt;&quot;, array_filter([
    $context-&amp;gt;get(&#39;shipping_name&#39;),
    $context-&amp;gt;get(&#39;shipping_address_line_1&#39;),
    sprintf(
        &#39;%s, %s %s&#39;,
        $context-&amp;gt;get(&#39;shipping_address_city&#39;),
        $context-&amp;gt;get(&#39;shipping_address_state&#39;),
        $context-&amp;gt;get(&#39;shipping_address_zip&#39;)
    ),
    $context-&amp;gt;get(&#39;shipping_address_country&#39;),
    $context-&amp;gt;get(&#39;email&#39;),
]));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty straightforward. I’m basically getting all the contact info and splatting it together in one element. The &lt;code&gt;$context&lt;/code&gt; object is simply a reference to the entity being displayed.&lt;/p&gt;

&lt;p&gt;Our &lt;code&gt;plugins/PhotoPostType/src/Template/Element/crud-view/index-contact.ctp&lt;/code&gt; template is a bit more complex:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
use Cake\Core\Configure;

$mode = Configure::read(&#39;Stripe.mode&#39;);
if ($mode === &#39;live&#39;) {
    echo $this-&amp;gt;Html-&amp;gt;link($value, sprintf(&#39;https://dashboard.stripe.com/payments/&#39;. $value));
} else {
    echo $this-&amp;gt;Html-&amp;gt;link($value, sprintf(&#39;https://dashboard.stripe.com/test/payments/&#39;. $value));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Depending upon the stripe mode, we link to either the live or the test payment. I’ve also added the following to my &lt;code&gt;config/.env.default&lt;/code&gt; (and equivalent to &lt;code&gt;config/.env&lt;/code&gt;) to handle that new &lt;code&gt;Configure&lt;/code&gt; value.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;export STRIPE_MODE=test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Assuming everything was configured properly, here is what that will look like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/12/22/dashboard.png&quot; alt=&quot;dashboard confessional&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ll save my changes here.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add config/.env.default plugins/PhotoPostType/src/Controller/OrdersController.php plugins/PhotoPostType/src/Listener/OrdersListener.php plugins/PhotoPostType/src/Template/Element/crud-view/index-chargeid.ctp plugins/PhotoPostType/src/Template/Element/crud-view/index-contact.ctp
git commit -m &quot;Customize the OrdersController::index() action&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;adding-bulk-actions&quot;&gt;Adding bulk actions&lt;/h2&gt;

&lt;p&gt;Now that we have a custom admin panel, we’ll need to be able to mark things as shipped. We’ll be using the &lt;code&gt;Crud.Bulk/SetValue&lt;/code&gt; action class, which allows us to bulk update records and set a specific value. First, lets map the action in the &lt;code&gt;OrdersController::initialize()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;Crud-&amp;gt;mapAction(&#39;setShipped&#39;, [
    &#39;className&#39; =&amp;gt; &#39;Crud.Bulk/SetValue&#39;,
    &#39;field&#39; =&amp;gt; &#39;shipped&#39;,
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also need to add it to the list of allowed admin actions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * A list of actions where the CrudView.View
 * listener should be enabled. If an action is
 * in this list but `isAdmin` is false, the
 * action will still be rendered via CrudView.View
 *
 * @var array
 */
protected $adminActions = [&#39;index&#39;, &#39;delete&#39;, &#39;setShipped&#39;];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we’ll want to configure the action itself. I’d like to be able to set the value as 0 or 1 (mapping to true or false in our database). I also need to properly configure the status message. Start by adding the following to &lt;code&gt;OrdersListener::beforeHandle()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;if ($event-&amp;gt;subject-&amp;gt;action === &#39;setShipped&#39;) {
    $this-&amp;gt;beforeHandleSetShipped($event);

    return;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the &lt;code&gt;OrdersListener::beforeHandleSetShipped()&lt;/code&gt; method is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Before Handle SetShipped Action
 *
 * @param \Cake\Event\Event $event Event
 * @return void
 */
public function beforeHandleSetShipped(Event $event)
{
    $value = (int)$this-&amp;gt;_request()-&amp;gt;query(&#39;shipped&#39;);
    if ($value !== 0 &amp;amp;&amp;amp; $value !== 1) {
        throw new BadRequestException(&#39;Invalid ship status specified&#39;);
    }

    $verb = &#39;shipped&#39;;
    if ($value === 0) {
        $verb = &#39;unshipped&#39;;
    }

    $this-&amp;gt;_action()-&amp;gt;config(&#39;value&#39;, $value);
    $this-&amp;gt;_action()-&amp;gt;config(&#39;messages.success.text&#39;, sprintf(&#39;Marked orders as %s!&#39;, $verb));
    $this-&amp;gt;_action()-&amp;gt;config(&#39;messages.error.text&#39;, sprintf(&#39;Could not mark orders as %s!&#39;, $verb));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lastly, we need to actually link to the bulk actions. You can configure this by adding the next 4 lines to your &lt;code&gt;OrdersListener::beforeHandleIndex()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;_action()-&amp;gt;config(&#39;scaffold.bulk_actions&#39;, [
    Router::url([&#39;action&#39; =&amp;gt; &#39;setShipped&#39;, &#39;shipped&#39; =&amp;gt; &#39;1&#39;]) =&amp;gt; __(&#39;Mark as shipped&#39;),
    Router::url([&#39;action&#39; =&amp;gt; &#39;setShipped&#39;, &#39;shipped&#39; =&amp;gt; &#39;0&#39;]) =&amp;gt; __(&#39;Mark as unshipped&#39;),
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/12/22/dashboard-bulk.png&quot; alt=&quot;bulk dashboard confessional&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And we’re done!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add plugins/PhotoPostType/src/Controller/OrdersController.php plugins/PhotoPostType/src/Listener/OrdersListener.php
git commit -m &quot;Add bulk actions for modifying shipping status&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;For those that may just want to ensure their codebase matches what has been done so far, the codebase is available on GitHub and tagged as &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016/tree/0.0.22&quot;&gt;0.0.22&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We’re nearing the finish line. The only major items include notifying the primary user when a new order has come in, as well as notifying users when their items have been shipped. We could certainly add a contact form or about page to the frontend as well, though those can be homework exercises for you :)&lt;/p&gt;

&lt;p&gt;Be sure to follow along via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2016 CakeAdvent Calendar. Come back tomorrow for more delicious content.&lt;/p&gt;
</description>
        <pubDate>Thu, 22 Dec 2016 08:53:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/12/22/handling-photo-orders/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/12/22/handling-photo-orders/</guid>
        
        <category>crud-view</category>
        
        <category>cakeadvent-2016</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Selling Photos</title>
        <description>&lt;p&gt;A friend of mine asked for a custom website, so here I am, writing a custom cms. I know, there are plenty of systems out there that would handle his needs, but it’s also a good excuse to play around with CakePHP 3, so here we are.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the lazy, the codebase we’ll be working on will be available on &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016&quot;&gt;GitHub&lt;/a&gt;. I will be pushing each set of changes on the date when each blog post in this series is published. No cheating!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;errata-from-previous-post&quot;&gt;Errata from previous post&lt;/h2&gt;

&lt;p&gt;There is a missing commit which removed the &lt;code&gt;-&amp;gt;layout(false)&lt;/code&gt; call in our &lt;code&gt;UserMailer&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;Thanks to those who’ve pointed out my derp. These fixes are available as the first commit in the current release.&lt;/p&gt;

&lt;h2 id=&quot;allowing-paid-photos&quot;&gt;Allowing Paid Photos&lt;/h2&gt;

&lt;p&gt;Rather than making a whole new post type, we’re going to repurpose the existing Photo Post Type. First, lets add a &lt;code&gt;price&lt;/code&gt; field to our &lt;code&gt;PhotoPostType::_buildSchema()&lt;/code&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$schema-&amp;gt;addField(&#39;price&#39;, [&#39;type&#39; =&amp;gt; &#39;text&#39;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also want to validate that any prices are positive numbers (we’re only allowing whole dollar amounts). I added the following to my &lt;code&gt;PhotoPostType::_buildValidator()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$validator-&amp;gt;allowEmpty(&#39;price&#39;);
$validator-&amp;gt;add(&#39;price&#39;, &#39;numeric&#39;, [
    &#39;rule&#39; =&amp;gt; [&#39;naturalNumber&#39;, true]
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Simple enough. We can now add pricing to our photos :)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add plugins/PhotoPostType/src/PostType/PhotoPostType.php
git commit -m &quot;Enable photo pricing&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;displaying-checkout-buttons-via-stripe&quot;&gt;Displaying Checkout Buttons via Stripe&lt;/h2&gt;

&lt;p&gt;We’ll be using Stripe to process payments. Install it via composer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;composer require stripe/stripe-php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to simplify our integration, we’ll be using their &lt;code&gt;checkout&lt;/code&gt; product. I created the element &lt;code&gt;src/Template/Element/stripe.ctp&lt;/code&gt; in order to contain the client-side portion of the integration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
if (empty($post-&amp;gt;get(&#39;price&#39;))) {
    return;
}
?&amp;gt;

&amp;lt;div style=&quot;text-align:center;&quot;&amp;gt;
    &amp;lt;?= $this-&amp;gt;Form-&amp;gt;create(null, [&#39;class&#39; =&amp;gt; &#39;payment-form&#39;, &#39;url&#39; =&amp;gt; [&#39;plugin&#39; =&amp;gt; &#39;PhotoPostType&#39;, &#39;controller&#39; =&amp;gt; &#39;Orders&#39;, &#39;action&#39; =&amp;gt; &#39;order&#39;, &#39;id&#39; =&amp;gt; $post-&amp;gt;get(&#39;id&#39;)]]); ?&amp;gt;
        &amp;lt;script
            src=&quot;https://checkout.stripe.com/checkout.js&quot; class=&quot;stripe-button&quot;
            data-key=&quot;&amp;lt;?= \Cake\Core\Configure::read(&#39;Stripe.publishablekey&#39;) ?&amp;gt;&quot;
            data-amount=&quot;&amp;lt;?= $post-&amp;gt;getPriceInCents() ?&amp;gt;&quot;
            data-name=&quot;&amp;lt;?= \Cake\Core\Configure::read(&#39;App.name&#39;) ?&amp;gt;&quot;
            data-description=&quot;&amp;lt;?= $post-&amp;gt;get(&#39;title&#39;) ?&amp;gt;&quot;
            data-image=&quot;https://stripe.com/img/documentation/checkout/marketplace.png&quot;
            data-locale=&quot;auto&quot;
            data-zip-code=&quot;true&quot;
            data-billing-address=&quot;true&quot;
            data-shipping-address=&quot;true&quot;
            data-label=&quot;Buy this photo&quot;&amp;gt;
          &amp;lt;/script&amp;gt;
    &amp;lt;?= $this-&amp;gt;Form-&amp;gt;end(); ?&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above form uses the converted &lt;code&gt;PostType&lt;/code&gt; object to configure the button. We’ll need two new environment variables though, which you can retrieve from your stripe dashboard:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;export STRIPE_PUBLISHABLEKEY=pk_test_1234
export STRIPE_SECRETKEY=sk_test_abcd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can include this element in your &lt;code&gt;photo-view.ctp&lt;/code&gt; files like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?= $this-&amp;gt;element(&#39;stripe&#39;, [&#39;post&#39; =&amp;gt; $post]); ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One tricky thing about stripe is that the amount it accepts is a number in cents, not whole dollars, so we need to add the following to our &lt;code&gt;PhotoPostType&lt;/code&gt; class to make the conversion:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function getPriceInCents()
{
    $price = $this-&amp;gt;get(&#39;price&#39;);
    if (empty($price)) {
        return 0;
    }

    return $price * 100;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This takes care of most of the user-facing integration, so we’ll save our work for now:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add composer.json composer.lock config/.env.default plugins/DefaultTheme/src/Template/Element/post_type/photo-view.ctp plugins/PhotoPostType/src/PostType/PhotoPostType.php plugins/PhotoPostType/src/Template/Element/post_type/photo-view.ctp src/Template/Element/stripe.ctp
git commit -m &quot;Implement user-facing portion of stripe integration&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;processing-payments&quot;&gt;Processing Payments&lt;/h2&gt;

&lt;p&gt;We’ll be storing order information in a new table. This is the migration I generated:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake bake migration --plugin PhotoPostType create_orders charge_id email shipping_name shipping_address_line_1 shipping_address_zip shipping_address_state shipping_address_city shipping_address_country shipped:boolean created modified
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I had to modify the default for &lt;code&gt;shipped&lt;/code&gt; to be &lt;code&gt;false&lt;/code&gt; in the generated migration file. We can now run it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake migrations migrate --plugin PhotoPostType
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since I want composer to run this automatically when the application is “compiled”, I added the following to &lt;code&gt;scripts.compile&lt;/code&gt; in my &lt;code&gt;composer.json&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;&quot;bin/cake migrations migrate -p PhotoPostType&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can generate tables for this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake bake model Orders --plugin PhotoPostType
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On the server-side, we’ll need an &lt;code&gt;OrdersController::order()&lt;/code&gt; action to handle the actual payments. Here is the initial scaffolding for that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace PhotoPostType\Controller;

use Cake\Core\Configure;
use PhotoPostType\Controller\AppController;
use Stripe\Error\Card as CardError;
use Stripe\Charge;
use Stripe\Customer;
use Stripe\Stripe;

class OrdersController extends AppController
{
    /**
     * Initialization hook method.
     *
     * Use this method to add common initialization code like loading components.
     *
     * e.g. `$this-&amp;gt;loadComponent(&#39;Security&#39;);`
     *
     * @return void
     */
    public function initialize()
    {
        parent::initialize();
        $this-&amp;gt;Auth-&amp;gt;allow(&#39;order&#39;);
    }

    /**
     * Order action
     *
     * @return void
     */
    public function order()
    {
        $this-&amp;gt;loadModel(&#39;Posts&#39;);
        $post = $this-&amp;gt;Posts-&amp;gt;find()
                           -&amp;gt;where([&#39;id&#39; =&amp;gt; $this-&amp;gt;request-&amp;gt;query(&#39;id&#39;)])
                           -&amp;gt;contain(&#39;PostAttributes&#39;)
                           -&amp;gt;first()
                           -&amp;gt;getPostType();

        $charge = $this-&amp;gt;chargeCard($post-&amp;gt;getPriceInCents());
        if (empty($charge)) {
            $this-&amp;gt;Flash-&amp;gt;error(__(&#39;Your card was declined&#39;));
            return $this-&amp;gt;redirect($this-&amp;gt;referer(&#39;/&#39;, true));
        }

        $this-&amp;gt;createOrder($charge);
        $this-&amp;gt;Flash-&amp;gt;success(__(&#39;Order placed! Check your email for more details :)&#39;));
        return $this-&amp;gt;redirect($this-&amp;gt;referer(&#39;/&#39;, true));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A few notes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I’m allowing the &lt;code&gt;order&lt;/code&gt; action. This is necessary as we have default denied requests to all actions in our &lt;code&gt;AppController&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;We need to retrieve the post being requested as a post-type, hence the find at the beginning.&lt;/li&gt;
  &lt;li&gt;There isn’t too much error handling, but you can expand this to suit your needs.&lt;/li&gt;
  &lt;li&gt;This should be refactored as a custom Form class, but it’s here because I am lazy.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is the contents of my &lt;code&gt;OrdersController::chargeCard()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Order action
 *
 * @return null|\Stripe\Charge
 */
protected function chargeCard($amount)
{
    Stripe::setApiKey(Configure::read(&#39;Stripe.secretkey&#39;));
    try {
        $customer = Customer::create(array(
            &#39;email&#39; =&amp;gt; $this-&amp;gt;request-&amp;gt;data(&#39;stripeEmail&#39;),
            &#39;card&#39;  =&amp;gt; $this-&amp;gt;request-&amp;gt;data(&#39;stripeToken&#39;)
        ));
        return Charge::create(array(
            &#39;customer&#39; =&amp;gt; $customer-&amp;gt;id,
            &#39;amount&#39;   =&amp;gt; $amount,
            &#39;currency&#39; =&amp;gt; &#39;usd&#39;
        ));
    } catch (CardError $e) {
        $this-&amp;gt;log($e);
        return null;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty straightforward. We need to create a customer in stripe and then charge the card. If we get any card authentication errors, we log it for inspection and don’t return the charge. My &lt;code&gt;OrdersController::createOrder()&lt;/code&gt; method is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Order action
 *
 * @return null|\Stripe\Charge
 */
protected function createOrder($charge)
{
    $data = [
        &#39;chargeid&#39; =&amp;gt; $charge-&amp;gt;id,
        &#39;email&#39; =&amp;gt; $this-&amp;gt;request-&amp;gt;data(&#39;stripeEmail&#39;),
        &#39;shipping_name&#39; =&amp;gt; $this-&amp;gt;request-&amp;gt;data(&#39;stripeShippingName&#39;),
        &#39;shipping_address_line_1&#39; =&amp;gt; $this-&amp;gt;request-&amp;gt;data(&#39;stripeShippingAddressLine1&#39;),
        &#39;shipping_address_zip&#39; =&amp;gt; $this-&amp;gt;request-&amp;gt;data(&#39;stripeShippingAddressZip&#39;),
        &#39;shipping_address_state&#39; =&amp;gt; $this-&amp;gt;request-&amp;gt;data(&#39;stripeShippingAddressState&#39;),
        &#39;shipping_address_city&#39; =&amp;gt; $this-&amp;gt;request-&amp;gt;data(&#39;stripeShippingAddressCity&#39;),
        &#39;shipping_address_country&#39; =&amp;gt; $this-&amp;gt;request-&amp;gt;data(&#39;stripeShippingAddressCountry&#39;),
        &#39;shipped&#39; =&amp;gt; false,
    ];

    $order = $this-&amp;gt;Orders-&amp;gt;newEntity($data);
    if (!$this-&amp;gt;Orders-&amp;gt;save($order)) {
        $this-&amp;gt;log($order-&amp;gt;errors());
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’re just taking the charge and the submitted data and saving it as an order.&lt;/p&gt;

&lt;p&gt;Now we need to enable routing for this controller action. I created the &lt;code&gt;plugins/PhotoPostType/config/routes.php&lt;/code&gt; with the following contents:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
use Cake\Core\Configure;
use Cake\Routing\Router;
use Cake\Routing\Route\DashedRoute;

$routeClass = Configure::read(&#39;PhotoPostType.Routes.routeClass&#39;);
$routeClass = $routeClass ?: DashedRoute::class;

$photoPostTypePrefix = Configure::read(&#39;PhotoPostType.Routes.prefix&#39;);
$photoPostTypePrefix = $photoPostTypePrefix ?: &#39;/order&#39;;
$photoPostTypePrefix = &#39;/&#39; . trim($photoPostTypePrefix, &quot;\t\n\r\0\x0B/&quot;);
Router::plugin(&#39;PhotoPostType&#39;, [&#39;path&#39; =&amp;gt; $photoPostTypePrefix], function ($routes) use ($routeClass) {
    $routes-&amp;gt;connect(
        &#39;/&#39;,
        [&#39;controller&#39; =&amp;gt; &#39;Orders&#39;, &#39;action&#39; =&amp;gt; &#39;order&#39;],
        [&#39;id&#39; =&amp;gt; &#39;\d+&#39;, &#39;pass&#39; =&amp;gt; [&#39;id&#39;], &#39;routeClass&#39; =&amp;gt; $routeClass]
    );
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also need to load the routes for this plugin in our &lt;code&gt;config/bootstrap.php&lt;/code&gt;. Replace the line loading the &lt;code&gt;PhotoPostType&lt;/code&gt; plugin with the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;Plugin::load(&#39;PhotoPostType&#39;, [&#39;bootstrap&#39; =&amp;gt; true, &#39;routes&#39; =&amp;gt; true]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lastly, I added a bit of css to &lt;code&gt;plugins/DefaultTheme/webroot/css/style.css&lt;/code&gt; to show off our flash styling.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.message {
    text-align: center;
}
.message.success {
    background-color: lightgreen;
}
.message.error {
    background-color: #D33C44;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can try it out on any user-facing post page. You should get a message like the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/12/21/sold.png&quot; alt=&quot;awh yis&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Commit your changes :)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add composer.json config/bootstrap.php plugins/DefaultTheme/webroot/css/style.css plugins/PhotoPostType/config/Migrations/20161222013607_CreateOrders.php plugins/PhotoPostType/config/routes.php plugins/PhotoPostType/src/Controller/OrdersController.php plugins/PhotoPostType/src/Model/Entity/Order.php plugins/PhotoPostType/src/Model/Table/OrdersTable.php plugins/PhotoPostType/tests/Fixture/OrdersFixture.php plugins/PhotoPostType/tests/TestCase/Model/Table/OrdersTableTest.php
git commit -m &quot;Implement payment processing&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;For those that may just want to ensure their codebase matches what has been done so far, the codebase is available on GitHub and tagged as &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016/tree/0.0.21&quot;&gt;0.0.21&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Our CMS is pretty complete. We’ve got a few odds and ends to tie up - like showing off orders in the admin and notifying users of their order and when it’s shipped - but we’re done for today.&lt;/p&gt;

&lt;p&gt;Be sure to follow along via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2016 CakeAdvent Calendar. Come back tomorrow for more delicious content.&lt;/p&gt;
</description>
        <pubDate>Wed, 21 Dec 2016 17:19:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/12/21/selling-photos/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/12/21/selling-photos/</guid>
        
        <category>payments</category>
        
        <category>stripe</category>
        
        <category>cakeadvent-2016</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Sending Responsive Emails</title>
        <description>&lt;p&gt;A friend of mine asked for a custom website, so here I am, writing a custom cms. I know, there are plenty of systems out there that would handle his needs, but it’s also a good excuse to play around with CakePHP 3, so here we are.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the lazy, the codebase we’ll be working on will be available on &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016&quot;&gt;GitHub&lt;/a&gt;. I will be pushing each set of changes on the date when each blog post in this series is published. No cheating!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;email-previewing&quot;&gt;Email Previewing&lt;/h2&gt;

&lt;p&gt;One thing that has always annoyed me about developing emails within an application is that the preview step is pretty manual. I do agree that all emails should be seen in the actual email clients - all clients render at least slightly differently - but I personally hate the following workflow:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Update email&lt;/li&gt;
  &lt;li&gt;Send test email to client&lt;/li&gt;
  &lt;li&gt;Wait until client has received the email&lt;/li&gt;
  &lt;li&gt;Check email&lt;/li&gt;
  &lt;li&gt;Repeat until done&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s sort of annoying to go through, and not very nice for rapid application development. Fortunately, there is a solution! We’ll use my &lt;a href=&quot;https://github.com/josegonzalez/cakephp-mail-preview&quot;&gt;MailPreview&lt;/a&gt; plugin to shorten the development cycle significantly. Start off my installing it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;composer require josegonzalez/cakephp-mail-preview
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we’ll want to load the plugin (and it’s routes):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake plugin load Josegonzalez/MailPreview --routes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;MailPreview&lt;/code&gt; plugin integrates with the CakePHP &lt;code&gt;Mailer&lt;/code&gt; class, but currently requires a single addition to get previews going. We’ll need to add the following &lt;code&gt;use&lt;/code&gt; statement to &lt;code&gt;UserMailer&lt;/code&gt; class declaration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;use Josegonzalez\MailPreview\Mailer\PreviewTrait;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we’ll need to add the trait usage &lt;em&gt;inside&lt;/em&gt; of the class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;use PreviewTrait;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can create a &lt;code&gt;MailPreview&lt;/code&gt; class for our &lt;code&gt;UserMailer&lt;/code&gt;. Think of the &lt;code&gt;MailPreview&lt;/code&gt; class as a type of fixture, except it provides testing data for emails instead of databases. I’ll create a &lt;code&gt;UserMailPreview&lt;/code&gt; in &lt;code&gt;src/Mailer/Preview/UserMailPreview.php&lt;/code&gt; with the following contents:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App\Mailer\Preview;

use Josegonzalez\MailPreview\Mailer\Preview\MailPreview;

class UserMailPreview extends MailPreview
{
    public function forgotPassword()
    {
        return $this-&amp;gt;getMailer(&#39;User&#39;)
                    -&amp;gt;preview(&#39;forgotPassword&#39;, [
                        &#39;example@example.com&#39;,
                        &#39;some-test-token&#39;
                    ]);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The usage is pretty straightforward. The &lt;code&gt;PreviewTrait&lt;/code&gt; adds a &lt;code&gt;preview()&lt;/code&gt; method to the Mailer, which takes in the name of the email and the arguments to send that email. The return is then used to show what the email looks like on screen.&lt;/p&gt;

&lt;p&gt;In order to display the previews, we’ll need to allow the actions if the controller is the &lt;code&gt;MailPreviewController&lt;/code&gt;. I added the following to my &lt;code&gt;AppController::initialize()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;if ($this-&amp;gt;request-&amp;gt;params[&#39;controller&#39;] == &#39;MailPreview&#39;) {
    $this-&amp;gt;Auth-&amp;gt;allow();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you browse to &lt;code&gt;/mail-preview&lt;/code&gt;, you will see a list of your mailers and the emails they contain. If you click on one, you’ll get a weird routing error. Why? Because we are in a plugin, all urls are scoped to this plugin, and since the urls in question are not mapped, boom goes the email. Fix that by adding &lt;code&gt;&#39;plugin&#39; =&amp;gt; null&lt;/code&gt; to the urls in your &lt;code&gt;forgot_password.ctp&lt;/code&gt; templates, and you should see the following in your browser:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/12/20/email-preview.png&quot; alt=&quot;email preview&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Always be explicit about your urls!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Pretty good, right? Now we can work on our email to our hearts content! We’ll save our progress here.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add composer.json composer.lock config/bootstrap.php src/Controller/AppController.php src/Mailer/UserMailer.php src/Template/Email/html/forgot_password.ctp src/Template/Email/text/forgot_password.ctp src/Mailer/Preview/
git commit -m &quot;Setup email previews&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;displaying-a-responsive-email&quot;&gt;Displaying a Responsive Email&lt;/h2&gt;

&lt;p&gt;I more or less am going to grab the layout template from &lt;a href=&quot;https://github.com/leemunroe/responsive-html-email-template&quot;&gt;leemunroe/responsive-html-email-template&lt;/a&gt; with a few minor tweaks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Replaced the &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; element contents with &lt;code&gt;&amp;lt;?= $this-&amp;gt;fetch(&#39;title&#39;) ?&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Replaced the body with &lt;code&gt;&amp;lt;?= $this-&amp;gt;fetch(&#39;content&#39;) ?&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can modify the email otherwise however you see fit. I placed mine in &lt;code&gt;src/Template/Layout/Email/html/default.ctp&lt;/code&gt;. In order to load this layout, I removed &lt;code&gt;-&amp;gt;layout(false)&lt;/code&gt; from my &lt;code&gt;UserMailer::forgotPassword()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;With a few minor changes, my email now looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/12/20/better-email-preview.png&quot; alt=&quot;better email preview&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ll save my work for now, but here are a few ideas to try:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Setup some sort of email unsubscribe flow.&lt;/li&gt;
  &lt;li&gt;Add images or backgrounds to your emails.&lt;/li&gt;
  &lt;li&gt;Create an &lt;code&gt;EmailHelper&lt;/code&gt; to make adding buttons etc. easier.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Mailer/UserMailer.php src/Template/Email/html/forgot_password.ctp src/Template/Layout/Email/html/default.ctp
git commit -m &quot;Nicer html email layout&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;For those that may just want to ensure their codebase matches what has been done so far, the codebase is available on GitHub and tagged as &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016/tree/0.0.20&quot;&gt;0.0.20&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Looks like I lied about what we were going to work on today, but I wanted to go back and show off a neat development feature I’d been working on. I think the results speak for themselves, and hope it was a worthwhile trip. Tomorrow we’ll &lt;em&gt;actually&lt;/em&gt; work on selling photos.&lt;/p&gt;

&lt;p&gt;Be sure to follow along via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2016 CakeAdvent Calendar. Come back tomorrow for more delicious content.&lt;/p&gt;
</description>
        <pubDate>Tue, 20 Dec 2016 07:02:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/12/20/sending-responsive-emails/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/12/20/sending-responsive-emails/</guid>
        
        <category>emails</category>
        
        <category>email-preview</category>
        
        <category>cakeadvent-2016</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Cosmetic Admin Cleanup</title>
        <description>&lt;p&gt;A friend of mine asked for a custom website, so here I am, writing a custom cms. I know, there are plenty of systems out there that would handle his needs, but it’s also a good excuse to play around with CakePHP 3, so here we are.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the lazy, the codebase we’ll be working on will be available on &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016&quot;&gt;GitHub&lt;/a&gt;. I will be pushing each set of changes on the date when each blog post in this series is published. No cheating!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;errata-from-previous-post&quot;&gt;Errata from previous post&lt;/h2&gt;

&lt;p&gt;The connected routes in &lt;code&gt;config/routes.php&lt;/code&gt; for &lt;code&gt;/forgot-password&lt;/code&gt; and &lt;code&gt;/reset-password&lt;/code&gt; were incorrect and should be as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$routes-&amp;gt;connect(&#39;/forgot-password&#39;, [&#39;controller&#39; =&amp;gt; &#39;Users&#39;, &#39;action&#39; =&amp;gt; &#39;forgotPassword&#39;]);
$routes-&amp;gt;connect(&#39;/reset-password/*&#39;, [&#39;controller&#39; =&amp;gt; &#39;Users&#39;, &#39;action&#39; =&amp;gt; &#39;resetPassword&#39;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks to those who’ve pointed out my derps. These fixes are available as the first commit in the current release.&lt;/p&gt;

&lt;h2 id=&quot;cosmetic-cleanup&quot;&gt;Cosmetic Cleanup&lt;/h2&gt;

&lt;p&gt;There are a few things that currently irk me about the admin panel:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We are duplicating navigation in the header and sidebar&lt;/li&gt;
  &lt;li&gt;The default header link on the top-right when logged out is the &lt;code&gt;logout&lt;/code&gt; link.&lt;/li&gt;
  &lt;li&gt;The login redirect goes to &lt;code&gt;/&lt;/code&gt;, when it should go to the &lt;code&gt;/admin/posts&lt;/code&gt; page. The logout redirect should just go to the logout page.&lt;/li&gt;
  &lt;li&gt;We’re showing a link to the &lt;code&gt;view&lt;/code&gt; action on the &lt;code&gt;/admin/posts&lt;/code&gt; page but we should not.&lt;/li&gt;
  &lt;li&gt;We’re showing a link to the &lt;code&gt;home&lt;/code&gt; action on the &lt;code&gt;/admin/posts/edit&lt;/code&gt; page but we should not.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s fix that.&lt;/p&gt;

&lt;h3 id=&quot;de-duplicating-navigation-links&quot;&gt;De-duplicating Navigation Links&lt;/h3&gt;

&lt;p&gt;We can very easily combine our navigation by modifying the &lt;code&gt;scaffold.utility_navigation&lt;/code&gt; crud config option to include the &lt;code&gt;scaffold.sidebar_navigation&lt;/code&gt; elements. I’m going to refactor this into a helper method in our &lt;code&gt;AppController&lt;/code&gt; class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Retrieves the navigation elements for the page
 *
 * @return array
 */
protected function getUtilityNavigation()
{
    return [
        new \CrudView\Menu\MenuItem(
            &#39;Posts&#39;,
            [&#39;controller&#39; =&amp;gt; &#39;Posts&#39;, &#39;action&#39; =&amp;gt; &#39;index&#39;]
        ),
        new \CrudView\Menu\MenuItem(
            &#39;Profile&#39;,
            [&#39;controller&#39; =&amp;gt; &#39;Users&#39;, &#39;action&#39; =&amp;gt; &#39;edit&#39;]
        ),
        new \CrudView\Menu\MenuItem(
            &#39;Log Out&#39;,
            [&#39;controller&#39; =&amp;gt; &#39;Users&#39;, &#39;action&#39; =&amp;gt; &#39;logout&#39;]
        )
    ];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we can update our &lt;code&gt;AppController::beforeFilter()&lt;/code&gt; to remove the &lt;code&gt;scaffold.sidebar_navigation&lt;/code&gt; and &lt;code&gt;scaffold.tables_blacklist&lt;/code&gt; configuration, replacing it with&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;Crud-&amp;gt;action()-&amp;gt;config(&#39;scaffold.utility_navigation&#39;, $this-&amp;gt;getUtilityNavigation());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will move our navigation to the top, but will also re-enable the default sidebar. Let’s fix that next. For now, commit our changes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Controller/AppController.php
git commit -m &quot;Move sidebar navigation to header&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;disabling-the-sidebar&quot;&gt;Disabling the Sidebar&lt;/h3&gt;

&lt;p&gt;This is pretty simple. We’ve already done this for a few actions in the &lt;code&gt;UsersController&lt;/code&gt;, but we’ll want to do this more globally. Add the following line to your &lt;code&gt;AppController::beforeFilter()&lt;/code&gt;, in the block checking if &lt;code&gt;Crud::isActionMapped()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;Crud-&amp;gt;action()-&amp;gt;config(&#39;scaffold.sidebar_navigation&#39;, false);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now your entire page layout should be taken up by the contents of the view, sans sidebar.&lt;/p&gt;

&lt;p&gt;You can also remove this setting from your &lt;code&gt;UsersListener&lt;/code&gt;, as we are handling it globally now. The following methods will be updated:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;UsersListener::beforeHandleLogin()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;UsersListener::beforeHandleResetPassword()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;UsersListener::beforeHandleForgotPassword()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Time to commit:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Controller/AppController.php src/Listener/UsersListener.php
git commit -m &quot;Disable the sidebar navigation completely&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;switching-header-links-for-logged-out-users&quot;&gt;Switching header links for logged out users&lt;/h3&gt;

&lt;p&gt;We should almost certainly not be showing the “Posts”, “Profile”, and “Log Out” utility navigation links to logged out users. Instead, lets show a link to login and start the forgot password flow to logged out users. I added the following to the beginning of my &lt;code&gt;AppController::getUtilityNavigation()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;if ($this-&amp;gt;Auth-&amp;gt;user(&#39;id&#39;) === null) {
    return [
        new \CrudView\Menu\MenuItem(
            &#39;Forgot Password?&#39;,
            [&#39;controller&#39; =&amp;gt; &#39;Users&#39;, &#39;action&#39; =&amp;gt; &#39;forgotPassword&#39;]
        ),
        new \CrudView\Menu\MenuItem(
            &#39;Login&#39;,
            [&#39;controller&#39; =&amp;gt; &#39;Users&#39;, &#39;action&#39; =&amp;gt; &#39;login&#39;]
        ),
    ];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nothing obtuse here, it’s all pretty straightforward. We’ll commit our changes&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Controller/AppController.php
git commit -m &quot;Show alternative utility navigation to logged out users&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;fixing-the-loginlogout-redirects&quot;&gt;Fixing the login/logout redirects&lt;/h3&gt;

&lt;p&gt;This is just a matter of changing configuration in our &lt;code&gt;AppController::loadAuthComponent()&lt;/code&gt;, and very specifically the &lt;code&gt;loginRedirect&lt;/code&gt; and &lt;code&gt;logoutRedirect&lt;/code&gt; configuration options. Here is the full method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Configures the AuthComponent
 *
 * @return void
 */
protected function loadAuthComponent()
{
    $this-&amp;gt;loadComponent(&#39;Auth&#39;, [
        &#39;authorize&#39; =&amp;gt; [&#39;Controller&#39;],
        &#39;loginAction&#39; =&amp;gt; [
            &#39;plugin&#39; =&amp;gt; null,
            &#39;prefix&#39; =&amp;gt; false,
            &#39;controller&#39; =&amp;gt; &#39;Users&#39;,
            &#39;action&#39; =&amp;gt; &#39;login&#39;
        ],
        &#39;loginRedirect&#39; =&amp;gt; [
            &#39;plugin&#39; =&amp;gt; null,
            &#39;prefix&#39; =&amp;gt; false,
            &#39;controller&#39; =&amp;gt; &#39;Posts&#39;,
            &#39;action&#39; =&amp;gt; &#39;index&#39;,
        ],
        &#39;logoutRedirect&#39; =&amp;gt; [
            &#39;plugin&#39; =&amp;gt; null,
            &#39;prefix&#39; =&amp;gt; false,
            &#39;controller&#39; =&amp;gt; &#39;Users&#39;,
            &#39;action&#39; =&amp;gt; &#39;login&#39;,
        ],
        &#39;authenticate&#39; =&amp;gt; [
            &#39;all&#39; =&amp;gt; [
                &#39;fields&#39; =&amp;gt; [&#39;username&#39; =&amp;gt; &#39;email&#39;, &#39;password&#39; =&amp;gt; &#39;password&#39;],
            ],
            &#39;Form&#39;,
        ]
    ]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You know the drill, save your changes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Controller/AppController.php
git commit -m &quot;Properly redirect users on login/logout&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;removing-the-view-link-from-our-post-action-list&quot;&gt;Removing the &lt;code&gt;view&lt;/code&gt; link from our post action list&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;scaffold.actions_blacklist&lt;/code&gt; Crud config option can be used to remove an action from being linked to. We’ll add the following to our &lt;code&gt;PostsListener::beforeHandleIndex()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;_action()-&amp;gt;config(&#39;scaffold.actions_blacklist&#39;, [
    &#39;view&#39;,
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yay commit!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Listener/PostsListener.php
git commit -m &quot;Disable the view action link&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;removing-the-home-link-from-our-post-action-list&quot;&gt;Removing the &lt;code&gt;home&lt;/code&gt; link from our post action list&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;scaffold.actions_blacklist&lt;/code&gt; Crud config option can be used to remove an action from being linked to. Add the following to our &lt;code&gt;PostsListener::beforeHandleEdit()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Before Handle Edit Action
 *
 * @param \Cake\Event\Event $event Event
 * @return void
 */
public function beforeHandleEdit(Event $event)
{
    $this-&amp;gt;_action()-&amp;gt;config(&#39;scaffold.actions_blacklist&#39;, [
        &#39;home&#39;,
    ]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ll need to add the following to &lt;code&gt;PostsListener::beforeHandle()&lt;/code&gt; in order to trigger this as well:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;if ($this-&amp;gt;_request()-&amp;gt;action === &#39;edit&#39;) {
    $this-&amp;gt;beforeHandleEdit($event);

    return;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Be sure to save your changes&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Listener/PostsListener.php
git commit -m &quot;Disable the home action link&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;For those that may just want to ensure their codebase matches what has been done so far, the codebase is available on GitHub and tagged as &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016/tree/0.0.19&quot;&gt;0.0.19&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Our admin panel is in pretty good shape now - we could certainly try and spruce up the edit page for photo posts, but we’ll leave that for another day. Tomorrow, we’ll try add “sellable” photos to our CMS.&lt;/p&gt;

&lt;p&gt;Be sure to follow along via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2016 CakeAdvent Calendar. Come back tomorrow for more delicious content.&lt;/p&gt;
</description>
        <pubDate>Mon, 19 Dec 2016 11:31:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/12/19/admin-cleanup/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/12/19/admin-cleanup/</guid>
        
        <category>crud-view</category>
        
        <category>cakeadvent-2016</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Queuing up emails</title>
        <description>&lt;p&gt;A friend of mine asked for a custom website, so here I am, writing a custom cms. I know, there are plenty of systems out there that would handle his needs, but it’s also a good excuse to play around with CakePHP 3, so here we are.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the lazy, the codebase we’ll be working on will be available on &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016&quot;&gt;GitHub&lt;/a&gt;. I will be pushing each set of changes on the date when each blog post in this series is published. No cheating!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;emailing-in-the-background&quot;&gt;Emailing in the Background&lt;/h2&gt;

&lt;p&gt;One thing you may notice is that sending the “forgot password” email causes the site to slow down. There are a few things to think about here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Users will get upset if their requests don’t complete “instantly”.&lt;/li&gt;
  &lt;li&gt;Google will actually penalize slower sites in their rankings&lt;/li&gt;
  &lt;li&gt;If you perform more work in a web request, those requests can build up, potentially allowing users to DDoS you.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Overall, it’s pretty jank to send emails in the foreground. We’ll instead queue the messages to be sent in the background using the &lt;a href=&quot;https://github.com/josegonzalez/cakephp-queuesadilla&quot;&gt;&lt;code&gt;josegonzalez/cakephp-queuesadilla&lt;/code&gt;&lt;/a&gt; plugin which is included with the &lt;code&gt;josegonzalez/app&lt;/code&gt; skeleton we are using.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;CakePHP does not yet have an official queueing library, though we hope to have one soon. My hope is that it will be a slightly repackaged Queuesadilla.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;creating-a-job-class&quot;&gt;Creating a Job class&lt;/h3&gt;

&lt;p&gt;We’ll start by creating a generic &lt;code&gt;MailerJob&lt;/code&gt; class in &lt;code&gt;src/Job/MailerJob.php&lt;/code&gt;. Here is the contents of that file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App\Job;

use Cake\Log\LogTrait;
use Cake\Mailer\MailerAwareTrait;
use josegonzalez\Queuesadilla\Job\Base as JobContainer;

class MailerJob
{
    use LogTrait;
    use MailerAwareTrait;

    public function execute(JobContainer $job)
    {
        $mailer = $job-&amp;gt;data(&#39;mailer&#39;);
        $action = $job-&amp;gt;data(&#39;action&#39;);
        $data = $job-&amp;gt;data(&#39;data&#39;, []);

        if (empty($mailer)) {
            $this-&amp;gt;log(&#39;Missing mailer in job config&#39;);
            return;
        }

        if (empty($action)) {
            $this-&amp;gt;log(&#39;Missing action in job config&#39;);
            return;
        }

        $this-&amp;gt;getMailer($mailer)-&amp;gt;send($action, $data);
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Briefly, we’ll go over this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Jobs can be either functions, static methods in classes, or instances with a method that we execute. We are going for the instance methodology.&lt;/li&gt;
  &lt;li&gt;When a job method is executed, we pass in a &lt;code&gt;JobContainer&lt;/code&gt; which has access to the relevant job data.&lt;/li&gt;
  &lt;li&gt;We still use the &lt;code&gt;MailerAwareTrait&lt;/code&gt; so that we can reuse our &lt;code&gt;Mailer&lt;/code&gt; classes.&lt;/li&gt;
  &lt;li&gt;The &lt;code&gt;MailerJob::execute()&lt;/code&gt; method has been made generic so that we might be able to reuse this job for other cases where we’ll send email.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;queuing-the-mailerjob&quot;&gt;Queuing the &lt;code&gt;MailerJob&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;This is relatively simple. We’ll start by removing all &lt;code&gt;MailerAwareTrait&lt;/code&gt; code from our &lt;code&gt;UsersListener&lt;/code&gt;. In particular, remove the following &lt;code&gt;use&lt;/code&gt; statement:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;use Cake\Mailer\MailerAwareTrait;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As well as the following from within the class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;use MailerAwareTrait;

/**
 * Default config for this object.
 *
 * @var array
 */
protected $_defaultConfig = [
    &#39;mailer&#39; =&amp;gt; &#39;User&#39;,
];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, you should add the following &lt;code&gt;use&lt;/code&gt; statement to the top of the class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;use Josegonzalez\CakeQueuesadilla\Queue\Queue;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we’ll update &lt;code&gt;UsersListener::afterForgotPassword()&lt;/code&gt; to actually enqueue the job:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * After Forgot Password
 *
 * @param \Cake\Event\Event $event Event
 * @return void
 */
public function afterForgotPassword(Event $event)
{
    if (!$event-&amp;gt;subject-&amp;gt;success) {
        return;
    }

    $table = TableRegistry::get($this-&amp;gt;_controller()-&amp;gt;modelClass);
    $token = $table-&amp;gt;tokenize($event-&amp;gt;subject-&amp;gt;entity-&amp;gt;id);

    Queue::push([&#39;\App\Job\MailerJob&#39;, &#39;execute&#39;], [
        &#39;action&#39; =&amp;gt; &#39;forgotPassword&#39;,
        &#39;mailer&#39; =&amp;gt; &#39;User&#39;,
        &#39;data&#39; =&amp;gt; [
            &#39;email&#39; =&amp;gt; $event-&amp;gt;subject-&amp;gt;entity-&amp;gt;email,
            &#39;token&#39; =&amp;gt; $token,
        ]
    ]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A few things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Queue::push()&lt;/code&gt; takes two arguments, a callable and data for the job.&lt;/li&gt;
  &lt;li&gt;Our callable should include the fully-namespaced class name and the function being invoked, so &lt;code&gt;[&#39;\App\Job\MailerJob&#39;, &#39;execute&#39;]&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Our &lt;code&gt;MailerJob&lt;/code&gt; requires an &lt;code&gt;action&lt;/code&gt; and a &lt;code&gt;mailer&lt;/code&gt; to be specified, so we pass those in as data, and also send in the user’s email&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, we need to update our &lt;code&gt;UserMailer::forgotPassword()&lt;/code&gt; signature so that we only need the &lt;code&gt;email&lt;/code&gt; and not an entire &lt;code&gt;user&lt;/code&gt; object.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Email sent on password recovery requests
 *
 * @param array $email User email
 * @param string $token Token used for validation
 * @return \Cake\Mailer\Mailer
 */
public function forgotPassword($email, $token)
{
    return $this-&amp;gt;to($email)
        -&amp;gt;subject(&#39;Reset your password&#39;)
        -&amp;gt;template(&#39;forgot_password&#39;)
        -&amp;gt;layout(false)
        -&amp;gt;set([
            &#39;token&#39; =&amp;gt; $token,
        ])
        -&amp;gt;emailFormat(&#39;html&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before testing this, one thing that we’ll need to do is make sure that we have specified a full base url for all environments. CakePHP will normally retrieve this from the current request, but cannot do so in a CLI environment. As such, we’ll need to add the following to &lt;code&gt;line 17&lt;/code&gt; of our &lt;code&gt;config/env.php&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&#39;App.fullbaseurl&#39; =&amp;gt; &#39;App.fullBaseUrl&#39;,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can set the &lt;code&gt;APP_FULLBASEURL&lt;/code&gt; environment variable and have it properly scope all of our urls.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Newer installs of the &lt;code&gt;josegonzalez/app&lt;/code&gt; skeleton will not need the above change to your &lt;code&gt;config/env.php&lt;/code&gt; file.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Lets save our changes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add config/env.php src/Job/MailerJob.php src/Listener/UsersListener.php src/Mailer/UserMailer.php
git commit -m &quot;Send emails via a background job&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;running-jobs&quot;&gt;Running Jobs&lt;/h3&gt;

&lt;p&gt;To run a job, we’ll need to first create the requisite tables. Queusadilla can use a variety of backends, though we are defaulting to the PDO backend for ease of use. Let’s run the migration for that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake migrations migrate --plugin Josegonzalez/CakeQueuesadilla
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can just run the default queue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake queuesadilla
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we’re done!&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;For those that may just want to ensure their codebase matches what has been done so far, the codebase is available on GitHub and tagged as &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016/tree/0.0.18&quot;&gt;0.0.18&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We have no sped up our slowest endpoint by over 9000, which is great because I’m pretty sure the scouter is broken. For our next post, we’ll do a bit more minor cleanup of our admin panels.&lt;/p&gt;

&lt;p&gt;Be sure to follow along via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2016 CakeAdvent Calendar. Come back tomorrow for more delicious content.&lt;/p&gt;
</description>
        <pubDate>Sun, 18 Dec 2016 06:26:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/12/18/queuing-up-emails/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/12/18/queuing-up-emails/</guid>
        
        <category>queuing</category>
        
        <category>cakeadvent-2016</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Routing Blog Posts to custom urls</title>
        <description>&lt;p&gt;A friend of mine asked for a custom website, so here I am, writing a custom cms. I know, there are plenty of systems out there that would handle his needs, but it’s also a good excuse to play around with CakePHP 3, so here we are.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the lazy, the codebase we’ll be working on will be available on &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016&quot;&gt;GitHub&lt;/a&gt;. I will be pushing each set of changes on the date when each blog post in this series is published. No cheating!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;routing-built-in-urls&quot;&gt;Routing built-in urls&lt;/h2&gt;

&lt;p&gt;One thing you may have noticed is that we haven’t really touched our routing files. Up till now, we’ve relied on the default CakePHP routes to handle where our requests are sent. Because we have allowed users to specify arbitrary urls, we’ll need to create custom routes to handle both our existing urls &lt;em&gt;as well as&lt;/em&gt; the custom routes we’ve specified for each post.&lt;/p&gt;

&lt;p&gt;I’ve updated my &lt;code&gt;config/routes.php&lt;/code&gt; to the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
use Cake\Core\Plugin;
use Cake\Routing\RouteBuilder;
use Cake\Routing\Router;
use Cake\Routing\Route\DashedRoute;

Router::defaultRouteClass(DashedRoute::class);

Router::scope(&#39;/&#39;, function (RouteBuilder $routes) {
    $routes-&amp;gt;connect(&#39;/&#39;, [&#39;controller&#39; =&amp;gt; &#39;Posts&#39;, &#39;action&#39; =&amp;gt; &#39;home&#39;]);
    $routes-&amp;gt;connect(&#39;/login&#39;, [&#39;controller&#39; =&amp;gt; &#39;Users&#39;, &#39;action&#39; =&amp;gt; &#39;login&#39;]);
    $routes-&amp;gt;connect(&#39;/logout&#39;, [&#39;controller&#39; =&amp;gt; &#39;Users&#39;, &#39;action&#39; =&amp;gt; &#39;logout&#39;]);
    $routes-&amp;gt;connect(&#39;/forgot-password&#39;, [&#39;controller&#39; =&amp;gt; &#39;Users&#39;, &#39;action&#39; =&amp;gt; &#39;forgot-password&#39;]);
    $routes-&amp;gt;connect(&#39;/reset-password/*&#39;, [&#39;controller&#39; =&amp;gt; &#39;Users&#39;, &#39;action&#39; =&amp;gt; &#39;forgot-password&#39;]);
});

Router::scope(&#39;/admin&#39;, function (RouteBuilder $routes) {
    $routes-&amp;gt;scope(&#39;/posts&#39;, [&#39;controller&#39; =&amp;gt; &#39;Posts&#39;], function (RouteBuilder $routes) {
        $routes-&amp;gt;connect(&#39;/&#39;, [&#39;action&#39; =&amp;gt; &#39;index&#39;]);
        $routes-&amp;gt;fallbacks();
    });
    $routes-&amp;gt;connect(&#39;/profile&#39;, [&#39;controller&#39; =&amp;gt; &#39;Users&#39;, &#39;action&#39; =&amp;gt; &#39;edit&#39;]);
});

Plugin::routes();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A few notes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You can specify a “default route class”. This is used for inflecting urls correctly, and I’m using the CakePHP default of &lt;code&gt;DashedRoute&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;You can specify one or more route “scopes”, which are kinda like route prefixes. Routes specified within a scope have that scope prefixed onto any matching urls.&lt;/li&gt;
  &lt;li&gt;Route scopes can have default values specified, as we do for anything in &lt;code&gt;/admin/posts&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Route scopes can be embedded.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now you can use the new url patterns for any of the existing pages.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add config/routes.php
git commit -m &quot;Specify all hardcoded app routes&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;routing-custom-urls&quot;&gt;Routing Custom Urls&lt;/h2&gt;

&lt;p&gt;This part is a bit more complex. We need to do the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Match a custom &lt;code&gt;/:url&lt;/code&gt; catch-all pattern &lt;em&gt;only&lt;/em&gt; when there is a matching url in the &lt;code&gt;posts&lt;/code&gt; table.&lt;/li&gt;
  &lt;li&gt;Allow access to &lt;code&gt;PostsController::view()&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Ensure the correct variables are set for the &lt;code&gt;PostsController::view()&lt;/code&gt; template layer.&lt;/li&gt;
  &lt;li&gt;Add templates for &lt;code&gt;PostsController::view()&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Set default views for the &lt;code&gt;PostsController::view()&lt;/code&gt; action.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’ll do this piecemeal.&lt;/p&gt;

&lt;h3 id=&quot;custom-route-classes&quot;&gt;Custom Route Classes&lt;/h3&gt;

&lt;p&gt;In order to match our catch-all route, we’ll need a &lt;code&gt;PostRoute&lt;/code&gt;. Lets first connect the route in our &lt;code&gt;config/routes.php&lt;/code&gt; under the &lt;code&gt;/&lt;/code&gt; scope:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$routes-&amp;gt;connect(
    &#39;/:url&#39;,
    [&#39;controller&#39; =&amp;gt; &#39;Posts&#39;, &#39;action&#39; =&amp;gt; &#39;view&#39;],
    [&#39;routeClass&#39; =&amp;gt; &#39;PostRoute&#39;]
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we’ll add the following to our &lt;code&gt;PostRoute&lt;/code&gt; class, located in &lt;code&gt;src/Routing/Route/PostRoute.php&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App\Routing\Route;

use Cake\ORM\TableRegistry;
use Cake\Routing\Route\Route;

class PostRoute extends Route
{
    public function parse($url, $method = &#39;&#39;)
    {
        $params = parent::parse($url, $method);
        if (empty($params)) {
            return false;
        }

        $PostsTable = TableRegistry::get(&#39;Posts&#39;);
        $post = $PostsTable-&amp;gt;find()-&amp;gt;where([&#39;url&#39; =&amp;gt; &#39;/&#39; . $params[&#39;url&#39;]])-&amp;gt;first();
        if (empty($post)) {
            return false;
        }

        $params[&#39;pass&#39;] = [$post-&amp;gt;id];
        return $params;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will perform a lookup for all urls that do not match another route. If the url doesn’t exist in our table, we simply don’t parse that request. If it does, we set the post id as the first passed argument.&lt;/p&gt;

&lt;p&gt;Next, we need to modify our &lt;code&gt;PostsController::initialize()&lt;/code&gt; method to allow access to the &lt;code&gt;PostsController::view()&lt;/code&gt; action:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;Auth-&amp;gt;allow([&#39;home&#39;, &#39;view&#39;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that this is set, we can use the &lt;code&gt;Crud.beforeFind&lt;/code&gt; event to modify the finder to return related post data from the &lt;code&gt;post_attributes&lt;/code&gt; database table. Add the following to your &lt;code&gt;PostsListener::implementedEvents()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&#39;Crud.beforeFind&#39; =&amp;gt; &#39;beforeFind&#39;,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here is the logic for the new &lt;code&gt;PostsListener::beforeFind()&lt;/code&gt; and friends:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Before Find
 *
 * @param \Cake\Event\Event $event Event
 * @return void
 */
public function beforeFind(Event $event)
{
    if ($this-&amp;gt;_request()-&amp;gt;action === &#39;view&#39;) {
        $this-&amp;gt;beforeFindView($event);

        return;
    }
}

/**
 * Before Find View Action
 *
 * @param \Cake\Event\Event $event Event
 * @return void
 */
public function beforeFindView(Event $event)
{
    $event-&amp;gt;subject-&amp;gt;query-&amp;gt;contain([&#39;PostAttributes&#39;]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty straightforward. I also created a &lt;code&gt;src/Template/Posts/view.ctp&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;div class=&quot;posts index large-12 medium-12 columns content&quot;&amp;gt;
    &amp;lt;?php $postType = $post-&amp;gt;getPostType(); ?&amp;gt;
    &amp;lt;?= $this-&amp;gt;element($postType-&amp;gt;viewTemplate(), [&#39;post&#39; =&amp;gt; $postType]); ?&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And one for the &lt;code&gt;DefaultTheme&lt;/code&gt; plugin in &lt;code&gt;plugins/DefaultTheme/src/Template/Posts/view.ctp&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;div class=&quot;wrapper&quot;&amp;gt;
    &amp;lt;ul class=&quot;post-list&quot;&amp;gt;
        &amp;lt;li&amp;gt;
            &amp;lt;?php $postType = $post-&amp;gt;getPostType(); ?&amp;gt;
            &amp;lt;?= $this-&amp;gt;element($postType-&amp;gt;viewTemplate(), [&#39;post&#39; =&amp;gt; $postType]); ?&amp;gt;
        &amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you browse to the homepage of the CMS and click any of the URLs, you should now see content :)&lt;/p&gt;

&lt;p&gt;Let’s stop here for today.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add config/routes.php plugins/DefaultTheme/src/Template/Posts/view.ctp src/Controller/PostsController.php src/Listener/PostsListener.php src/Routing/Route/PostRoute.php src/Template/Posts/view.ctp
git commit -m &quot;Implement custom routing for blog posts&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;For those that may just want to ensure their codebase matches what has been done so far, the codebase is available on GitHub and tagged as &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016/tree/0.0.17&quot;&gt;0.0.17&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Awh yis, our custom application routing layer is complete, and our blog is looking a bit sharper now. We still have a few more features to fill in, but for our next post, we’ll take a look optimizing email sends for password resets.&lt;/p&gt;

&lt;p&gt;Be sure to follow along via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2016 CakeAdvent Calendar. Come back tomorrow for more delicious content.&lt;/p&gt;
</description>
        <pubDate>Sat, 17 Dec 2016 05:21:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/12/17/routing-blog-posts-to-custom-urls/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/12/17/routing-blog-posts-to-custom-urls/</guid>
        
        <category>routing</category>
        
        <category>cakeadvent-2016</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Ensuring Posts properly handle custom urls</title>
        <description>&lt;p&gt;A friend of mine asked for a custom website, so here I am, writing a custom cms. I know, there are plenty of systems out there that would handle his needs, but it’s also a good excuse to play around with CakePHP 3, so here we are.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the lazy, the codebase we’ll be working on will be available on &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016&quot;&gt;GitHub&lt;/a&gt;. I will be pushing each set of changes on the date when each blog post in this series is published. No cheating!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;validating-custom-urls&quot;&gt;Validating custom urls&lt;/h2&gt;

&lt;p&gt;Each one of our posts can be assigned a url. Previously, this could be any non-empty string. Let’s put in some ground rules:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It should be unique in our database.&lt;/li&gt;
  &lt;li&gt;The url will be automatically generated from the &lt;code&gt;title&lt;/code&gt; field if not otherwise specified&lt;/li&gt;
  &lt;li&gt;It should start with a forward slash.&lt;/li&gt;
  &lt;li&gt;It should not end with a forward slash.&lt;/li&gt;
  &lt;li&gt;All special characters should be replaced with dashes.&lt;/li&gt;
  &lt;li&gt;It must be lowercase.&lt;/li&gt;
  &lt;li&gt;It cannot be within a specific set of whitelisted urls.&lt;/li&gt;
  &lt;li&gt;It cannot be prefixed with a specific set of strings.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lets start with the first item:&lt;/p&gt;

&lt;h3 id=&quot;application-rules&quot;&gt;Application Rules&lt;/h3&gt;

&lt;p&gt;Application Rules differ from Validation rules. Validation rules should be stateless - that is, they are not affected by datastore lookups or similar. You can use them to check types or values. Application Rules &lt;em&gt;are&lt;/em&gt; stateful, and are typically used for stuff like “this field must be unique” or “the state change of this field is invalid”. We’re going to use the former and modify our &lt;code&gt;PostsTable::buildRules()&lt;/code&gt; method to be the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Returns a rules checker object that will be used for validating
 * application integrity.
 *
 * @param \Cake\ORM\RulesChecker $rules The rules object to be modified.
 * @return \Cake\ORM\RulesChecker
 */
public function buildRules(RulesChecker $rules)
{
    $rules-&amp;gt;add($rules-&amp;gt;existsIn([&#39;user_id&#39;], &#39;Users&#39;));
    $rules-&amp;gt;add($rules-&amp;gt;isUnique([&#39;url&#39;]));

    return $rules;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’ll commit here:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Model/Table/PostsTable.php
git commit -m &quot;Force the url field to be unique&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;auto-generating-urls&quot;&gt;Auto-generating urls&lt;/h3&gt;

&lt;p&gt;First, we’ll need to allow fields to be “empty” in the form. Remove the following from &lt;code&gt;AbstractPostType::_buildValidator()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$validator-&amp;gt;notEmpty(&#39;url&#39;, &#39;Please fill this field&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, lets generate the url when empty! I’ve added the following class to our use statements at the top of my &lt;code&gt;AbstractPostType&lt;/code&gt; class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;use Cake\Utility\Hash;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Right after we call &lt;code&gt;AbstractPostType::transformData()&lt;/code&gt; inside of &lt;code&gt;AbstractPostType::_execute()&lt;/code&gt;, I call the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$data[&#39;url&#39;] = $this-&amp;gt;ensureUrl($data);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here is the body of &lt;code&gt;AbstractPostType::ensureUrl()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;protected function ensureUrl(array $data)
{
    $url = trim(Hash::get($data, &#39;url&#39;, &#39;&#39;), &#39;/&#39;);
    if (strlen($url) !== 0) {
        return $url;
    }

    return Hash::get($data, &#39;title&#39;, &#39;&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We leave the url alone if the user has specified one, and otherwise return the contents of the &lt;code&gt;title&lt;/code&gt; field.&lt;/p&gt;

&lt;p&gt;Finally, we can strip values from the url by adding a &lt;code&gt;_setUrl()&lt;/code&gt; method to our Post entity. This ensures that it is properly massaged whenever that value is set, without requiring extra work at other layers. I’ve created a &lt;code&gt;UrlSettingTrait&lt;/code&gt; in &lt;code&gt;src/Model/Entity/Traits/UrlSettingTrait.php&lt;/code&gt; that contains the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App\Model\Entity\Traits;

use Cake\Utility\Text;

trait UrlSettingTrait
{
    /**
     * Trims slashes and prepends the url with a slash
     * If the input is invalid - such as an empty string - the url will become null.
     *
     * @param string $url The url that is to be set
     * @return string
     */
    public function _setUrl($url)
    {
        if (strlen($url) === 0) {
            return &#39;&#39;;
        }

        $url = Text::slug($url, [
            &#39;lowercase&#39; =&amp;gt; true,
            &#39;replacement&#39; =&amp;gt; &#39;-&#39;,
        ]);
        $url = &#39;/&#39; . trim($url, &#39;/&#39;);
        if ($url === &#39;/&#39;) {
            $url = null;
        }

        return $url;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You’ll need to &lt;code&gt;use&lt;/code&gt; this class within your &lt;code&gt;Post&lt;/code&gt; entity as well.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;use \App\Model\Entity\Traits\UrlSettingTrait;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’ll save our progress now:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Model/Entity/Post.php src/Model/Entity/Traits/UrlSettingTrait.php src/PostType/AbstractPostType.php
git commit -m &quot;Automatically generate urls from the title field&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;validating-the-url-field&quot;&gt;Validating the &lt;code&gt;url&lt;/code&gt; field&lt;/h3&gt;

&lt;p&gt;We’ll want to ensure we don’t set invalid urls. For instance, shadowing an existing route would potentially break stuff like the admin or similar. In our next post, I’ll cover how to use admin routing for our dashboard, as well as custom routes for all other pages, but just assuming that the following urls are to be whitelisted:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;/about&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;/home&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;/contact&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;/login&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;/logout&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;/forgot-password&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ll add the following to my &lt;code&gt;PostsTable::validationDefault()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$validator-&amp;gt;add(&#39;url&#39;, &#39;notInList&#39;, [
    &#39;rule&#39; =&amp;gt; function ($value, $context) {
        $list = [&#39;/&#39;, &#39;/about&#39;, &#39;/home&#39;, &#39;/contact&#39;, &#39;/login&#39;, &#39;/logout&#39;, &#39;/forgot-password&#39;];
        $list = array_map(&#39;strval&#39;, $list);
        return !in_array((string)$value, $list, true);
    },
    &#39;message&#39; =&amp;gt; &#39;Reserved urls cannot be specified&#39;,
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;We may want to expand this list later, but for now this seems adequate.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We have to use a custom rule here because the built-in CakePHP rules cannot be negated, otherwise we would use `inList.&lt;/p&gt;

&lt;p&gt;Urls must also not be prefixed with any of the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;/admin&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;/reset-password&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;/verify&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’ll use another custom validation rule for this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$validator-&amp;gt;add(&#39;url&#39;, &#39;withoutPrefix&#39;, [
    &#39;rule&#39; =&amp;gt; function ($value, $context) {
        if (preg_match(&quot;/^\/(admin|reset-password|verify)/&quot;, $value)) {
            return false;
        }
        if (preg_match(&quot;/^(admin|reset-password|verify)/&quot;, $value)) {
            return false;
        }
        return true;
    },
    &#39;message&#39; =&amp;gt; &#39;Urls cannot start with &quot;/admin&quot;, &quot;/reset-password&quot;, or &quot;/verify&quot;&#39;,
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’ve used two regex matches because urls can be set with a starting forward slash or not, and the &lt;code&gt;Post&lt;/code&gt; entity setter will ensure they start with one. Allowing both makes it easier for users to reason about what the url will look like, as we’ll handle it correctly on our end.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Validation rules can contain inline functions, which are useful in a pinch but also more difficult to test&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Remember to save your work.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Model/Table/PostsTable.php
git commit -m &quot;Properly validate a submitted url&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;persisting-error-messages&quot;&gt;Persisting error messages&lt;/h3&gt;

&lt;p&gt;One thing you might notice when saving a post is that the validation errors from the &lt;code&gt;PostsTable&lt;/code&gt; are not shown. This is because we are overwriting the template’s entity in our &lt;code&gt;PostsListener::_setPostType()&lt;/code&gt; method. I’ve added the following right before I update the template entity in that method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$postType-&amp;gt;mergeErrors($event-&amp;gt;subject-&amp;gt;entity-&amp;gt;errors());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here is the code for &lt;code&gt;AbstractPostType::mergeErrors()&lt;/code&gt;. We want to ensure any existing errors from other places are properly persisted, so we need to merge our post errors &lt;em&gt;onto&lt;/em&gt; the post type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function mergeErrors(array $errors)
{
    foreach ($errors as $field =&amp;gt; $err) {
        if (!isset($this-&amp;gt;_errors[$field])) {
            $this-&amp;gt;_errors[$field] = $err;
            continue;
        }
        foreach ($err as $name =&amp;gt; $message) {
            $this-&amp;gt;_errors[$field][$name] = $message;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;This code is not unit tested, and error handling is a place where you may want to dive into unit testing to ensure you get it right. We may end up revisiting this implementation at a later date.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you try out the form now, you’ll see that we now have all the errors from our Post instance validation. I’ll save my work for now:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Listener/PostsListener.php src/PostType/AbstractPostType.php
git commit -m &quot;Persist validation errors when saving forms&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;For those that may just want to ensure their codebase matches what has been done so far, the codebase is available on GitHub and tagged as &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016/tree/0.0.16&quot;&gt;0.0.16&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We have now placed some mitigations in place for ensuring our users do not set invalid urls. We can now look into the routing layer portion of this, which will make the user-facing portion of our site much more usable.&lt;/p&gt;

&lt;p&gt;Be sure to follow along via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2016 CakeAdvent Calendar. Come back tomorrow for more delicious content.&lt;/p&gt;
</description>
        <pubDate>Fri, 16 Dec 2016 04:16:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/12/16/ensuring-blog-posts-properly-handle-custom-urls/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/12/16/ensuring-blog-posts-properly-handle-custom-urls/</guid>
        
        <category>application-rules</category>
        
        <category>validation</category>
        
        <category>cakeadvent-2016</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
  </channel>
</rss>
