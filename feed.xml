<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jose Diaz-Gonzalez</title>
    <description>Developer, Accidental Ops Guy, and CakePHP Core Developer</description>
    <link>http://josediazgonzalez.com/</link>
    <atom:link href="http://josediazgonzalez.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 26 Jan 2016 06:06:25 +0000</pubDate>
    <lastBuildDate>Tue, 26 Jan 2016 06:06:25 +0000</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Open Source is Hard</title>
        <description>&lt;p&gt;Writing code isn’t very difficult. Usually you write something, it mostly does what it needs to do, and you carry on with your day. If you writing code for work, it might go through some review, or you may just ship it out to whoever your users happen to be. If you are writing code for open source, that’s where it gets tricky.&lt;/p&gt;

&lt;h2 id=&quot;what-is-open-source-software&quot;&gt;What is open source software?&lt;/h2&gt;

&lt;p&gt;I’ll loosely define open source software as any piece of software wherein the author(s) provides a copy of the source code to run a piece of software, as well as a license stating that others are able to use it for any purpose.&lt;/p&gt;

&lt;p&gt;Sometimes that source code might result in a binary - for instance, if you are compiling a game application, or a console executable. In many cases, web developers end up using the source code directly, such as in non-compiled rubygems, or npm packages for nodejs. Backend developers might use compiled versions of software for datastores such as MySQL or Elasticsearch. &lt;em&gt;Usually&lt;/em&gt; there is an easy way to transform the provided source code into a finished product.&lt;/p&gt;

&lt;p&gt;The license might have some limitations - you might not be able to sue me, for instance, or I might require that you release any modifications as open source as well. There are a myriad of licenses, each with caveats or reasons why you might favor it as an individual but be opposed to it as a company.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There are an equal number of explanations as to why a particular license is suitable for your next open-source project, so investigating them is an easy way to waste a weekend. &lt;a href=&quot;https://tldrlegal.com/&quot;&gt;tldrlegal&lt;/a&gt; seems to be a legitimate website that explains commonly used licenses.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;what-is-an-open-source-project&quot;&gt;What is an open source project?&lt;/h2&gt;

&lt;p&gt;An open source project differs in a way from open source software. For instance, I might have the following bit of MIT-Licensed PHP code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
/**
 * The MIT License (MIT)
 * Copyright (c) 2015 Jose Diaz-Gonzalez
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the &quot;Software&quot;),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

echo &quot;lolipop\n&quot;;
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above software, when executed, prints &lt;code&gt;lolipop&lt;/code&gt; with a newline to the screen. You can run it locally under your version of PHP and it will probably work fine. YMMV and all that jazz.&lt;/p&gt;

&lt;p&gt;An open-source &lt;em&gt;project&lt;/em&gt; typically also has the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The above code is in a repository somewhere.&lt;/li&gt;
  &lt;li&gt;There is an issue tracker where users can report bugs.&lt;/li&gt;
  &lt;li&gt;There is documentation concerning the installation and usage of the software.&lt;/li&gt;
  &lt;li&gt;There might be test cases for this software.&lt;/li&gt;
  &lt;li&gt;The project has actual maintainers, instead of authors, who steward the project for it’s “lifetime”.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An open-source project requires more effort on the part of maintainers to ensure that the project is kept up to date, continues to evolve as necessary, and issues are responded to where required.&lt;/p&gt;

&lt;h2 id=&quot;things-a-good-open-source-project-does&quot;&gt;Things a good open-source project does&lt;/h2&gt;

&lt;p&gt;A good open-source project does the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Writes well-written, ever-evolving documentation.&lt;/li&gt;
  &lt;li&gt;Keeps a roadmap for users to understand how and where the project is changing.&lt;/li&gt;
  &lt;li&gt;Responds to issues that are reported by users, and:
    &lt;ul&gt;
      &lt;li&gt;Fixes bugs as they arise.&lt;/li&gt;
      &lt;li&gt;Limits the scope of the project when enhancements are requested.&lt;/li&gt;
      &lt;li&gt;Implements feature requests where possible.&lt;/li&gt;
      &lt;li&gt;Points users the right piece of documentation for their issue.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Provides multiple methods of providing live support. This can be any of the following:
    &lt;ul&gt;
      &lt;li&gt;Forums&lt;/li&gt;
      &lt;li&gt;IRC/Some form of live chat&lt;/li&gt;
      &lt;li&gt;Mailing list&lt;/li&gt;
      &lt;li&gt;Stackoverflow&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Proactively deals with issues that were brought up via social media.&lt;/li&gt;
  &lt;li&gt;Has detailed onboarding information for new members of the core team, and revises them as necessary.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A good open-source project is run like a business, because that is what they are. All the things a company does to survive are things successful open-source do on a daily basis. These things matter because the perception of an open-source project is based upon all of these items, and - other than personal need - that perception is oftentimes the only thing keeping the project alive. No one wants to work on an unused piece of software.&lt;/p&gt;

&lt;h2 id=&quot;how-to-crush-the-soul-of-an-open-source-project-maintainer&quot;&gt;How to crush the soul of an open-source project maintainer&lt;/h2&gt;

&lt;p&gt;I personally have a very large backlog of projects I’d like to work on for a myriad of reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;personal gain&lt;/li&gt;
  &lt;li&gt;beneficial to a specific community&lt;/li&gt;
  &lt;li&gt;requirement for an upcoming work project&lt;/li&gt;
  &lt;li&gt;it is something that I find interesting&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given that, I tend to start projects, work on them until they fit my needs, and then move on. I’ll also attempt to provide usage documentation and a way to reach out to me. And that is when the problems start.&lt;/p&gt;

&lt;p&gt;A user will happen across my project, see that it appears to be well-maintained and easy to use, and start using it. At some point it might not fit their requirements, so they file an issue with bugs or enhancement requests. Responding isn’t so bad when you have a few small projects, or when you have a large project that has a few users. The issue is magnified when you start having multiple projects with many distinct users who each &lt;em&gt;expect&lt;/em&gt; changes to occur. For free.&lt;/p&gt;

&lt;p&gt;Open-source projects tend to be unfunded.&lt;/p&gt;

&lt;p&gt;People say any of the following things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Don’t offer it for free if you cannot support it.
    &lt;ul&gt;
      &lt;li&gt;I open-source projects so I can get a new set of eyes on something, which is beneficial for both myself and the community that ends up using it.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Ask for donations.
    &lt;ul&gt;
      &lt;li&gt;Developers do not donate money for code as their companies do not normally provide stipends for this.&lt;/li&gt;
      &lt;li&gt;Companies usually only ever “pay” for open-source in order to receive a license that they can use without being sued. When was the last time your company sent a donation to Debian or the Apache folks?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Require payment for support.
    &lt;ul&gt;
      &lt;li&gt;Now you are some greedy douchebag and you will receive hate-mail.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Add more users as co-maintainers.
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;Sometimes&lt;/em&gt; this works, but honestly now you have to manage both an internal community and an external community. Try doing this for a half-dozen projects, it doesn’t scale.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s quite common to see open-source developers quit their communities for a while once they see a barage of issues coming their way with little to no benefit for them.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note that your work &lt;em&gt;may&lt;/em&gt; be generous and allow you to work on OSS during work hours - 20% time anyone?. Mine at least does not complain if I spend a few minutes responding to something on Github. Some people are not so lucky, and might even find that their work wants to keep the IP of your outside projects, even if it wasn’t made on company hardware, etc. YMMV.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;lazygreedy-developers&quot;&gt;Lazy/Greedy Developers&lt;/h3&gt;

&lt;p&gt;A good developer is lazy. They will go online, find some code that mostly does what they need it to do, hack at it until it does the rest, and move on.&lt;/p&gt;

&lt;p&gt;A small percentage of users that have issues will file an issue asking for an enhancement or a bug fix. An even smaller percentage will provide a fix for that issue, or a patch that includes their enhancement. And the odds that the code provided is up to the standards of the project &lt;em&gt;and&lt;/em&gt; is in the scope of the project is pretty-well close to zero.&lt;/p&gt;

&lt;p&gt;Of those that don’t provide a fix, there is a very large number of people that &lt;em&gt;expect&lt;/em&gt; the code to be written for them. Sometimes this is a case where there is a language barrier, but oftentimes developers just assume that what they want will come for free and it will be implemented quickly. Their project is way more important than yours, and they are &lt;a href=&quot;https://github.com/JuliaLang/IJulia.jl/issues/398&quot;&gt;providing you an unpaid service by giving you feedback&lt;/a&gt;. And they are &lt;a href=&quot;https://github.com/plataformatec/devise/issues/3834&quot;&gt;actively hostile&lt;/a&gt; when you &lt;a href=&quot;https://github.com/plataformatec/devise/issues/3832&quot;&gt;attempt to provide answers&lt;/a&gt; to their questions. The number of entitled developers online is outrageous.&lt;/p&gt;

&lt;p&gt;And people continue to be surprised that demand for free labor outstrips supply.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is a common pattern I’ve seen in many organizations, where people don’t complain loudly when things are broken because they expect no movement from people that can help. So they trudge along with semi-broken experiences, because they are under some deadline and in many cases don’t feel like fixing an issue themselves.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;how-do-we-fix-it&quot;&gt;How do we fix it?&lt;/h2&gt;

&lt;p&gt;We don’t. You could try being a bit nicer to your open-source maintainer, perhaps send them a few bucks if they really saved your bacon, but honestly if a project like OpenSSL &lt;a href=&quot;http://arstechnica.com/information-technology/2014/04/tech-giants-chastened-by-heartbleed-finally-agree-to-fund-openssl/&quot;&gt;cannot get more than a couple thousand&lt;/a&gt; in funding a year, it’s highly unlikely that a project maintainer will see any sort of monetary gain from their projects.&lt;/p&gt;

&lt;p&gt;There are ways you can support developers. For instance, I might one day make a whole $10 dollars from &lt;a href=&quot;https://gratipay.com/~josegonzalez/&quot;&gt;Gratipay donations&lt;/a&gt;, which is enough to buy two of the three venti mocha fraps I drink a day. There is also &lt;a href=&quot;https://flattr.com/&quot;&gt;flattr&lt;/a&gt;, but I honestly have no idea how to use it. Definitely some room to improve, here, though if the OpenSSL people can’t get the money they &lt;em&gt;actually&lt;/em&gt; need, I don’t have a snowball’s chance in hell of receiving a meaningful amount of donations to feed my cat.&lt;/p&gt;

&lt;p&gt;The only thing I can think of is, well, going back to charging for software. Having a paid software ecosystem around your projects seems to work nicely for those that can manage it. Certainly possible for some larger open-source projects - &lt;a href=&quot;https://www.elastic.co/&quot;&gt;there&lt;/a&gt; &lt;a href=&quot;https://www.mongodb.org/&quot;&gt;are&lt;/a&gt; &lt;a href=&quot;https://www.sugarcrm.com/&quot;&gt;many&lt;/a&gt; &lt;a href=&quot;https://convox.com/&quot;&gt;startups&lt;/a&gt; &lt;a href=&quot;https://www.docker.com/&quot;&gt;focused&lt;/a&gt; &lt;a href=&quot;https://www.joyent.com/&quot;&gt;around&lt;/a&gt; &lt;a href=&quot;https://about.gitlab.com/&quot;&gt;this&lt;/a&gt; &lt;a href=&quot;https://www.nginx.com/&quot;&gt;model&lt;/a&gt; - though I wonder how easy it would be for the every-day developer to start off.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Providing software support packages could also work, but now you are just consulting. I write open source code because it’s fun, not because I want to do work.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Tue, 26 Jan 2016 12:00:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/01/26/open-source-is-hard/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/01/26/open-source-is-hard/</guid>
        
        <category>rant</category>
        
        
        <category>rant</category>
        
      </item>
    
      <item>
        <title>Implementing Custom Authentication Classes</title>
        <description>&lt;p&gt;As with any application, deployment is always something you need to think about. How does your application work with the existing infrastructure?&lt;/p&gt;

&lt;p&gt;One thing that SeatGeek does is we provide a single sign-on solution to all our applications. This allows developers building backend dashboards to ignore the hassles of needing to write any of the following for their application:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Login/Logout pages&lt;/li&gt;
  &lt;li&gt;Forgot/Reset Password flows&lt;/li&gt;
  &lt;li&gt;Proper password hashing&lt;/li&gt;
  &lt;li&gt;User management (adding/deleting users, admin users, etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When someone at SeatGeek logs into an admin panel, the web server - in our case Nginx - redirects them to a page where they can authenticate against our organization. Once the user authenticates against our organization, the web server sets a few environment parameters with information about that user:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;first/last name&lt;/li&gt;
  &lt;li&gt;email address&lt;/li&gt;
  &lt;li&gt;a user id from the single sign-on service&lt;/li&gt;
  &lt;li&gt;teams that user is attached to&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Over the years, we’ve realized that this is the absolute minimum amount of information necessary to identify a user:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We can now display something sensible in the UI when referring to that logged in user&lt;/li&gt;
  &lt;li&gt;Email notifications can be sent if necessary (though we try to handle this in the UI itself)&lt;/li&gt;
  &lt;li&gt;We can associate actions that need to be audited with a specific user in case we need to figure out who did what&lt;/li&gt;
  &lt;li&gt;We can limit access to certain dashboards or abilities based on what teams a user is associated with&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since this is an open source project, I still want to let people use the built-in CakePHP Auth code. Thus the challenge becomes “How do I integrate our existing Auth service with CakePHP, while still allowing optional Form-based Authentication?”&lt;/p&gt;

&lt;h2 id=&quot;headerauthenticate&quot;&gt;HeaderAuthenticate&lt;/h2&gt;

&lt;p&gt;Let’s start by building a simple &lt;code&gt;Authenticate&lt;/code&gt; class. Why not an &lt;code&gt;Authorize&lt;/code&gt; class?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Authenticate&lt;/code&gt; classes are used by CakePHP to denote whether or not a user is logged into your application&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Authorize&lt;/code&gt; classes are used by CakePHP to see whether an authenticated user has access to a particular controller/action pair.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since I am using information set by the webserver in the headers to identify the user, I will call it &lt;code&gt;HeaderAuthenticate&lt;/code&gt; and have it extend &lt;code&gt;BasicAuthenticate&lt;/code&gt; &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. Here is the class skeleton:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App\Auth;

use Cake\Auth\BasicAuthenticate;
use Cake\Network\Request;

class HeaderAuthenticate extends BasicAuthenticate
{
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because I extend &lt;code&gt;BasicAuthenticate&lt;/code&gt;, the only method I have to implement is &lt;code&gt;getUser(Request $request)&lt;/code&gt;. Why? Because the &lt;code&gt;authenticate&lt;/code&gt; method calls this automatically, and that is the only method custom &lt;code&gt;Authenticate&lt;/code&gt; classes need to implement. The &lt;code&gt;AuthComponent&lt;/code&gt; will automatically call this method when checking requests, so it seemed to me like a good place to start.&lt;/p&gt;

&lt;p&gt;First, I’ll add a &lt;code&gt;$_defaultConfig&lt;/code&gt; class property to override the one from &lt;code&gt;BasicAuthenticate&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    protected $_defaultConfig = [
       &#39;fields&#39; =&amp;gt; [
           &#39;username&#39; =&amp;gt; &#39;username&#39;,
           &#39;password&#39; =&amp;gt; &#39;password&#39;,
           &#39;name&#39; =&amp;gt; &#39;name&#39;,
           &#39;email&#39; =&amp;gt; &#39;email&#39;,
       ],
       &#39;headers&#39; =&amp;gt; [
           &#39;username&#39; =&amp;gt; &#39;AUTH_USERNAME&#39;,
           &#39;name&#39; =&amp;gt; &#39;AUTH_NAME&#39;,
           &#39;email&#39; =&amp;gt; &#39;AUTH_EMAIL&#39;,
       ],
       &#39;userModel&#39; =&amp;gt; &#39;Users&#39;,
       &#39;scope&#39; =&amp;gt; [],
       &#39;finder&#39; =&amp;gt; &#39;all&#39;,
       &#39;contain&#39; =&amp;gt; null,
       &#39;passwordHasher&#39; =&amp;gt; &#39;Default&#39;
    ];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A few things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Most, if not all, CakePHP core classes that can be instantiated use the &lt;a href=&quot;/2015/12/22/using-instance-config-trait-for-object-configuration/&quot;&gt;&lt;code&gt;InstanceConfigTrait&lt;/code&gt;&lt;/a&gt;. This means that we automatically get access to the configured data when setting a &lt;code&gt;$_defaultConfig&lt;/code&gt; property and using the &lt;code&gt;$this-&amp;gt;config()&lt;/code&gt; method. Check out the linked blog post for more information.&lt;/li&gt;
  &lt;li&gt;I set a few new custom fields there. These are fields that I will use in my &lt;code&gt;Authenticate&lt;/code&gt; class to denote what data goes where when saving my user entity.&lt;/li&gt;
  &lt;li&gt;I have a few headers mapped. These headers are used by our single sign-on solution, and mapping them to fields we are using in our entity makes sense to me.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next comes the &lt;code&gt;getUser(Request $request)&lt;/code&gt; method. The basic gist of this class will be to see if the incoming data maps to a specific user. If it does not, then we will create a user and return that data. I’m going to split this logic out into two methods, one of which (&lt;code&gt;_getUser&lt;/code&gt;) will handle creating a user if necessary, and the other (&lt;code&gt;getUser&lt;/code&gt;) will wrap this method to ensure we properly handle responses. Here are the two methods:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;
    /**
     * Authenticate a user using custom headers.
     *
     * If the user does not exist in the database but
     * the correct header was passed, simply create the
     * user using the provided header data
     *
     * @param \Cake\Network\Request $request Request object.
     * @return mixed Either false or an array of user information
     */
    public function getUser(Request $request)
    {
        // The same as doing the following but with less overhead:
        //   $config = $this-&amp;gt;config();
        $config = $this-&amp;gt;_config;

        // Bail out if the username header doesn&#39;t exist
        $username = $request-&amp;gt;header($config[&#39;headers&#39;][&#39;username&#39;]);
        if (empty($username)) {
            return false;
        }

        // Actually get the user mapping to the current request
        $result = $this-&amp;gt;_getUser($request);
        if (empty($result)) {
            return false;
        }

        // *Never* let the password field be set in the session
        $result-&amp;gt;unsetProperty($config[&#39;fields&#39;][&#39;password&#39;]);

        // Return the array of data (entities aren&#39;t stored in the session)
        return $result-&amp;gt;toArray();
    }


    /**
     * Retrieves or creates a user based on header data
     *
     * @param \Cake\Network\Request $request Request object.
     * @return mixed Either false or an array of user information
     */
    protected function _getUser(Request $request)
    {
        // The same as doing the following but with less overhead:
        //   $config = $this-&amp;gt;config();
        $config = $this-&amp;gt;_config;

        // We don&#39;t need to check if this is empty because we assume
        // this method will only be called if there is a value
        $username = $request-&amp;gt;header($config[&#39;headers&#39;][&#39;username&#39;]);

        // This `_query()` method comes from BaseAuthenticate, and more or less
        // just sets up the find query. The `$username` var here will be mapped
        // to `fields.username` from our config.
        $result = $this-&amp;gt;_query($username)-&amp;gt;first();
        if (!empty($result)) {
            return $result;
        }

        // Construct the saved data for the new entity
        // The password field is empty because this user
        // has no password
        $data = [
            $config[&#39;fields&#39;][&#39;username&#39;] =&amp;gt; $username,
            $config[&#39;fields&#39;][&#39;password&#39;] =&amp;gt; &#39;&#39;,
            $config[&#39;fields&#39;][&#39;name&#39;] =&amp;gt; $request-&amp;gt;header($config[&#39;headers&#39;][&#39;name&#39;]),
            $config[&#39;fields&#39;][&#39;email&#39;] =&amp;gt; $request-&amp;gt;header($config[&#39;headers&#39;][&#39;email&#39;]),
        ];

        // Save the new entity, and return the result if possible
        $table = TableRegistry::get($config[&#39;userModel&#39;]);
        $result = $table-&amp;gt;newEntity($data);
        if (!$table-&amp;gt;save($result)) {
            return false;
        }
        return $result;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note that rather than explaining the above in paragraphs, I’ve commented the code inline. I don’t normally do that in actual production code, as to me it makes it apparently that I need to refactor the methods into smaller, more manageable chunks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;loginlogout-actions&quot;&gt;Login/Logout actions&lt;/h2&gt;

&lt;p&gt;Now, how do we setup authentication in our application? I hate writing custom actions for each app, so if possible I use a CrudAction. Let’s do that by installing FriendsOfCake/crud-users:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# install the thing!
composer require friendsofcake/crud-users

# enable the thing!
bin/cake plugin load CrudUsers
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This plugin is under heavy development, but provides two actions I’d rather not write code for, login and logout.&lt;/p&gt;

&lt;p&gt;Next, we can create an extremely simple &lt;code&gt;UsersController&lt;/code&gt; using &lt;code&gt;bake&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake bake controller Users -t Crud
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, lets ensure we configure it properly to handle the new login/logout actions. Add the following to the &lt;code&gt;UsersController&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    public function initialize()
    {
        parent::initialize();
        $this-&amp;gt;Crud-&amp;gt;mapAction(&#39;login&#39;, &#39;CrudUsers.Login&#39;);
        $this-&amp;gt;Crud-&amp;gt;mapAction(&#39;logout&#39;, &#39;CrudUsers.Logout&#39;);
    }

    // Remember to add the proper use statement at
    // the top of the class for this:
    //
    //   use Cake\Event\Event;
    public function beforeFilter(Event $event)
    {
        parent::beforeFilter($event);
        // Allow users to register and logout.
        // You should not add the &quot;login&quot; action to allow list. Doing so would
        // cause problems with normal functioning of AuthComponent.
        $this-&amp;gt;Auth-&amp;gt;allow([&#39;logout&#39;]);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we’ve configured the login/logout actions, we need to configure the rest of our Authentication setup. I had to add the following to my &lt;code&gt;AppController::initialize()&lt;/code&gt; to handle both my custom &lt;code&gt;HeaderAuthenticate&lt;/code&gt; setup and &lt;code&gt;FormAuthenticate&lt;/code&gt; installs.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;loadComponent(&#39;Auth&#39;, [
    &#39;authenticate&#39; =&amp;gt; [
        &#39;Header&#39; =&amp;gt; [
            &#39;fields&#39; =&amp;gt; [
                // this is where my github_id field comes into play
                &#39;username&#39; =&amp;gt; &#39;github_id&#39;,
            ],
        ],
        &#39;Form&#39; =&amp;gt; [
            &#39;fields&#39; =&amp;gt; [
                // we don&#39;t have a username field, and users login with email
                &#39;username&#39; =&amp;gt; &#39;email&#39;,
                &#39;password&#39; =&amp;gt; &#39;password&#39;,
            ]
        ]
    ],
    &#39;authorize&#39; =&amp;gt; [&#39;Controller&#39;],
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also added the following to my &lt;code&gt;AppController::beforeFilter()&lt;/code&gt; to allow access to the &lt;code&gt;PagesController::display&lt;/code&gt; action. You &lt;em&gt;could&lt;/em&gt; move it to that controller, I just prefer adding it here:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;Auth-&amp;gt;allow([&#39;display&#39;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last thing to place in your &lt;code&gt;AppController&lt;/code&gt; is an &lt;code&gt;isAuthorized&lt;/code&gt; method. What is this used for? When you configure the &lt;code&gt;AuthComponent&lt;/code&gt; to use &lt;code&gt;Controller&lt;/code&gt; for the &lt;code&gt;authorize&lt;/code&gt; method, the &lt;code&gt;AuthComponent&lt;/code&gt; asks the &lt;code&gt;Controller::isAuthorized()&lt;/code&gt; method whether a specific &lt;code&gt;$user&lt;/code&gt; has access to the given request. Here is what that method looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Check if the provided user is authorized for the request.
 *
 * @param array|null $user The user to check the authorization of.
 *   If empty the user fetched from storage will be used.
 * @return bool True if $user is authorized, otherwise false
 */
public function isAuthorized($user)
{
    if (!empty($user)) {
        return true;
    }

    // Default deny
    return false;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here are the contents of my &lt;code&gt;src/Template/Users/login.ctp&lt;/code&gt; template file. It is pretty boring.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;div class=&quot;users form&quot;&amp;gt;
    &amp;lt;?= $this-&amp;gt;Flash-&amp;gt;render(&#39;auth&#39;) ?&amp;gt;
    &amp;lt;?= $this-&amp;gt;Form-&amp;gt;create() ?&amp;gt;
        &amp;lt;fieldset&amp;gt;
            &amp;lt;legend&amp;gt;&amp;lt;?= __(&#39;Please enter your username and password&#39;) ?&amp;gt;&amp;lt;/legend&amp;gt;
            &amp;lt;?= $this-&amp;gt;Form-&amp;gt;input(&#39;email&#39;) ?&amp;gt;
            &amp;lt;?= $this-&amp;gt;Form-&amp;gt;input(&#39;password&#39;) ?&amp;gt;
        &amp;lt;/fieldset&amp;gt;
    &amp;lt;?= $this-&amp;gt;Form-&amp;gt;button(__(&#39;Login&#39;)); ?&amp;gt;
    &amp;lt;?= $this-&amp;gt;Form-&amp;gt;end() ?&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’re close!&lt;/p&gt;

&lt;h2 id=&quot;data-model-changes&quot;&gt;Data-model changes&lt;/h2&gt;

&lt;p&gt;When you setup authentication, you need to ensure you are automatically hashing passwords properly. In our case, we’ll need a single new method in our &lt;code&gt;src/Model/Entity/User.php&lt;/code&gt; entity:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    /**
     * Setter for password field.
     * Automatically hashes incoming passwords
     *
     * @param string $password the password to hash
     * @return string
     */
    protected function _setPassword($password)
    {
        return (new \Cake\Auth\DefaultPasswordHasher)-&amp;gt;hash($password);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;I’ve taken the liberty of using the fully-namespaced function instead of a &lt;code&gt;use&lt;/code&gt; statement at the top of the class. This seems to be one of the top things new CakePHP developers don’t understand. CakePHP 3 has fully embraced all the modern PHP stuff, which includes namespaces. Read this &lt;a href=&quot;https://secure.php.net/manual/en/language.namespaces.faq.php&quot;&gt;PHP.net FAQ&lt;/a&gt; on them when you get a chance.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In CakePHP 3, the &lt;code&gt;_set*&lt;/code&gt; and &lt;code&gt;_get*&lt;/code&gt; methods are used for setting data on entities, and ensuring they go in/out in the right formats. In our case, whenever we set a new password, we need to ensure it’s been hashed properly. Note that when you populate data into an entity, you can turn off the use of the setter methods with the &lt;code&gt;useSetters&lt;/code&gt; option. This is turned off when hydrating entities from the database.&lt;/p&gt;

&lt;p&gt;One thing I need to do is allow my &lt;code&gt;github_id&lt;/code&gt; to be null. Users authenticating with an email/password will otherwise be unable to access my application. Boo. Here is how I generated the initial migration file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake bake migration allow_nullable_github_ids_on_users
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here is what I shoved into the file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
use Migrations\AbstractMigration;

class AllowNullableGithubIdOnUsers extends AbstractMigration
{
    public function change()
    {
        $table = $this-&amp;gt;table(&#39;users&#39;);
        $table-&amp;gt;changeColumn(&#39;github_id&#39;, &#39;integer&#39;, [
            &#39;default&#39; =&amp;gt; null,
            &#39;limit&#39; =&amp;gt; 11,
            &#39;null&#39; =&amp;gt; true,
        ]);
        $table-&amp;gt;update();
    }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One other thing I noticed when testing was that the &lt;code&gt;github_id&lt;/code&gt; field added a specific rule to my &lt;code&gt;UsersTable&lt;/code&gt;, wherein it expects the &lt;code&gt;UsersTable&lt;/code&gt; to be related to a &lt;code&gt;GithubsTable&lt;/code&gt;. I don’t have that, so I needed to remove both the relation in my &lt;code&gt;UsersTable::initialize()&lt;/code&gt; and the associated rule in &lt;code&gt;UsersTable::buildRules()&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;testing-it-out&quot;&gt;Testing it out&lt;/h2&gt;

&lt;p&gt;Well now that everything is set, if you deploy the app to the SeatGeek infrastructure, you can login and see the backend pages!&lt;/p&gt;

&lt;p&gt;That doesn’t help anyone else though. We never created a user, nor do we have a method of registration. My next post will cover creating a test user from the command-line, cleaning up our views a bit, and the first part of asset uploading.&lt;/p&gt;

&lt;p&gt;Until then, you can see the results of today’s work at &lt;a href=&quot;https://github.com/josegonzalez/media-manager/commit/5b605243dbff7f272cdc2940bdab4f5f023c4b32&quot;&gt;this github url&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;The &lt;code&gt;BasicAuthenticate&lt;/code&gt; core Authenticate class handles authenticate based on Basic Auth, so I figured a lot of the plumbing would be similar. If it’s not, we can always switch it up. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 10 Jan 2016 12:00:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/01/10/implementing-custom-authentication-classes/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/01/10/implementing-custom-authentication-classes/</guid>
        
        <category>cakephp</category>
        
        <category>scaffold</category>
        
        <category>authentication</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Initial Application Scaffolding</title>
        <description>&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;/h2&gt;

&lt;p&gt;Before you continue, you’ll want the following stuff on your computer:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PHP 5.4+. I’m using 5.6 locally, though 7.x should also work fine. Most, if not all, libraries and plugins I am using will work through any supported CakePHP version. I’ll let you know if that’s ever not the case.&lt;/li&gt;
  &lt;li&gt;The following PHP extensions:
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;ext-intl&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;ext-mbstring&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;ext-pdo_sqlite&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;ext-pdo_mysql&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;ext-pdo_pgsql&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;A database! I’m running Postgres locally, but anything supported by the CakePHP Core ORM should do fine. If you use MySQL, I won’t attack you.&lt;/li&gt;
  &lt;li&gt;A browser. I use Chrome, though any modern browser should work fine with the Javascript I’ll be writing.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://getcomposer.org/download/&quot;&gt;Composer&lt;/a&gt; installed locally. How you get that is up to you.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can start once you have the above.&lt;/p&gt;

&lt;h2 id=&quot;pre-planning&quot;&gt;Pre-planning&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Start out with a goal for the day before you start work. My goal is to scaffold out a small part of my app. I won’t have authentication or &lt;a href=&quot;/2015/12/05/uploading-files-and-images/&quot;&gt;file uploading&lt;/a&gt;. I just want a solid database design and some crud-like templating.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before I begin, I want to outline what my application will probably look like from a datastore perspective:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ditaa/ditaa-a033ba0ffbd3e106e1965c0d39c2a034.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The above graph was generated with &lt;a href=&quot;http://ditaa.sourceforge.net/&quot;&gt;ditaa&lt;/a&gt; and some simple ascii art.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’ve separated the notion of an &lt;code&gt;Asset&lt;/code&gt; from a &lt;code&gt;File&lt;/code&gt;. &lt;code&gt;Assets&lt;/code&gt; are the things that my users will click on in the admin dashboard, and contain metadata that will be useful to search. Each asset can have one or more &lt;code&gt;Files&lt;/code&gt; associated with it, has and belongs to many &lt;code&gt;Tags&lt;/code&gt;, is associated with a single &lt;code&gt;Category&lt;/code&gt;, and is owned by a &lt;code&gt;User&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;File&lt;/code&gt; is the actual physical file, which will contain size, the directory on whatever storage device I choose, image metadata, etc. I’m choosing to do this as I &lt;em&gt;think&lt;/em&gt; storing multiple versions of a file as different records will be much easier to reason about in the UI than trying to fiddle with it in code. No real reason other than that.&lt;/p&gt;

&lt;p&gt;Note, I &lt;em&gt;do&lt;/em&gt; have some legacy files I need to import into the new system, but I won’t worry about those for now, since it will presumably complicate my datastructure. I’ll almost certainly write a script to import the files into my database.&lt;/p&gt;

&lt;h2 id=&quot;initializing-our-new-project&quot;&gt;Initializing our new project&lt;/h2&gt;

&lt;p&gt;First, lets use composer to generate a project. I’m going to be basing it off of the &lt;code&gt;0.1.10&lt;/code&gt; release of my [own app skeleton](/2015/12/26/creating-a-generic-cakephp-skeleton/:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;composer create-project --prefer-dist josegonzalez/app:0.1.10 media-manager
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;From now on, assume you will be working inside of the media-manager root folder.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before we begin, we need to at least modify our application to read from the correct database. One thing I’ve done in my new app skeleton is allow configuration via environment variables. Let’s start by copying over the defaults to a new file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;cp config/.env.default config/.env
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;.env&lt;/code&gt; file is loaded if it exists, otherwise the &lt;code&gt;config/env.php&lt;/code&gt; file will fallback to &lt;code&gt;config/.env.default&lt;/code&gt;. We’ll be configuring our app’s private configuration here.&lt;/p&gt;

&lt;p&gt;Two things I’m going to do first:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;change the &lt;code&gt;APP_NAME&lt;/code&gt; export to the value &lt;code&gt;media-manager&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Make sure I have a local datastore setup with the credentials &lt;code&gt;my_app:secret&lt;/code&gt; authed to the database &lt;code&gt;media-manager&lt;/code&gt;. I mentioned I’m using Postgres, but anything should work.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once that is set, I can verify that my application works by running the &lt;a href=&quot;/2015/12/17/cakephp-shells-i-didnt-know-about/&quot;&gt;built-in CakePHP server shell&lt;/a&gt;. Run the following and browse to &lt;code&gt;http://localhost:8765&lt;/code&gt; to verify that you have everything done:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake server
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;I will be using the built-in CakePHP server shell for testing. You can use whatever you’d like, this is just easier for me since I haven’t setup Vagrant or Docker for my app skeleton yet.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;generating-a-database&quot;&gt;Generating a database&lt;/h2&gt;

&lt;p&gt;Whenever I am building an application, I usually have some vague idea of what my database will look like once I am done. I say usually because sometimes I’m coming up with requirements as I go, which is to say that today is one of those days.&lt;/p&gt;

&lt;p&gt;We can generate migration files for our database tables using the &lt;code&gt;bake&lt;/code&gt; and &lt;a href=&quot;/2015/12/10/faster-database-creation-with-migrations/&quot;&gt;&lt;code&gt;migrations&lt;/code&gt;&lt;/a&gt; plugins. I’m allowed to get this wrong because the &lt;code&gt;migrations&lt;/code&gt; plugin allows me to go back and generate new migrations to fixup any incorrect beliefs about how my application should work.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# create my assets table
bin/cake bake migration create_assets category_id:integer:index \
                                      user_id:integer:index name \
                                      file_count \
                                      created \
                                      modified

# create the files table. Note that I
# have included a few useful fields for the upload plugin
bin/cake bake migration create_files asset_id:integer:index \
                                     user_id:integer:index \
                                     name \
                                     dir \
                                     size:integer \
                                     type \
                                     metadata \
                                     created \
                                     modified

# categories is simple
bin/cake bake migration create_categories name:string:index \
                                          slug:string:index \
                                          created \
                                          modified

# tags is also simple, though I do need a join table
# there is probably a plugin out there for this but I&#39;m too lazy
bin/cake bake migration create_assets_tags asset_id:integer:unique:ASSET_TAG \
                                           tag_id:integer:unique:ASSET_TAG
bin/cake bake migration create_tags name:string:index \
                                    slug:string:unique \
                                    color \
                                    created \
                                    modified

# the users table will have an extra field you might not expect
# im going to eventually add github oauth to the app, so I want to track
# the user id if possible
bin/cake bake migration create_users name \
                                     email:string:index \
                                     password \
                                     github_id:integer:index \
                                     created \
                                     modified
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can now run our generated migrations:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake migrations migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will create all of the above tables and two others:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;jobs&lt;/code&gt;: A simple background jobs table that is provided by the &lt;code&gt;josegonzalez/app&lt;/code&gt; application skeleton. We’ll get to this later.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;phinxlog&lt;/code&gt;: Used to keep track of migrations that have been executed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;baking-my-cake-as-fast-as-i-can&quot;&gt;Baking my cake as fast as I can&lt;/h2&gt;

&lt;p&gt;The last step for today is generating some application defaults. We’ll be using the &lt;a href=&quot;/2015/12/03/generating-administrative-panels-with-crud-view/&quot;&gt;CrudView&lt;/a&gt; plugin - and therefore &lt;a href=&quot;https://getbootstrap.com/&quot;&gt;Bootstrap 3&lt;/a&gt; - for the majority of our UI, and will be baking CrudView-compatible templates for things.&lt;/p&gt;

&lt;p&gt;Lets start off by baking all of the tables and entities:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake bake model all
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, lets bake some controllers and views for certain things (but not everything!):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake bake Controller Assets -t Crud
bin/cake bake Controller Categories -t Crud
bin/cake bake Controller Tags -t Crud
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now we’ll turn on CrudView for the entire application. Simply change the &lt;code&gt;$isAdmin&lt;/code&gt; property of &lt;code&gt;src/Controller/AppController.php&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;. This can be done on a per-controller basis, but as we are using CrudView everywhere, it doesn’t hurt to turn it on universally.&lt;/p&gt;

&lt;p&gt;And thats it for now. Why didn’t we bake templates or certain tables:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We need to add auth for users, and thats outside of what I wanted to accomplish today.&lt;/li&gt;
  &lt;li&gt;We don’t need a controller for join tables, nor for managing individual files (yet).&lt;/li&gt;
  &lt;li&gt;Templating is done via the CrudView plugin. If you browse to &lt;code&gt;http://localhost:8765/categories&lt;/code&gt;, you should see a simple crud-interface for categories. Ditto for &lt;code&gt;/assets&lt;/code&gt; and &lt;code&gt;/tags&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h2&gt;

&lt;p&gt;Since tying uploads to specific users and authentication is a bit core to my app, that will be what I tackle in my next post. I’ll also go over that semi-mysterious &lt;code&gt;github_id&lt;/code&gt; in a way that is sure to disappoint anyone who thinks I’m writing any OAuth code :)&lt;/p&gt;

&lt;p&gt;Be sure to follow along via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the Media Manager series. Until next post, meow!&lt;/p&gt;
</description>
        <pubDate>Thu, 31 Dec 2015 12:00:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2015/12/31/initial-application-scaffolding/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2015/12/31/initial-application-scaffolding/</guid>
        
        <category>cakephp</category>
        
        <category>scaffold</category>
        
        <category>migrations</category>
        
        <category>bake</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Creating a CakePHP skeleton</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/2015/12/26/screenshot.png&quot; alt=&quot;File Upload Tool&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ive-got-a-lot-of-problems-with-you-people&quot;&gt;“I’ve got a lot of problems with you people”&lt;/h2&gt;

&lt;p&gt;A while back &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, I &lt;s&gt;stole&lt;/s&gt; built a &lt;a href=&quot;https://devcenter.heroku.com/articles/paperclip-s3&quot;&gt;simple image upload tool&lt;/a&gt; for our &lt;a href=&quot;https://seatgeek.com/sgteam&quot;&gt;marketing team&lt;/a&gt;. The reason I built this was simple; I wanted to stop the marketing team from uploading large file assets to the main repository &lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;, thereby bloating repository size. Plus they get their assets out as soon as they need them, instead of waiting for some silly dev to press the deploy button. It’s worked well enough, but has lately shown it’s age:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Thumbnails are processed in a web request, slowing down large file uploads. We should &lt;em&gt;always&lt;/em&gt; process any files in the background, to avoid slowing down the user’s interaction with the site.&lt;/li&gt;
  &lt;li&gt;Thumbnails are created &lt;em&gt;regardless&lt;/em&gt; of the file type. Uploading a large gif? Yeah that won’t work.&lt;/li&gt;
  &lt;li&gt;Images are uploaded through rails. Since we store assets on S3, we can just as easily upload direct to S3 in javascript.&lt;/li&gt;
  &lt;li&gt;I never built in any categorization, tagging, or user functionality. There isn’t any way for the marketing team to know who uploaded what file, nor for what purpose.&lt;/li&gt;
  &lt;li&gt;A “file” can actually be several different assets. For instance, we frequently resize assets manually - on the client-side at the moment - for use in different media, like ads, email, or on-site ads. Having several different “uploads” made it slightly difficult to see which one someone should use for a specific purpose.&lt;/li&gt;
  &lt;li&gt;It doesn’t have an API, meaning other teams that might want to use it to store information - such as the Android team - can’t easily write an integration like, say, &lt;a href=&quot;https://www.getcloudapp.com/&quot;&gt;CloudApp&lt;/a&gt; &lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; but just for our internal tool.&lt;/li&gt;
  &lt;li&gt;The site is built on an older version of rails &lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;, which I have no desire nor intention to upgrade. We also don’t really have a dedicated Rails developer, so it’s not like I can just toss the app at someone else. We &lt;em&gt;do&lt;/em&gt;, however, have two CakePHP Core developers on staff, so at worst I can just tell &lt;a href=&quot;https://github.com/ad7six&quot;&gt;Andy&lt;/a&gt; it’s his problem now.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;lets-try-and-get-past-this&quot;&gt;Let’s try and get past this&lt;/h2&gt;

&lt;p&gt;So I’m building this new app and decided I needed a good base:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Must have all my favorite plugins - &lt;a href=&quot;/2015/12/02/creating-apis-using-the-crud-plugin/&quot;&gt;Crud&lt;/a&gt;, &lt;a href=&quot;/2015/12/03/generating-administrative-panels-with-crud-view/&quot;&gt;Crud View&lt;/a&gt;, &lt;a href=&quot;/2015/12/05/uploading-files-and-images/&quot;&gt;Upload&lt;/a&gt;, etc. - enabled by default.&lt;/li&gt;
  &lt;li&gt;Should handle &lt;a href=&quot;/2015/12/07/error-handling-in-cakephp-3/&quot;&gt;error tracking&lt;/a&gt; and &lt;a href=&quot;/2015/12/14/custom-logging-engines-and-adding-contextual-data/&quot;&gt;logging&lt;/a&gt; in a sane way.&lt;/li&gt;
  &lt;li&gt;Must be able to handle being &lt;a href=&quot;/2015/12/12/using-dns-to-simplify-connection-strings/&quot;&gt;deployed&lt;/a&gt; to &lt;a href=&quot;/2015/12/18/managing-application-configuration/&quot;&gt;heroku&lt;/a&gt; by default.&lt;/li&gt;
  &lt;li&gt;Needs support for &lt;em&gt;some&lt;/em&gt; method of &lt;a href=&quot;/2015/12/20/creating-custom-background-shells/&quot;&gt;background queueing&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Should be open source &lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thankfully, we can use composer to &lt;a href=&quot;/2015/12/09/customizing-your-app-template/&quot;&gt;customize our application skeleton&lt;/a&gt;. This will enable me to scaffold out my application more more quickly than I would be able to if I used the base &lt;a href=&quot;https://github.com/cakephp/app&quot;&gt;cakephp/app&lt;/a&gt; composer project template.&lt;/p&gt;

&lt;p&gt;Here is my first pass, &lt;a href=&quot;https://github.com/josegonzalez/app&quot;&gt;josegonzalez/app&lt;/a&gt;. It’s based upon the original &lt;a href=&quot;https://github.com/cakephp/app&quot;&gt;cakephp/app&lt;/a&gt; project template, with many of my requirements fulfilled. Ideally everything would be done now, but that won’t ever be the case:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Still need to add a custom &lt;code&gt;config/functions.php&lt;/code&gt; for utility functions I tend to use such as &lt;code&gt;diebug()&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;I don’t &lt;em&gt;yet&lt;/em&gt; have a contextual logger in place. I’m considering switching to monolog and having all logging go to &lt;code&gt;stdout&lt;/code&gt; when using the &lt;a href=&quot;/2015/12/17/cakephp-shells-i-didnt-know-about/&quot;&gt;built-in cake server shell&lt;/a&gt;, but I’m not quite sure yet.&lt;/li&gt;
  &lt;li&gt;I can’t yet &lt;em&gt;seed&lt;/em&gt; an environment in &lt;a href=&quot;/2015/12/18/managing-application-configuration/&quot;&gt;dotenv&lt;/a&gt;, so heroku support isn’t quite complete, but I’m working on it.&lt;/li&gt;
  &lt;li&gt;There are quite a few plugins that would be useful to have - such as &lt;a href=&quot;https://github.com/usemuffin/footprint&quot;&gt;muffin/footprint&lt;/a&gt; - but they aren’t there yet. I’ll add them as I see general use across my application.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Side note: I wrote &lt;em&gt;way&lt;/em&gt; too many blog posts. Do you see the internal linkage up there? Incredible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h2&gt;

&lt;p&gt;Now that I have a firm base for my application, I’ll need to start actually building the thing. I’m hoping there isn’t too much work, but these things tend to take forever, so we’ll see. Since I have a pretty small set of requirements, actually writing the code should be a straightforward process, but hopefully I can do this in a readable, re-usable way.&lt;/p&gt;

&lt;p&gt;Be sure to follow along via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the Media Manager series. Until next post, meow!&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;November 12, 2013 to be precise. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;Our development staff is no better - and in fact worse as they should know better. Pesky devs, if only I had a good alternative for them… &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;By the way, CloudApp is great. Our entire company uses it and I don’t understand why anyone wouldn’t. They even have a free tier, which is great of those times when I totally forget to renew my account… &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;It’s Rails 3.2.13. I can feel the vulnerabilities pulsating through me. &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot;&gt;
      &lt;p&gt;Preferably on my own &lt;a href=&quot;https://github.com/josegonzalez&quot;&gt;github profile&lt;/a&gt;, though I can see this being on our company’s profile as well. &lt;em&gt;shrug&lt;/em&gt; as long as it’s out there. &lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 26 Dec 2015 12:00:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2015/12/26/creating-a-generic-cakephp-skeleton/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2015/12/26/creating-a-generic-cakephp-skeleton/</guid>
        
        <category>cakephp</category>
        
        <category>scaffold</category>
        
        <category>composer</category>
        
        <category>planning</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>SEO Considerations for CakePHP Applications</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;A lovely post that is an adventure across how you can bend CakePHP to your will.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Everyone loves free traffic, right? It allows us to continue building our applications, hopefully making money as we do so. If you aren’t making money, then why are you working on that app?&lt;/p&gt;

&lt;p&gt;In any case, one thing that you should worry about is duplicate website content. If search engines see any such duplicate content - especially en masse - then the value of your web pages decreases in their eyes, potentially dropping your page views. That would be sucks.&lt;/p&gt;

&lt;p&gt;One way to do this would be to automatically check that a url for a given page is the same as that which we expect. We can do this in a few ways, but the simplest is simply to check it manually!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * @param integer $id an id for the current model
 * @return void|Cake\Network\Request
 */
public function view($id)
{
  $post = $this-&amp;gt;Posts-&amp;gt;get($id);
  if ($this-&amp;gt;request-&amp;gt;here != $post-&amp;gt;getCanonicalUrl()) {
    return $this-&amp;gt;redirect($post-&amp;gt;getCanonicalUrl());
  }
  $this-&amp;gt;set(&#39;post&#39;, $post);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not too bad. One thing I like to do is use annotations for stuff, so I wrote an annotation parser for just the above:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function initialize()
{
  $this-&amp;gt;loadComponent(&#39;SeoAnnotation&#39;, [
    // this can be overriden
    &#39;table&#39; =&amp;gt; &#39;Posts&#39;,
    // as can this
    &#39;primaryKey&#39; =&amp;gt; &#39;$id&#39;,
  ]);
}

/**
 * @table Posts
 * @param integer $id an id for the current model
 * @return void|Cake\Network\Request
 */
public function view($id)
{
  $post = $this-&amp;gt;Posts-&amp;gt;get($id);
  $this-&amp;gt;set(&#39;post&#39;, $post);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The annotation parser - using the &lt;a href=&quot;https://github.com/marcioAlmada/annotations&quot;&gt;minime/annotations&lt;/a&gt; package - simply retrieves the entity on the specified table by the specified field and then automatically does the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;protected function getTable()
{
  $annotations = $this-&amp;gt;geAnnotations();
  $tableClass = $annotations-&amp;gt;get(&#39;table&#39;, $this-&amp;gt;config(&#39;table&#39;));
  return TableRegistry::get($tableClass);
}

protected function getPrimaryKey()
{
  $annotations = $this-&amp;gt;geAnnotations();
  $primaryKeyField = $annotations-&amp;gt;get(
    &#39;primaryKey&#39;,
    $this-&amp;gt;config(&#39;primaryKey&#39;)
  );
  // logic to iterate over other @param
  // annotations to get the index of the primaryKey
  // in the current request args
  return $primaryKey;
}

protected function beforeFilter(\Cake\Event\Event $event)
{
  $primaryKey = $this-&amp;gt;getPrimaryKey();
  if (empty($primaryKey)) {
    return;
  }

  $entity = $this-&amp;gt;getTable()-&amp;gt;get($primaryKey);
  if (!method_exists($entity, &#39;getCanonicalUrl&#39;)) {
    throw new \RuntimeException(&#39;Your entity class must implement getCanonicalUrl&#39;);
  }

  if ($this-&amp;gt;request-&amp;gt;here != $entity-&amp;gt;getCanonicalUrl()) {
    return $this-&amp;gt;redirect($entity-&amp;gt;getCanonicalUrl());
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, if the specified field doesn’t exist as an &lt;code&gt;@param&lt;/code&gt; docblock, then my component does nothing. It does require a bit more work on the developer’s end, but as a bonus I also get well-documented code.&lt;/p&gt;

&lt;p&gt;Note, you can always get at a controller in your custom components by doing the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$controller = $this-&amp;gt;_registry-&amp;gt;getController();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Components are “owned” by a &lt;code&gt;Cake\Controller\ComponentRegistry&lt;/code&gt;, which keeps track of both loaded components and the controller upon which they are loaded, amongst other things.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Semi-related, ComponentRegistry, TableRegistry, etc. are all simply &lt;a href=&quot;http://en.wikipedia.org/wiki/Service_locator_pattern&quot;&gt;service locators&lt;/a&gt;, and all use some form of dependency injection on the objects they build. Yes, CakePHP has those things you thought it didn’t, we’re just very good at hiding them from you :P&lt;br /&gt;
If you’d like to use a similar pattern in your applications, you can extend the &lt;code&gt;Cake\Core\ObjectRegistry&lt;/code&gt; class. I personally use this for stuff like custom payment classes, or things where there are multiple implementations and constructing them can be a pita.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Back on topic, once I have an entity, I also like to set the canonical url for a given page. For instance, sometimes my page has querystring values that I’d like search engines to ignore. Maybe they were affiliate parameters, or things that updated filters. In any case, it’s a good idea to set a &lt;code&gt;rel=canonical&lt;/code&gt; meta tag:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;if (method_exists($entity, &#39;getCanonicalUrl&#39;) {
  $this-&amp;gt;_controller-&amp;gt;set(&#39;metaCanonical&#39;, $entity-&amp;gt;getCanonicalUrl());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then in your view:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;// there isn&#39;t a special helper for this,
// so we are just using HtmlHelper::tag()
echo $this-&amp;gt;Html-&amp;gt;tag(&#39;link&#39;, null, [
  &#39;rel&#39; =&amp;gt; &#39;canonical&#39;,
  // get the full url, since we don&#39;t expect `getCanonicalUrl`
  // to return with the domain etc.
  &#39;href&#39; =&amp;gt; \Cake\Routing\Router::url($metaCanonical, true),
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When writing an application, we often want memorable names. &lt;code&gt;/posts/view/34523&lt;/code&gt; is a boring url, but &lt;code&gt;/2015/12/24/seo-considerations-for-cakephp-applications/&lt;/code&gt; tells me a bit more. But how do I do routing off of that?&lt;/p&gt;

&lt;p&gt;One thing that is useful to to &lt;em&gt;still&lt;/em&gt; have the “primarykey” to a record in the url. For instance, you might have the following url:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/34523/seo-considerations-for-cakephp-applications/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That still has an ID I can look for, and also contains some interesting metadata for both the user and a search engine. But how do we generate that slug? Using plugin LIKE A BAWS:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;# install the thing!
composer require muffin/slug

# enable the thing!
bin/cake plugin load Muffin/Slug
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now add the behavior to your table:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App\Model\Table;

use Cake\ORM\Table;

class PostsTable extends Table
{
  public function initialize(array $config)
  {
    // some other crap you think is code goes here
    $this-&amp;gt;displayField(&#39;title&#39;);
    $this-&amp;gt;addBehavior(&#39;Muffin/Slug.Slug&#39;, [
      // options! https://github.com/UseMuffin/Slug#configuration
    ]);
  }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now, as long as you have a &lt;code&gt;slug&lt;/code&gt; field in your &lt;code&gt;posts&lt;/code&gt; table and a &lt;code&gt;title&lt;/code&gt; field as your displayField, you will be set. You can now use the &lt;code&gt;slug&lt;/code&gt; in your &lt;code&gt;getCanonicalUrl&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;But why stop there? You could also build a simple admin tool to let your marketing team update those canonical urls using the &lt;a href=&quot;/2015/12/02/creating-apis-using-the-crud-plugin/&quot;&gt;crud&lt;/a&gt; and &lt;a href=&quot;/2015/12/03/generating-administrative-panels-with-crud-view/&quot;&gt;crud-view&lt;/a&gt; plugin. Trust me, they’ll love you and sing your praises to your bosses, which will be especially nice when you realize you are programming on Christmas day and your boss is like “slow your roll, you did great work this year, go take a nice long vacation and come back to me fresh next year.”&lt;/p&gt;

&lt;p&gt;And that’s all I have. Come back next year - or whenever I decide to write again - and we’ll see if I can muster up more tips and tricks you can use in writing your CakePHP code. Until then, pet your pets and Happy Holidays!&lt;/p&gt;
</description>
        <pubDate>Thu, 24 Dec 2015 12:00:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2015/12/24/seo-considerations-for-cakephp-applications/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2015/12/24/seo-considerations-for-cakephp-applications/</guid>
        
        <category>cakeadvent-2015</category>
        
        <category>cakephp</category>
        
        <category>seo</category>
        
        <category>routing</category>
        
        <category>behaviors</category>
        
        <category>annotations</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Data Validation in CakePHP 3</title>
        <description>&lt;p&gt;As mentioned before, CakePHP 3 introduced the concept of a distinct Validation class that can be used against an arbitrary array of data. You could &lt;em&gt;sort of&lt;/em&gt; do this in CakePHP 2, but it was annoying, not well-exposed, and not well-documented.&lt;/p&gt;

&lt;p&gt;Assuming you got stuck in an older version of CakePHP - or some other non-CakePHP 3 environment - and want to use the new validation layer, you’ll need to install the cakephp/validation package. Skip this if you are using CakePHP 3 in your app already:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;composer require cakephp/validation
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Most CakePHP 3 packages can be installed in a standalone way with minimal external dependencies.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, let’s start by creating a validator:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;# use the class first of course!
use Cake\Validation\Validator;

$validator = new Validator();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is a bit of data I want to validate:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$data = [
  &#39;name&#39; =&amp;gt; &#39;camila&#39;,
  &#39;age&#39; =&amp;gt; 4,
  &#39;intelligence&#39; =&amp;gt; &#39;stupid&#39;,
  &#39;position&#39; =&amp;gt; &#39;keyboard&#39;,
  &#39;species&#39; =&amp;gt; &#39;&#39;,
];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the 3.x validator, you can easily require the presence of a field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$validator-&amp;gt;requirePresence(&#39;species&#39;);

// should be an empty array
$errors = $validator-&amp;gt;errors($data);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that this is different from the field being not empty:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$validator-&amp;gt;notEmpty(&#39;species&#39;, &#39;we need a species for your pet&#39;);

// will not be an empty array
$errors = $validator-&amp;gt;errors($data);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, this is &lt;em&gt;not&lt;/em&gt; the same as being an string with just whitespace. For that, you need another rule:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$validator-&amp;gt;add(&#39;species&#39;, [
  &#39;notBlank&#39; =&amp;gt; [
      &#39;rule&#39; =&amp;gt; &#39;notBlank&#39;,
      &#39;message&#39; =&amp;gt; &quot;Ain&#39;t no such thing as a &#39;   &#39; species&quot;
    ]
]);

// will not be an empty array
$errors = $validator-&amp;gt;errors($data);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also nest validators. Say my &lt;code&gt;$data&lt;/code&gt; array has a field called &lt;code&gt;kittens&lt;/code&gt;, which is an array of &lt;code&gt;kitten&lt;/code&gt; data. You might want to validate some information about those kittens:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;// add custom rules here
$kittenValidator = new Validator();

// Connect the nested validators.
$validator-&amp;gt;addNestedMany(&#39;kittens&#39;, $kittenValidator);

// includes errors from nested data as well
$validator-&amp;gt;errors($data);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some rules - like those surrounding presence of a field - can support multiple modes, &lt;code&gt;create&lt;/code&gt; and &lt;code&gt;update&lt;/code&gt;. This is useful for cases where you might be using the same &lt;code&gt;$validator&lt;/code&gt; against both new and existing recordsets, but want slightly different behavior for one or two rules.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;// only require a name on update
$validator-&amp;gt;notEmpty(
  &#39;name&#39;,
  &#39;Your cat needs a name, you cannot call it cat forever&#39;,
  &#39;update&#39; // the mode
);

// errors works in `create` mode by
// default. Set the second arg to
// `false` to use `update` mode
$errors = $validator-&amp;gt;errors($data, false);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, there are &lt;a href=&quot;http://api.cakephp.org/3.0/class-Cake.Validation.Validation.html&quot;&gt;quite a few rules at your disposal&lt;/a&gt; by default, but you are welcome to create new ones. Maybe your rule validates that a cat is in a breed that exists in a specific database table?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App\Model\Validation;

use Cake\ORM\TableRegistry;
use Cake\Validation\Validation;

class CatValidation extends Validation
{
  public static function validSpecies($check)
  {
    $table = TableRegistry::get(&#39;Species&#39;);
    $species = $table-&amp;gt;find(&#39;list&#39;)-&amp;gt;toArray();
    return in_array((string)$check, array_values($species));
  }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can simply add this new class to your validator:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;// map it
// if a class name, the methods *must* be static
$validator-&amp;gt;provider(&#39;cat&#39;, &#39;App\Model\Validation\CatValidation&#39;);

// use it
$validator-&amp;gt;add(&#39;species&#39;, &#39;validSpecies&#39;, [
    &#39;rule&#39; =&amp;gt; &#39;validSpecies&#39;,
    &#39;provider&#39; =&amp;gt; &#39;cat&#39;
]);
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Wed, 23 Dec 2015 12:00:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2015/12/23/data-validation-in-cakephp-3/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2015/12/23/data-validation-in-cakephp-3/</guid>
        
        <category>cakeadvent-2015</category>
        
        <category>cakephp</category>
        
        <category>validation</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Using InstanceConfigTrait for object configuration</title>
        <description>&lt;p&gt;When writing a new class to handle complex logic, you typically have some amount of configuration you need to set. For instance, lets assume we have a cat class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace Animalia\Chordata\Mammalia\Carnivora\Feliformia\Felidae\Felinae\Felis;

class FelisCatus
{
  public $attributes = [];
  public function __construct(array $attributes = [])
  {
    $this-&amp;gt;attributes = $attributes;
  }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above is a simple - other than that namespace yeesh - cat class, where all attributes are set without regard to what is necessary to define a cat. In our case, we want to ensure each cat at least has a color, gender, name, and size:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace Animalia\Chordata\Mammalia\Carnivora\Feliformia\Felidae\Felinae\Felis;

class FelisCatus
{
  public $attributes = [];
  public function __construct(array $attributes = [])
  {
    $this-&amp;gt;attributes = array_merge([
      &#39;name&#39; =&amp;gt; &#39;Cat&#39;,
      &#39;color&#39; =&amp;gt; &#39;black&#39;,
      &#39;gender&#39; =&amp;gt; &#39;female&#39;,
      &#39;size&#39; =&amp;gt; &#39;small&#39;,
    ], $attributes);
  }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;How do we access the attributes?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$cat = new FelisCatus([&#39;name&#39; =&amp;gt; &#39;Camila&#39;]);
// get the name
echo $cat-&amp;gt;attributes[&#39;name&#39;];

// get the paw size? Undefined index!
echo $cat-&amp;gt;attributes[&#39;paw_size&#39;];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we were doing this in CakePHP, we could take advantage of the &lt;code&gt;InstanceConfigTrait&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace Animalia\Chordata\Mammalia\Carnivora\Feliformia\Felidae\Felinae\Felis;

use Cake\Core\InstanceConfigTrait;

class FelisCatus
{
  use InstanceConfigTrait;
  protected $_defaultConfig = [
    &#39;name&#39; =&amp;gt; &#39;Cat&#39;,
    &#39;color&#39; =&amp;gt; &#39;black&#39;,
    &#39;gender&#39; =&amp;gt; &#39;female&#39;,
    &#39;size&#39; =&amp;gt; &#39;small&#39;,
  ];

  public function __construct(array $attributes = [])
  {
    // will automatically merge the attributes with
    // $this-&amp;gt;_defaultConfig
    $this-&amp;gt;config($attributes);
  }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we get to do the following!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$cat = new FelisCatus([&#39;name&#39; =&amp;gt; &#39;Camila&#39;]);
// get the name
echo $cat-&amp;gt;config(&#39;name&#39;);

// get the paw size? Returns null
echo $cat-&amp;gt;config(&#39;paw_size&#39;);

// set the paw size
$cat-&amp;gt;config(&#39;paw_size&#39;, &#39;small&#39;);

// set nested data
$cat-&amp;gt;config(&#39;appetite.morning&#39;, null);
$cat-&amp;gt;config(&#39;appetite.afternoon&#39;, &#39;hangry&#39;);

// get nested data
echo $cat-&amp;gt;config(&#39;appetite.afternoon&#39;);

// set lots of info at once
$cat-&amp;gt;config([
  &#39;size&#39; =&amp;gt; &#39;large&#39;,
  &#39;pregnant&#39; =&amp;gt; true,
  &#39;owner&#39; =&amp;gt; &#39;Jose&#39;,
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;InstanceConfigTrait&lt;/code&gt; is a useful trait for hiding instance configuration initializing/setting/getting/deleting from the user. You can simply &lt;code&gt;use&lt;/code&gt; it in your class, ensure you initialze any config in your constructor, and then access it through a simple interface.&lt;/p&gt;

&lt;p&gt;CakePHP actually uses this in quite a few places:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cache and Log Engines&lt;/li&gt;
  &lt;li&gt;Authorize and Authenticate classes&lt;/li&gt;
  &lt;li&gt;Password Hashers&lt;/li&gt;
  &lt;li&gt;Helpers, Components, Behaviors&lt;/li&gt;
  &lt;li&gt;Dispatch Filters&lt;/li&gt;
  &lt;li&gt;Mailers&lt;/li&gt;
  &lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So the same interface is available basically everywhere. Its static class analogue is &lt;code&gt;StaticConfigTrait&lt;/code&gt;, which &lt;em&gt;also&lt;/em&gt; parses dsn’s from the &lt;code&gt;url&lt;/code&gt; key, which comes in handy when creating factory-type classes.&lt;/p&gt;
</description>
        <pubDate>Tue, 22 Dec 2015 12:00:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2015/12/22/using-instance-config-trait-for-object-configuration/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2015/12/22/using-instance-config-trait-for-object-configuration/</guid>
        
        <category>cakeadvent-2015</category>
        
        <category>cakephp</category>
        
        <category>configuration</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Tracking Logged in User Actions</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Note: for the purposes of this post, I chose an easy to understand plugin, but I recommend using the &lt;a href=&quot;https://github.com/usemuffin/footprint&quot;&gt;footprint&lt;/a&gt; plugin as it supports many more features than the one I cover here.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is a pretty straightforward post. In CakePHP 3, we’ve removed a lot of the ability to access the session except where there is a &lt;code&gt;Request&lt;/code&gt; object. Static access to &lt;code&gt;CakeSession&lt;/code&gt; is gone, and it’s not coming back, so please stop asking for it. And stop using &lt;code&gt;$_SESSION&lt;/code&gt;, that breaks the cake.&lt;/p&gt;

&lt;p&gt;One thing this affects is the ability to see user session data in the Model layer. Typically you want to track &lt;em&gt;who&lt;/em&gt; performed an action &lt;em&gt;when&lt;/em&gt; the action happens. It’s quite nice to hide this in your model layer, as opposed to mangling data when it’s going into an entity.&lt;/p&gt;

&lt;p&gt;How do we do this? We can use the &lt;a href=&quot;https://github.com/ceeram/blame&quot;&gt;&lt;code&gt;ceeram/blame&lt;/code&gt; plugin&lt;/a&gt;!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# ugh more things to install
composer require ceeram/cakephp-blame

# load it
bin/cake plugin load Ceeram/Blame
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we add the following &lt;code&gt;use&lt;/code&gt; call to the inside of our &lt;code&gt;src/Controller/AppController.php&lt;/code&gt; class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;class AppController extends Controller
{
  use \Ceeram\Blame\Controller\BlameTrait;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally add the behavior to our table:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function initialize(array $config)
{
    $this-&amp;gt;addBehavior(&#39;Ceeram/Blame.Blame&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now whenever a new record is saved, the &lt;code&gt;created_by&lt;/code&gt; field is set to the logged in user’s &lt;code&gt;id&lt;/code&gt;. When records are modified, the &lt;code&gt;modified_by&lt;/code&gt; field will be set.&lt;/p&gt;

&lt;h2 id=&quot;how-does-it-work&quot;&gt;How does it work?&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;BlameTrait&lt;/code&gt; we added to our &lt;code&gt;AppController&lt;/code&gt; actually does all the heavy lifting. It adds a &lt;a href=&quot;https://github.com/ceeram/blame/blob/master/src/Event/LoggedInUserListener.php&quot;&gt;listener&lt;/a&gt; that will add the appropriate data to our Table instances whenever they are saved through the magic of &lt;a href=&quot;https://github.com/ceeram/blame/blob/master/src/Controller/BlameTrait.php#L18&quot;&gt;&lt;code&gt;Controller::loadModel()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It’s actually quite clever, and I’m a bit upset I hadn’t previously thought of it. The same trick probably works in 2.x.&lt;/p&gt;

&lt;p&gt;For users that find this plugin limiting in some way, I definitely recommend reading the code over, extending it, or applying the clever usage of the event system to your own application.&lt;/p&gt;
</description>
        <pubDate>Mon, 21 Dec 2015 12:00:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2015/12/21/tracking-logged-in-user-actions/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2015/12/21/tracking-logged-in-user-actions/</guid>
        
        <category>cakeadvent-2015</category>
        
        <category>cakephp</category>
        
        <category>auth</category>
        
        <category>user-tracking</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Creating Custom Background Shells</title>
        <description>&lt;p&gt;In a previous post, I mentioned how awesome it would be to have a background queueing system to perform long-running tasks. While there are many queueing systems, today I will re-introduce Queuesadilla, with an aim to explain how CakePHP shells work.&lt;/p&gt;

&lt;h2 id=&quot;shell-skeleton&quot;&gt;Shell Skeleton&lt;/h2&gt;

&lt;p&gt;Before we being, lets start with understanding what we need:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Queuesadilla is a long-running task. It handles it’s own state, so if it crashes, all we really care about is ensuring whatever process manager we are using will restart it. Given that, we don’t need much error handling.&lt;/li&gt;
  &lt;li&gt;We should be able to configure most of the options in Queuesadilla. We might not use them today, but they will come in handy later.&lt;/li&gt;
  &lt;li&gt;Logging should be done using the CakePHP logger.&lt;/li&gt;
  &lt;li&gt;Default configuration should come from the &lt;code&gt;Configure&lt;/code&gt; class, same as everything else.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that we know what we are building, let’s bake the shell:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# install Queuesadilla
composer require josegonzalez/queuesadilla:dev-master

# bake the shell
bin/cake bake shell Queuesadilla
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should now have a &lt;code&gt;src/Shell/QueueShell.php&lt;/code&gt; with contents similar to the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App\Shell;

use Cake\Console\Shell;

class QueueShell extends Shell
{
    public function main()
    {
    }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can invoke the shell with &lt;code&gt;bin/cake queue&lt;/code&gt;, and you will see the following output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ bin/cake queue

Welcome to CakePHP v5.0.1 Console
---------------------------------------------------------------
App : src
Path: /Users/jose/src/playground/src/
PHP : 7.0.1
---------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Yes, that’s CakePHP 5, and yes, it supports MRD (Mind Reading Development)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;adding-a-layer&quot;&gt;Adding a layer&lt;/h2&gt;

&lt;p&gt;This isn’t very helpful. Lets fill in that &lt;code&gt;main()&lt;/code&gt; method with some logic:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function main()
{
    $EngineClass = &quot;josegonzalez\\Queuesadilla\\Engine\\MysqlEngine&#39;;
    $WorkerClass = &quot;josegonzalez\\Queuesadilla\\Worker\\SequentialWorker&quot;;

    $logger = \Cake\Log\Log::engine(&#39;default&#39;);
    $engine = new $EngineClass($logger, [
      &#39;url&#39; =&amp;gt; &#39;mysql://user:password@localhost:3306/database_name&#39;
    ]);

    $worker = new $WorkerClass($engine, $logger);
    $worker-&amp;gt;work();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Assuming you have that database configured, this will work and output something similar to the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2015-12-22 00:54:39 Info: Starting worker
2015-12-22 00:54:39 Debug: No job!
2015-12-22 00:54:40 Debug: No job!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we queued a job, you could see the job output as well. We don’t care too much about that now, as we still need to ensure this thing can be configured for more than just our test app.&lt;/p&gt;

&lt;h2 id=&quot;option-parsing&quot;&gt;Option Parsing&lt;/h2&gt;

&lt;p&gt;Every cakephp shell has a method called &lt;code&gt;getOptionParser()&lt;/code&gt;. This returns an &lt;code&gt;ArgumentParser&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Just kidding, it returns an &lt;code&gt;OptionParser&lt;/code&gt;. You can add as many options as you’d like to this, and these options can later be accessed within your shell by using the &lt;code&gt;$this-&amp;gt;params&lt;/code&gt; array attribute. The following is what ours will look like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function getOptionParser()
{
    $parser = parent::getOptionParser();
    $parser-&amp;gt;addOption(&#39;engine&#39;, [
        &#39;choices&#39; =&amp;gt; [
            &#39;Beanstalk&#39;,
            &#39;Iron&#39;,
            &#39;Memory&#39;,
            &#39;Mysql&#39;,
            &#39;Null&#39;,
            &#39;Redis&#39;,
            &#39;Synchronous&#39;,
        ],
        &#39;default&#39; =&amp;gt; &#39;Mysql&#39;,
        &#39;help&#39; =&amp;gt; &#39;Name of engine&#39;,
        &#39;short&#39; =&amp;gt; &#39;e&#39;,
    ]);
    $parser-&amp;gt;addOption(&#39;queue&#39;, [
        &#39;help&#39; =&amp;gt; &#39;Name of a queue&#39;,
        &#39;short&#39; =&amp;gt; &#39;q&#39;,
    ]);
    $parser-&amp;gt;addOption(&#39;logger&#39;, [
        &#39;help&#39; =&amp;gt; &#39;Name of a configured logger&#39;,
        &#39;default&#39; =&amp;gt; &#39;stdout&#39;,
        &#39;short&#39; =&amp;gt; &#39;l&#39;,
    ]);
    $parser-&amp;gt;addOption(&#39;worker&#39;, [
        &#39;choices&#39; =&amp;gt; [
            &#39;Sequential&#39;,
            &#39;Test&#39;,
        ],
        &#39;default&#39; =&amp;gt; &#39;Sequential&#39;,
        &#39;help&#39; =&amp;gt; &#39;Name of worker class&#39;,
        &#39;short&#39; =&amp;gt; &#39;w&#39;,
    ]);
    $parser-&amp;gt;description(__(&#39;Runs a Queuesadilla worker&#39;));
    return $parser;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;a href=&quot;http://book.cakephp.org/3.0/en/console-and-shells.html#configuring-options-and-generating-help&quot;&gt;online docs&lt;/a&gt; do a good job of explaining these and other ways of manipulating an &lt;code&gt;OptionParser&lt;/code&gt;, but the above code should be pretty self-explanatory. With the above code, we’ll have the following output for &lt;code&gt;bin/cake queue -h&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ bin/cake queue -h

Welcome to CakePHP v5.0.1 Console
---------------------------------------------------------------
App : src
Path: /Users/jose/src/playground/src/
PHP : 7.0.1
---------------------------------------------------------------
Runs a Queuesadilla worker.

Usage:
cake queuesadilla [options]

Options:

--help, -h     Display this help.
--verbose, -v  Enable verbose output.
--quiet, -q    Enable quiet output.
--engine, -e   Name of engine (default: Mysql)
               (choices:
               Beanstalk|Iron|Memory|Mysql|Null|Redis|Synchronous)
--queue, -q    Name of a queue
--logger, -l   Name of a configured logger (default:
               stdout)
--worker, -w   Name of worker class (default:
               Sequential) (choices:
               Sequential|Test)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty chawesome. Let’s modify our code to use this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function main()
{
    $engine = $this-&amp;gt;params[&#39;engine&#39;];
    $worker = $this-&amp;gt;params[&#39;worker&#39;];
    $EngineClass = &quot;josegonzalez\\Queuesadilla\\Engine\\&quot; . $engine . &#39;Engine&#39;;
    $WorkerClass = &quot;josegonzalez\\Queuesadilla\\Worker\\&quot; . $worker . &quot;Worker&quot;;

    $config = $this-&amp;gt;getEngineConfig();
    $loggerName = $this-&amp;gt;getLoggerName();

    $logger = \Cake\Log\Log::engine($loggerName);
    $engine = new $EngineClass($logger, $config);

    $worker = new $WorkerClass($engine, $logger);
    $worker-&amp;gt;work();
}

protected function getEngineConfig()
{
    $config = \Cake\Core\Configure::read(&#39;Queuesadilla.engine&#39;);
    if (empty($config)) {
        throw new Exception(&#39;Invalid Queuesadilla.engine config&#39;);
    }

    if (!empty($this-&amp;gt;params[&#39;queue&#39;])) {
        $config[&#39;queue&#39;] = $this-&amp;gt;params[&#39;queue&#39;];
    }
    return $config;
}

protected function getLoggerName()
{
    $loggerName = \Cake\Core\Configure::read(&#39;Queuesadilla.logger&#39;);
    if (empty($loggerName)) {
        $loggerName = $this-&amp;gt;params[&#39;logger&#39;];
    }
    return $loggerName;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The only thing left to do is add the appropriate config to our &lt;code&gt;config/app.php&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&#39;Queuesadilla&#39; =&amp;gt; [
    &#39;engine&#39; =&amp;gt; [
        // yum environment variables
        &#39;url&#39; =&amp;gt; env(&#39;DATABASE_URL&#39;),
    ],
],
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you run the worker now, you’ll get the same output as before, only this time it will respect any additional options you give it, as well as application-level changes to the logger or the backing engine.&lt;/p&gt;

&lt;h2 id=&quot;testing-the-job-runner&quot;&gt;Testing the job runner&lt;/h2&gt;

&lt;p&gt;Now that we have a simple worker going, lets test it with a simple job. Place the following in &lt;code&gt;src/Job/TestJob.php&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App\Job;

class TestJob
{
    public function perform($job)
    {
        debug($job-&amp;gt;data());
    }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we can test this using the &lt;code&gt;bin/cake console&lt;/code&gt; shell:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;// nonsense boilerplate so we can get a logger in the `bin/cake console` shell
$stdout = new \Cake\Log\Engine\ConsoleLog([
    &#39;types&#39; =&amp;gt; [&#39;notice&#39;, &#39;info&#39;, &#39;debug&#39;],
    &#39;stream&#39; =&amp;gt; new \Cake\Console\ConsoleOutput(&#39;php://stdout&#39;),
]);
\Cake\Log\Log::config(&#39;stdout&#39;, [&#39;engine&#39; =&amp;gt; $stdout]);
$logger = \Cake\Log\Log::engine(&#39;stdout&#39;);

// create an engine
$engine = new \josegonzalez\Queuesadilla\Engine\MysqlEngine(
  $logger,
  [&#39;url&#39; =&amp;gt; env(&#39;DATABASE_URL&#39;)]
);

// create a queue connection
$queue = new \josegonzalez\Queuesadilla\Queue($engine);

// zhu li, queue the thing!
$queue-&amp;gt;push([&#39;\App\Job\TestJob&#39;, &#39;perform&#39;], [&#39;sleep&#39; =&amp;gt; 3, &#39;message&#39; =&amp;gt; &#39;hi&#39;, &#39;raise&#39; =&amp;gt; false]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you were running the &lt;code&gt;bin/cake queue&lt;/code&gt; shell in another terminal, you should have seen the debug output.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;CakePHP Shells are actually quite powerful. You can use them not only as wrappers of external job running tools, but also as a way to invoke administrative, one-off code as in the &lt;code&gt;bin/cake console&lt;/code&gt; shell. You could also write longer, one-off tasks as custom shells, and cron-tasks &lt;em&gt;definitely&lt;/em&gt; belong in them.&lt;/p&gt;
</description>
        <pubDate>Sun, 20 Dec 2015 12:00:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2015/12/20/creating-custom-background-shells/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2015/12/20/creating-custom-background-shells/</guid>
        
        <category>cakeadvent-2015</category>
        
        <category>cakephp</category>
        
        <category>shells</category>
        
        <category>queueing</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Tracking Requests Via Dispatch Filters</title>
        <description>&lt;p&gt;CakePHP 2 added dispatch filters. These were cool, but there were a few problems:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;They were managed to configure, which meant it was harder for dependencies and configuration to be added/removed to middleware as the configuration was managed away from the actual dispatch cycle.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Configure&lt;/code&gt;-based management makes it harder to reason about when a particular dispatch filter will be hit.&lt;/li&gt;
  &lt;li&gt;Because of the above, controller handling had to be outside of the middleware layer. Sometimes you want to do something special, and in our case you basically had to replace the whole Dispatcher to do that. Boo.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In CakePHP 3 we now have a nice stack of middleware you configure in &lt;code&gt;config/bootstrap.php&lt;/code&gt; using the &lt;code&gt;DispatcherFactory&lt;/code&gt;. Many applications have no need to modify the stack, but they can be quite handy in a pinch. For instance, what if you wanted to track the number of times certain controller/action pairs in your application are requested?&lt;/p&gt;

&lt;h2 id=&quot;metrics-tracking-via-statsd&quot;&gt;Metrics tracking via StatsD&lt;/h2&gt;

&lt;p&gt;I’m not going to get too much into StatsD, except to say it’s a way to track metrics in a time-series database software called graphite. &lt;a href=&quot;https://codeascraft.com/2011/02/15/measure-anything-measure-everything/&quot;&gt;Here&lt;/a&gt; is a blog post by Etsy covering StatsD and why it’s awesome.&lt;/p&gt;

&lt;p&gt;In our case, we’re going to send a counter to StatsD every time a controller/action pair is hit. Let’s install a library to handle talking to statsd:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;composer require league/statsd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we’ll wire up the simplest of dispatch filters. We will be tracking requests &lt;em&gt;after&lt;/em&gt; they happen, in case anything happens during the dispatch cycle that would change what would be requested:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App\Routing\Filter;

use Cake\Event\Event;
use Cake\Routing\DispatcherFilter;
use Cake\Utility\Inflector;
use League\StatsD\Client;

class StatsdFilter extends DispatcherFilter
{
    // only create the client once and
    // keep a reference to it
    protected $client;

    // these can be overriden whenever
    // we add the dispatch filter
    protected $_defaultConfig = [
        &#39;host&#39; =&amp;gt; &#39;127.0.0.1&#39;,
        &#39;port&#39; =&amp;gt; 8125,
        &#39;namespace&#39; =&amp;gt; &#39;app&#39;
    ];
    public function __construct($config = [])
    {
        // ensure configuration is set
        parent::__construct($config);

        $this-&amp;gt;client = new Client();
        $this-&amp;gt;client-&amp;gt;configure([
            &#39;host&#39; =&amp;gt; $this-&amp;gt;config(&#39;host&#39;),
            &#39;port&#39; =&amp;gt; $this-&amp;gt;config(&#39;port&#39;),
            &#39;namespace&#39; =&amp;gt; $this-&amp;gt;config(&#39;namespace&#39;),
        ]);
    }

    public function afterDispatch(Event $event)
    {
        $request = $event-&amp;gt;data[&#39;request&#39;];
        $response = $event-&amp;gt;data[&#39;response&#39;];

        // Graphite uses folders for metrics
        // We dasherize the names to keep all metrics sane-looking
        $controller = Inflector::dasherize($response-&amp;gt;params[&#39;controller&#39;]);
        $action = Inflector::dasherize($response-&amp;gt;params[&#39;action&#39;]);
        $statusCode = $response-&amp;gt;statusCode();

        // track controller/action pairs
        $statsd-&amp;gt;increment(sprintf(&#39;web.%s.%s.hit&#39;, $controller, $action));

        // track response codes for those pairs as well
        $statsd-&amp;gt;increment(sprintf(&#39;web.%s.%s.%d&#39;, $controller, $action, $statusCode));
    }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And configuring it is easy. Simply add the following to your &lt;code&gt;config/bootstrap.php&lt;/code&gt; after the &lt;code&gt;DispatcherFactory:add(&#39;ControllerFactory&#39;)&lt;/code&gt; call:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;DispatcherFactory::add(&#39;StatsdFilter&#39;, [
    &#39;host&#39; =&amp;gt; &#39;127.0.0.1&#39;,
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now you’ll be tracking metrics in StatsD!&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://book.cakephp.org/3.0/en/development/dispatch-filters.html&quot;&gt;docs on dispatch filters&lt;/a&gt; have another example - altering cache headers on certain requests - but it should be fairly easy to come up with useful ways of bending dispatch filters to your will!&lt;/p&gt;
</description>
        <pubDate>Sat, 19 Dec 2015 12:00:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2015/12/19/tracking-requests-via-dispatch-filters/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2015/12/19/tracking-requests-via-dispatch-filters/</guid>
        
        <category>cakeadvent-2015</category>
        
        <category>cakephp</category>
        
        <category>dispatch-filters</category>
        
        <category>statsd</category>
        
        
        <category>cakephp</category>
        
      </item>
    
  </channel>
</rss>
