<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jose Diaz-Gonzalez</title>
    <description>Developer, Accidental Ops Guy, and CakePHP Core Developer</description>
    <link>http://josediazgonzalez.com/</link>
    <atom:link href="http://josediazgonzalez.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 27 Dec 2015 01:20:52 +0000</pubDate>
    <lastBuildDate>Sun, 27 Dec 2015 01:20:52 +0000</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Creating a CakePHP skeleton</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/2015/12/26/screenshot.png&quot; alt=&quot;File Upload Tool&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ive-got-a-lot-of-problems-with-you-people&quot;&gt;“I’ve got a lot of problems with you people”&lt;/h2&gt;

&lt;p&gt;A while back &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, I &lt;s&gt;stole&lt;/s&gt; built a &lt;a href=&quot;https://devcenter.heroku.com/articles/paperclip-s3&quot;&gt;simple image upload tool&lt;/a&gt; for our &lt;a href=&quot;https://seatgeek.com/sgteam&quot;&gt;marketing team&lt;/a&gt;. The reason I built this was simple; I wanted to stop the marketing team from uploading large file assets to the main repository &lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;, thereby bloating repository size. It’s worked well enough, but has lately shown it’s age:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Thumbnails are processed in a web request, slowing down large file uploads. We should &lt;em&gt;always&lt;/em&gt; process any files in the background, to avoid slowing down the user’s interaction with the site.&lt;/li&gt;
  &lt;li&gt;Thumbnails are created &lt;em&gt;regardless&lt;/em&gt; of the file type. Uploading a large gif? Yeah that won’t work.&lt;/li&gt;
  &lt;li&gt;Images are uploaded through rails. Since we store assets on S3, we can just as easily upload direct to S3 in javascript.&lt;/li&gt;
  &lt;li&gt;I never built in any categorization, tagging, or user functionality. There isn’t any way for the marketing team to know who uploaded what file, nor for what purpose.&lt;/li&gt;
  &lt;li&gt;A “file” can actually be several different assets. For instance, we frequently resize assets manually - on the client-side at the moment - for use in different media, like ads, email, or on-site ads. Having several different “uploads” made it slightly difficult to see which one someone should use for a specific purpose.&lt;/li&gt;
  &lt;li&gt;It doesn’t have an API, meaning other teams that might want to use it to store information - such as the Android team - can’t easily write an integration like, say, &lt;a href=&quot;https://www.getcloudapp.com/&quot;&gt;CloudApp&lt;/a&gt; &lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; but just for our internal tool.&lt;/li&gt;
  &lt;li&gt;The site is built on an older version of rails &lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;, which I have no desire nor intention to upgrade. We also don’t really have a dedicated Rails developer, so it’s not like I can just toss the app at someone else. We &lt;em&gt;do&lt;/em&gt;, however, have two CakePHP Core developers on staff, so at worst I can just tell &lt;a href=&quot;https://github.com/ad7six&quot;&gt;Andy&lt;/a&gt; it’s his problem now.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;lets-try-and-get-past-this&quot;&gt;Let’s try and get past this&lt;/h2&gt;

&lt;p&gt;So I’m building this new app and decided I needed a good base:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Must have all my favorite plugins - &lt;a href=&quot;/2015/12/02/creating-apis-using-the-crud-plugin/&quot;&gt;Crud&lt;/a&gt;, &lt;a href=&quot;/2015/12/03/generating-administrative-panels-with-crud-view/&quot;&gt;Crud View&lt;/a&gt;, &lt;a href=&quot;/2015/12/05/uploading-files-and-images/&quot;&gt;Upload&lt;/a&gt;, etc. - enabled by default.&lt;/li&gt;
  &lt;li&gt;Should handle &lt;a href=&quot;/2015/12/07/error-handling-in-cakephp-3/&quot;&gt;error tracking&lt;/a&gt; and &lt;a href=&quot;/2015/12/14/custom-logging-engines-and-adding-contextual-data/&quot;&gt;logging&lt;/a&gt; in a sane way.&lt;/li&gt;
  &lt;li&gt;Must be able to handle being &lt;a href=&quot;/2015/12/12/using-dns-to-simplify-connection-strings/&quot;&gt;deployed&lt;/a&gt; to &lt;a href=&quot;/2015/12/18/managing-application-configuration/&quot;&gt;heroku&lt;/a&gt; by default.&lt;/li&gt;
  &lt;li&gt;Needs support for &lt;em&gt;some&lt;/em&gt; method of &lt;a href=&quot;/2015/12/20/creating-custom-background-shells/&quot;&gt;background queueing&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Should be open source &lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thankfully, we can use composer to &lt;a href=&quot;/2015/12/09/customizing-your-app-template/&quot;&gt;customize our application skeleton&lt;/a&gt;. This will enable me to scaffold out my application more more quickly than I would be able to if I used the base &lt;a href=&quot;https://github.com/cakephp/app&quot;&gt;cakephp/app&lt;/a&gt; composer project template.&lt;/p&gt;

&lt;p&gt;Here is my first pass, &lt;a href=&quot;https://github.com/josegonzalez/app&quot;&gt;josegonzalez/app&lt;/a&gt;. It’s based upon the original &lt;a href=&quot;https://github.com/cakephp/app&quot;&gt;cakephp/app&lt;/a&gt; project template, with many of my requirements fulfilled. Ideally everything would be done now, but that won’t ever be the case:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Still need to add a custom &lt;code&gt;config/functions.php&lt;/code&gt; for utility functions I tend to use such as &lt;code&gt;diebug()&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;I don’t &lt;em&gt;yet&lt;/em&gt; have a contextual logger in place. I’m considering switching to monolog and having all logging go to &lt;code&gt;stdout&lt;/code&gt; when using the &lt;a href=&quot;/2015/12/17/cakephp-shells-i-didnt-know-about/&quot;&gt;built-in cake server shell&lt;/a&gt;, but I’m not quite sure yet.&lt;/li&gt;
  &lt;li&gt;I can’t yet &lt;em&gt;seed&lt;/em&gt; an environment in &lt;a href=&quot;/2015/12/18/managing-application-configuration/&quot;&gt;dotenv&lt;/a&gt;, so heroku support isn’t quite complete, but I’m working on it.&lt;/li&gt;
  &lt;li&gt;There are quite a few plugins that would be useful to have - such as &lt;a href=&quot;https://github.com/usemuffin/footprint&quot;&gt;muffin/footprint&lt;/a&gt; - but they aren’t there yet. I’ll add them as I see general use across my application.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Side note: I wrote &lt;em&gt;way&lt;/em&gt; too many blog posts. Do you see the internal linkage up there? Incredible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h2&gt;

&lt;p&gt;Now that I have a firm base for my application, I’ll need to start actually building the thing. I’m hoping there isn’t too much work, but these things tend to take forever, so we’ll see. Since I have a pretty small set of requirements, actually writing the code should be a straightforward process, but hopefully I can do this in a readable, re-usable way.&lt;/p&gt;

&lt;p&gt;Be sure to follow along via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the Media Manager series. Until next post, meow!&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;November 12, 2013 to be precise. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;Our development staff is no better, the repository is still a lovely 300mb with images, binary blobs, etc. :) &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;By the way, CloudApp is great. Our entire company uses it and I don’t understand why anyone wouldn’t. They even have a free tier, which is great of those times when I totally forget to renew my account… &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;It’s Rails 3.2.13. I can feel the vulnerabilities pulsating through me. &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot;&gt;
      &lt;p&gt;Preferably on my own &lt;a href=&quot;https://github.com/josegonzalez&quot;&gt;github profile&lt;/a&gt;, though I can see this being on our company’s profile as well. &lt;em&gt;shrug&lt;/em&gt; as long as it’s out there. &lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 26 Dec 2015 12:00:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2015/12/26/creating-a-generic-cakephp-skeleton/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2015/12/26/creating-a-generic-cakephp-skeleton/</guid>
        
        <category>cakephp</category>
        
        <category>scaffold</category>
        
        <category>composer</category>
        
        <category>planning</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>SEO Considerations for CakePHP Applications</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;A lovely post that is an adventure across how you can bend CakePHP to your will.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Everyone loves free traffic, right? It allows us to continue building our applications, hopefully making money as we do so. If you aren’t making money, then why are you working on that app?&lt;/p&gt;

&lt;p&gt;In any case, one thing that you should worry about is duplicate website content. If search engines see any such duplicate content - especially en masse - then the value of your web pages decreases in their eyes, potentially dropping your page views. That would be sucks.&lt;/p&gt;

&lt;p&gt;One way to do this would be to automatically check that a url for a given page is the same as that which we expect. We can do this in a few ways, but the simplest is simply to check it manually!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * @param integer $id an id for the current model
 * @return void|Cake\Network\Request
 */
public function view($id)
{
  $post = $this-&amp;gt;Posts-&amp;gt;get($id);
  if ($this-&amp;gt;request-&amp;gt;here != $post-&amp;gt;getCanonicalUrl()) {
    return $this-&amp;gt;redirect($post-&amp;gt;getCanonicalUrl());
  }
  $this-&amp;gt;set(&#39;post&#39;, $post);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not too bad. One thing I like to do is use annotations for stuff, so I wrote an annotation parser for just the above:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function initialize()
{
  $this-&amp;gt;loadComponent(&#39;SeoAnnotation&#39;, [
    // this can be overriden
    &#39;table&#39; =&amp;gt; &#39;Posts&#39;,
    // as can this
    &#39;primaryKey&#39; =&amp;gt; &#39;$id&#39;,
  ]);
}

/**
 * @table Posts
 * @param integer $id an id for the current model
 * @return void|Cake\Network\Request
 */
public function view($id)
{
  $post = $this-&amp;gt;Posts-&amp;gt;get($id);
  $this-&amp;gt;set(&#39;post&#39;, $post);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The annotation parser - using the &lt;a href=&quot;https://github.com/marcioAlmada/annotations&quot;&gt;minime/annotations&lt;/a&gt; package - simply retrieves the entity on the specified table by the specified field and then automatically does the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;protected function getTable()
{
  $annotations = $this-&amp;gt;geAnnotations();
  $tableClass = $annotations-&amp;gt;get(&#39;table&#39;, $this-&amp;gt;config(&#39;table&#39;));
  return TableRegistry::get($tableClass);
}

protected function getPrimaryKey()
{
  $annotations = $this-&amp;gt;geAnnotations();
  $primaryKeyField = $annotations-&amp;gt;get(
    &#39;primaryKey&#39;,
    $this-&amp;gt;config(&#39;primaryKey&#39;)
  );
  // logic to iterate over other @param
  // annotations to get the index of the primaryKey
  // in the current request args
  return $primaryKey;
}

protected function beforeFilter(\Cake\Event\Event $event)
{
  $primaryKey = $this-&amp;gt;getPrimaryKey();
  if (empty($primaryKey)) {
    return;
  }

  $entity = $this-&amp;gt;getTable()-&amp;gt;get($primaryKey);
  if (!method_exists($entity, &#39;getCanonicalUrl&#39;)) {
    throw new \RuntimeException(&#39;Your entity class must implement getCanonicalUrl&#39;);
  }

  if ($this-&amp;gt;request-&amp;gt;here != $entity-&amp;gt;getCanonicalUrl()) {
    return $this-&amp;gt;redirect($entity-&amp;gt;getCanonicalUrl());
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, if the specified field doesn’t exist as an &lt;code&gt;@param&lt;/code&gt; docblock, then my component does nothing. It does require a bit more work on the developer’s end, but as a bonus I also get well-documented code.&lt;/p&gt;

&lt;p&gt;Note, you can always get at a controller in your custom components by doing the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$controller = $this-&amp;gt;_registry-&amp;gt;getController();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Components are “owned” by a &lt;code&gt;Cake\Controller\ComponentRegistry&lt;/code&gt;, which keeps track of both loaded components and the controller upon which they are loaded, amongst other things.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Semi-related, ComponentRegistry, TableRegistry, etc. are all simply &lt;a href=&quot;http://en.wikipedia.org/wiki/Service_locator_pattern&quot;&gt;service locators&lt;/a&gt;, and all use some form of dependency injection on the objects they build. Yes, CakePHP has those things you thought it didn’t, we’re just very good at hiding them from you :P&lt;br /&gt;
If you’d like to use a similar pattern in your applications, you can extend the &lt;code&gt;Cake\Core\ObjectRegistry&lt;/code&gt; class. I personally use this for stuff like custom payment classes, or things where there are multiple implementations and constructing them can be a pita.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Back on topic, once I have an entity, I also like to set the canonical url for a given page. For instance, sometimes my page has querystring values that I’d like search engines to ignore. Maybe they were affiliate parameters, or things that updated filters. In any case, it’s a good idea to set a &lt;code&gt;rel=canonical&lt;/code&gt; meta tag:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;if (method_exists($entity, &#39;getCanonicalUrl&#39;) {
  $this-&amp;gt;_controller-&amp;gt;set(&#39;metaCanonical&#39;, $entity-&amp;gt;getCanonicalUrl());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then in your view:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;// there isn&#39;t a special helper for this,
// so we are just using HtmlHelper::tag()
echo $this-&amp;gt;Html-&amp;gt;tag(&#39;link&#39;, null, [
  &#39;rel&#39; =&amp;gt; &#39;canonical&#39;,
  // get the full url, since we don&#39;t expect `getCanonicalUrl`
  // to return with the domain etc.
  &#39;href&#39; =&amp;gt; \Cake\Routing\Router::url($metaCanonical, true),
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When writing an application, we often want memorable names. &lt;code&gt;/posts/view/34523&lt;/code&gt; is a boring url, but &lt;code&gt;/2015/12/24/seo-considerations-for-cakephp-applications/&lt;/code&gt; tells me a bit more. But how do I do routing off of that?&lt;/p&gt;

&lt;p&gt;One thing that is useful to to &lt;em&gt;still&lt;/em&gt; have the “primarykey” to a record in the url. For instance, you might have the following url:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/34523/seo-considerations-for-cakephp-applications/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That still has an ID I can look for, and also contains some interesting metadata for both the user and a search engine. But how do we generate that slug? Using plugin LIKE A BAWS:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;# install the thing!
composer require muffin/slug

# enable the thing!
bin/cake plugin load Muffin/Slug
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now add the behavior to your table:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App\Model\Table;

use Cake\ORM\Table;

class PostsTable extends Table
{
  public function initialize(array $config)
  {
    // some other crap you think is code goes here
    $this-&amp;gt;displayField(&#39;title&#39;);
    $this-&amp;gt;addBehavior(&#39;Muffin/Slug.Slug&#39;, [
      // options! https://github.com/UseMuffin/Slug#configuration
    ]);
  }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now, as long as you have a &lt;code&gt;slug&lt;/code&gt; field in your &lt;code&gt;posts&lt;/code&gt; table and a &lt;code&gt;title&lt;/code&gt; field as your displayField, you will be set. You can now use the &lt;code&gt;slug&lt;/code&gt; in your &lt;code&gt;getCanonicalUrl&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;But why stop there? You could also build a simple admin tool to let your marketing team update those canonical urls using the &lt;a href=&quot;/2015/12/02/creating-apis-using-the-crud-plugin/&quot;&gt;crud&lt;/a&gt; and &lt;a href=&quot;/2015/12/03/generating-administrative-panels-with-crud-view/&quot;&gt;crud-view&lt;/a&gt; plugin. Trust me, they’ll love you and sing your praises to your bosses, which will be especially nice when you realize you are programming on Christmas day and your boss is like “slow your roll, you did great work this year, go take a nice long vacation and come back to me fresh next year.”&lt;/p&gt;

&lt;p&gt;And that’s all I have. Come back next year - or whenever I decide to write again - and we’ll see if I can muster up more tips and tricks you can use in writing your CakePHP code. Until then, pet your pets and Happy Holidays!&lt;/p&gt;
</description>
        <pubDate>Thu, 24 Dec 2015 12:00:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2015/12/24/seo-considerations-for-cakephp-applications/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2015/12/24/seo-considerations-for-cakephp-applications/</guid>
        
        <category>cakeadvent-2015</category>
        
        <category>cakephp</category>
        
        <category>seo</category>
        
        <category>routing</category>
        
        <category>behaviors</category>
        
        <category>annotations</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Data Validation in CakePHP 3</title>
        <description>&lt;p&gt;As mentioned before, CakePHP 3 introduced the concept of a distinct Validation class that can be used against an arbitrary array of data. You could &lt;em&gt;sort of&lt;/em&gt; do this in CakePHP 2, but it was annoying, not well-exposed, and not well-documented.&lt;/p&gt;

&lt;p&gt;Assuming you got stuck in an older version of CakePHP - or some other non-CakePHP 3 environment - and want to use the new validation layer, you’ll need to install the cakephp/validation package. Skip this if you are using CakePHP 3 in your app already:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;composer require cakephp/validation
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Most CakePHP 3 packages can be installed in a standalone way with minimal external dependencies.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, let’s start by creating a validator:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;# use the class first of course!
use Cake\Validation\Validator;

$validator = new Validator();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is a bit of data I want to validate:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$data = [
  &#39;name&#39; =&amp;gt; &#39;camila&#39;,
  &#39;age&#39; =&amp;gt; 4,
  &#39;intelligence&#39; =&amp;gt; &#39;stupid&#39;,
  &#39;position&#39; =&amp;gt; &#39;keyboard&#39;,
  &#39;species&#39; =&amp;gt; &#39;&#39;,
];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the 3.x validator, you can easily require the presence of a field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$validator-&amp;gt;requirePresence(&#39;species&#39;);

// should be an empty array
$errors = $validator-&amp;gt;errors($data);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that this is different from the field being not empty:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$validator-&amp;gt;notEmpty(&#39;species&#39;, &#39;we need a species for your pet&#39;);

// will not be an empty array
$errors = $validator-&amp;gt;errors($data);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, this is &lt;em&gt;not&lt;/em&gt; the same as being an string with just whitespace. For that, you need another rule:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$validator-&amp;gt;add(&#39;species&#39;, [
  &#39;notBlank&#39; =&amp;gt; [
      &#39;rule&#39; =&amp;gt; &#39;notBlank&#39;,
      &#39;message&#39; =&amp;gt; &quot;Ain&#39;t no such thing as a &#39;   &#39; species&quot;
    ]
]);

// will not be an empty array
$errors = $validator-&amp;gt;errors($data);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also nest validators. Say my &lt;code&gt;$data&lt;/code&gt; array has a field called &lt;code&gt;kittens&lt;/code&gt;, which is an array of &lt;code&gt;kitten&lt;/code&gt; data. You might want to validate some information about those kittens:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;// add custom rules here
$kittenValidator = new Validator();

// Connect the nested validators.
$validator-&amp;gt;addNestedMany(&#39;kittens&#39;, $kittenValidator);

// includes errors from nested data as well
$validator-&amp;gt;errors($data);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some rules - like those surrounding presence of a field - can support multiple modes, &lt;code&gt;create&lt;/code&gt; and &lt;code&gt;update&lt;/code&gt;. This is useful for cases where you might be using the same &lt;code&gt;$validator&lt;/code&gt; against both new and existing recordsets, but want slightly different behavior for one or two rules.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;// only require a name on update
$validator-&amp;gt;notEmpty(
  &#39;name&#39;,
  &#39;Your cat needs a name, you cannot call it cat forever&#39;,
  &#39;update&#39; // the mode
);

// errors works in `create` mode by
// default. Set the second arg to
// `false` to use `update` mode
$errors = $validator-&amp;gt;errors($data, false);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, there are &lt;a href=&quot;http://api.cakephp.org/3.0/class-Cake.Validation.Validation.html&quot;&gt;quite a few rules at your disposal&lt;/a&gt; by default, but you are welcome to create new ones. Maybe your rule validates that a cat is in a breed that exists in a specific database table?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App\Model\Validation;

use Cake\ORM\TableRegistry;
use Cake\Validation\Validation;

class CatValidation extends Validation
{
  public static function validSpecies($check)
  {
    $table = TableRegistry::get(&#39;Species&#39;);
    $species = $table-&amp;gt;find(&#39;list&#39;)-&amp;gt;toArray();
    return in_array((string)$check, array_values($species));
  }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can simply add this new class to your validator:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;// map it
// if a class name, the methods *must* be static
$validator-&amp;gt;provider(&#39;cat&#39;, &#39;App\Model\Validation\CatValidation&#39;);

// use it
$validator-&amp;gt;add(&#39;species&#39;, &#39;validSpecies&#39;, [
    &#39;rule&#39; =&amp;gt; &#39;validSpecies&#39;,
    &#39;provider&#39; =&amp;gt; &#39;cat&#39;
]);
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Wed, 23 Dec 2015 12:00:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2015/12/23/data-validation-in-cakephp-3/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2015/12/23/data-validation-in-cakephp-3/</guid>
        
        <category>cakeadvent-2015</category>
        
        <category>cakephp</category>
        
        <category>validation</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Using InstanceConfigTrait for object configuration</title>
        <description>&lt;p&gt;When writing a new class to handle complex logic, you typically have some amount of configuration you need to set. For instance, lets assume we have a cat class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace Animalia\Chordata\Mammalia\Carnivora\Feliformia\Felidae\Felinae\Felis;

class FelisCatus
{
  public $attributes = [];
  public function __construct(array $attributes = [])
  {
    $this-&amp;gt;attributes = $attributes;
  }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above is a simple - other than that namespace yeesh - cat class, where all attributes are set without regard to what is necessary to define a cat. In our case, we want to ensure each cat at least has a color, gender, name, and size:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace Animalia\Chordata\Mammalia\Carnivora\Feliformia\Felidae\Felinae\Felis;

class FelisCatus
{
  public $attributes = [];
  public function __construct(array $attributes = [])
  {
    $this-&amp;gt;attributes = array_merge([
      &#39;name&#39; =&amp;gt; &#39;Cat&#39;,
      &#39;color&#39; =&amp;gt; &#39;black&#39;,
      &#39;gender&#39; =&amp;gt; &#39;female&#39;,
      &#39;size&#39; =&amp;gt; &#39;small&#39;,
    ], $attributes);
  }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;How do we access the attributes?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$cat = new FelisCatus([&#39;name&#39; =&amp;gt; &#39;Camila&#39;]);
// get the name
echo $cat-&amp;gt;attributes[&#39;name&#39;];

// get the paw size? Undefined index!
echo $cat-&amp;gt;attributes[&#39;paw_size&#39;];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we were doing this in CakePHP, we could take advantage of the &lt;code&gt;InstanceConfigTrait&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace Animalia\Chordata\Mammalia\Carnivora\Feliformia\Felidae\Felinae\Felis;

use Cake\Core\InstanceConfigTrait;

class FelisCatus
{
  use InstanceConfigTrait;
  protected $_defaultConfig = [
    &#39;name&#39; =&amp;gt; &#39;Cat&#39;,
    &#39;color&#39; =&amp;gt; &#39;black&#39;,
    &#39;gender&#39; =&amp;gt; &#39;female&#39;,
    &#39;size&#39; =&amp;gt; &#39;small&#39;,
  ];

  public function __construct(array $attributes = [])
  {
    // will automatically merge the attributes with
    // $this-&amp;gt;_defaultConfig
    $this-&amp;gt;config($attributes);
  }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we get to do the following!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$cat = new FelisCatus([&#39;name&#39; =&amp;gt; &#39;Camila&#39;]);
// get the name
echo $cat-&amp;gt;config(&#39;name&#39;);

// get the paw size? Returns null
echo $cat-&amp;gt;config(&#39;paw_size&#39;);

// set the paw size
$cat-&amp;gt;config(&#39;paw_size&#39;, &#39;small&#39;);

// set nested data
$cat-&amp;gt;config(&#39;appetite.morning&#39;, null);
$cat-&amp;gt;config(&#39;appetite.afternoon&#39;, &#39;hangry&#39;);

// get nested data
echo $cat-&amp;gt;config(&#39;appetite.afternoon&#39;);

// set lots of info at once
$cat-&amp;gt;config([
  &#39;size&#39; =&amp;gt; &#39;large&#39;,
  &#39;pregnant&#39; =&amp;gt; true,
  &#39;owner&#39; =&amp;gt; &#39;Jose&#39;,
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;InstanceConfigTrait&lt;/code&gt; is a useful trait for hiding instance configuration initializing/setting/getting/deleting from the user. You can simply &lt;code&gt;use&lt;/code&gt; it in your class, ensure you initialze any config in your constructor, and then access it through a simple interface.&lt;/p&gt;

&lt;p&gt;CakePHP actually uses this in quite a few places:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cache and Log Engines&lt;/li&gt;
  &lt;li&gt;Authorize and Authenticate classes&lt;/li&gt;
  &lt;li&gt;Password Hashers&lt;/li&gt;
  &lt;li&gt;Helpers, Components, Behaviors&lt;/li&gt;
  &lt;li&gt;Dispatch Filters&lt;/li&gt;
  &lt;li&gt;Mailers&lt;/li&gt;
  &lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So the same interface is available basically everywhere. Its static class analogue is &lt;code&gt;StaticConfigTrait&lt;/code&gt;, which &lt;em&gt;also&lt;/em&gt; parses dsn’s from the &lt;code&gt;url&lt;/code&gt; key, which comes in handy when creating factory-type classes.&lt;/p&gt;
</description>
        <pubDate>Tue, 22 Dec 2015 12:00:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2015/12/22/using-instance-config-trait-for-object-configuration/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2015/12/22/using-instance-config-trait-for-object-configuration/</guid>
        
        <category>cakeadvent-2015</category>
        
        <category>cakephp</category>
        
        <category>configuration</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Tracking Logged in User Actions</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Note: for the purposes of this post, I chose an easy to understand plugin, but I recommend using the &lt;a href=&quot;https://github.com/usemuffin/footprint&quot;&gt;footprint&lt;/a&gt; plugin as it supports many more features than the one I cover here.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is a pretty straightforward post. In CakePHP 3, we’ve removed a lot of the ability to access the session except where there is a &lt;code&gt;Request&lt;/code&gt; object. Static access to &lt;code&gt;CakeSession&lt;/code&gt; is gone, and it’s not coming back, so please stop asking for it. And stop using &lt;code&gt;$_SESSION&lt;/code&gt;, that breaks the cake.&lt;/p&gt;

&lt;p&gt;One thing this affects is the ability to see user session data in the Model layer. Typically you want to track &lt;em&gt;who&lt;/em&gt; performed an action &lt;em&gt;when&lt;/em&gt; the action happens. It’s quite nice to hide this in your model layer, as opposed to mangling data when it’s going into an entity.&lt;/p&gt;

&lt;p&gt;How do we do this? We can use the &lt;a href=&quot;https://github.com/ceeram/blame&quot;&gt;&lt;code&gt;ceeram/blame&lt;/code&gt; plugin&lt;/a&gt;!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# ugh more things to install
composer require ceeram/cakephp-blame

# load it
bin/cake plugin load Ceeram/Blame
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we add the following &lt;code&gt;use&lt;/code&gt; call to the inside of our &lt;code&gt;src/Controller/AppController.php&lt;/code&gt; class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;class AppController extends Controller
{
  use \Ceeram\Blame\Controller\BlameTrait;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally add the behavior to our table:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function initialize(array $config)
{
    $this-&amp;gt;addBehavior(&#39;Ceeram/Blame.Blame&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now whenever a new record is saved, the &lt;code&gt;created_by&lt;/code&gt; field is set to the logged in user’s &lt;code&gt;id&lt;/code&gt;. When records are modified, the &lt;code&gt;modified_by&lt;/code&gt; field will be set.&lt;/p&gt;

&lt;h2 id=&quot;how-does-it-work&quot;&gt;How does it work?&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;BlameTrait&lt;/code&gt; we added to our &lt;code&gt;AppController&lt;/code&gt; actually does all the heavy lifting. It adds a &lt;a href=&quot;https://github.com/ceeram/blame/blob/master/src/Event/LoggedInUserListener.php&quot;&gt;listener&lt;/a&gt; that will add the appropriate data to our Table instances whenever they are saved through the magic of &lt;a href=&quot;https://github.com/ceeram/blame/blob/master/src/Controller/BlameTrait.php#L18&quot;&gt;&lt;code&gt;Controller::loadModel()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It’s actually quite clever, and I’m a bit upset I hadn’t previously thought of it. The same trick probably works in 2.x.&lt;/p&gt;

&lt;p&gt;For users that find this plugin limiting in some way, I definitely recommend reading the code over, extending it, or applying the clever usage of the event system to your own application.&lt;/p&gt;
</description>
        <pubDate>Mon, 21 Dec 2015 12:00:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2015/12/21/tracking-logged-in-user-actions/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2015/12/21/tracking-logged-in-user-actions/</guid>
        
        <category>cakeadvent-2015</category>
        
        <category>cakephp</category>
        
        <category>auth</category>
        
        <category>user-tracking</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Creating Custom Background Shells</title>
        <description>&lt;p&gt;In a previous post, I mentioned how awesome it would be to have a background queueing system to perform long-running tasks. While there are many queueing systems, today I will re-introduce Queuesadilla, with an aim to explain how CakePHP shells work.&lt;/p&gt;

&lt;h2 id=&quot;shell-skeleton&quot;&gt;Shell Skeleton&lt;/h2&gt;

&lt;p&gt;Before we being, lets start with understanding what we need:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Queuesadilla is a long-running task. It handles it’s own state, so if it crashes, all we really care about is ensuring whatever process manager we are using will restart it. Given that, we don’t need much error handling.&lt;/li&gt;
  &lt;li&gt;We should be able to configure most of the options in Queuesadilla. We might not use them today, but they will come in handy later.&lt;/li&gt;
  &lt;li&gt;Logging should be done using the CakePHP logger.&lt;/li&gt;
  &lt;li&gt;Default configuration should come from the &lt;code&gt;Configure&lt;/code&gt; class, same as everything else.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that we know what we are building, let’s bake the shell:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# install Queuesadilla
composer require josegonzalez/queuesadilla:dev-master

# bake the shell
bin/cake bake shell Queuesadilla
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should now have a &lt;code&gt;src/Shell/QueueShell.php&lt;/code&gt; with contents similar to the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App\Shell;

use Cake\Console\Shell;

class QueueShell extends Shell
{
    public function main()
    {
    }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can invoke the shell with &lt;code&gt;bin/cake queue&lt;/code&gt;, and you will see the following output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ bin/cake queue

Welcome to CakePHP v5.0.1 Console
---------------------------------------------------------------
App : src
Path: /Users/jose/src/playground/src/
PHP : 7.0.1
---------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Yes, that’s CakePHP 5, and yes, it supports MRD (Mind Reading Development)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;adding-a-layer&quot;&gt;Adding a layer&lt;/h2&gt;

&lt;p&gt;This isn’t very helpful. Lets fill in that &lt;code&gt;main()&lt;/code&gt; method with some logic:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function main()
{
    $EngineClass = &quot;josegonzalez\\Queuesadilla\\Engine\\MysqlEngine&#39;;
    $WorkerClass = &quot;josegonzalez\\Queuesadilla\\Worker\\SequentialWorker&quot;;

    $logger = \Cake\Log\Log::engine(&#39;default&#39;);
    $engine = new $EngineClass($logger, [
      &#39;url&#39; =&amp;gt; &#39;mysql://user:password@localhost:3306/database_name&#39;
    ]);

    $worker = new $WorkerClass($engine, $logger);
    $worker-&amp;gt;work();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Assuming you have that database configured, this will work and output something similar to the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2015-12-22 00:54:39 Info: Starting worker
2015-12-22 00:54:39 Debug: No job!
2015-12-22 00:54:40 Debug: No job!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we queued a job, you could see the job output as well. We don’t care too much about that now, as we still need to ensure this thing can be configured for more than just our test app.&lt;/p&gt;

&lt;h2 id=&quot;option-parsing&quot;&gt;Option Parsing&lt;/h2&gt;

&lt;p&gt;Every cakephp shell has a method called &lt;code&gt;getOptionParser()&lt;/code&gt;. This returns an &lt;code&gt;ArgumentParser&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Just kidding, it returns an &lt;code&gt;OptionParser&lt;/code&gt;. You can add as many options as you’d like to this, and these options can later be accessed within your shell by using the &lt;code&gt;$this-&amp;gt;params&lt;/code&gt; array attribute. The following is what ours will look like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function getOptionParser()
{
    $parser = parent::getOptionParser();
    $parser-&amp;gt;addOption(&#39;engine&#39;, [
        &#39;choices&#39; =&amp;gt; [
            &#39;Beanstalk&#39;,
            &#39;Iron&#39;,
            &#39;Memory&#39;,
            &#39;Mysql&#39;,
            &#39;Null&#39;,
            &#39;Redis&#39;,
            &#39;Synchronous&#39;,
        ],
        &#39;default&#39; =&amp;gt; &#39;Mysql&#39;,
        &#39;help&#39; =&amp;gt; &#39;Name of engine&#39;,
        &#39;short&#39; =&amp;gt; &#39;e&#39;,
    ]);
    $parser-&amp;gt;addOption(&#39;queue&#39;, [
        &#39;help&#39; =&amp;gt; &#39;Name of a queue&#39;,
        &#39;short&#39; =&amp;gt; &#39;q&#39;,
    ]);
    $parser-&amp;gt;addOption(&#39;logger&#39;, [
        &#39;help&#39; =&amp;gt; &#39;Name of a configured logger&#39;,
        &#39;default&#39; =&amp;gt; &#39;stdout&#39;,
        &#39;short&#39; =&amp;gt; &#39;l&#39;,
    ]);
    $parser-&amp;gt;addOption(&#39;worker&#39;, [
        &#39;choices&#39; =&amp;gt; [
            &#39;Sequential&#39;,
            &#39;Test&#39;,
        ],
        &#39;default&#39; =&amp;gt; &#39;Sequential&#39;,
        &#39;help&#39; =&amp;gt; &#39;Name of worker class&#39;,
        &#39;short&#39; =&amp;gt; &#39;w&#39;,
    ]);
    $parser-&amp;gt;description(__(&#39;Runs a Queuesadilla worker&#39;));
    return $parser;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;a href=&quot;http://book.cakephp.org/3.0/en/console-and-shells.html#configuring-options-and-generating-help&quot;&gt;online docs&lt;/a&gt; do a good job of explaining these and other ways of manipulating an &lt;code&gt;OptionParser&lt;/code&gt;, but the above code should be pretty self-explanatory. With the above code, we’ll have the following output for &lt;code&gt;bin/cake queue -h&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ bin/cake queue -h

Welcome to CakePHP v5.0.1 Console
---------------------------------------------------------------
App : src
Path: /Users/jose/src/playground/src/
PHP : 7.0.1
---------------------------------------------------------------
Runs a Queuesadilla worker.

Usage:
cake queuesadilla [options]

Options:

--help, -h     Display this help.
--verbose, -v  Enable verbose output.
--quiet, -q    Enable quiet output.
--engine, -e   Name of engine (default: Mysql)
               (choices:
               Beanstalk|Iron|Memory|Mysql|Null|Redis|Synchronous)
--queue, -q    Name of a queue
--logger, -l   Name of a configured logger (default:
               stdout)
--worker, -w   Name of worker class (default:
               Sequential) (choices:
               Sequential|Test)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty chawesome. Let’s modify our code to use this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function main()
{
    $engine = $this-&amp;gt;params[&#39;engine&#39;];
    $worker = $this-&amp;gt;params[&#39;worker&#39;];
    $EngineClass = &quot;josegonzalez\\Queuesadilla\\Engine\\&quot; . $engine . &#39;Engine&#39;;
    $WorkerClass = &quot;josegonzalez\\Queuesadilla\\Worker\\&quot; . $worker . &quot;Worker&quot;;

    $config = $this-&amp;gt;getEngineConfig();
    $loggerName = $this-&amp;gt;getLoggerName();

    $logger = \Cake\Log\Log::engine($loggerName);
    $engine = new $EngineClass($logger, $config);

    $worker = new $WorkerClass($engine, $logger);
    $worker-&amp;gt;work();
}

protected function getEngineConfig()
{
    $config = \Cake\Core\Configure::read(&#39;Queuesadilla.engine&#39;);
    if (empty($config)) {
        throw new Exception(&#39;Invalid Queuesadilla.engine config&#39;);
    }

    if (!empty($this-&amp;gt;params[&#39;queue&#39;])) {
        $config[&#39;queue&#39;] = $this-&amp;gt;params[&#39;queue&#39;];
    }
    return $config;
}

protected function getLoggerName()
{
    $loggerName = \Cake\Core\Configure::read(&#39;Queuesadilla.logger&#39;);
    if (empty($loggerName)) {
        $loggerName = $this-&amp;gt;params[&#39;logger&#39;];
    }
    return $loggerName;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The only thing left to do is add the appropriate config to our &lt;code&gt;config/app.php&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&#39;Queuesadilla&#39; =&amp;gt; [
    &#39;engine&#39; =&amp;gt; [
        // yum environment variables
        &#39;url&#39; =&amp;gt; env(&#39;DATABASE_URL&#39;),
    ],
],
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you run the worker now, you’ll get the same output as before, only this time it will respect any additional options you give it, as well as application-level changes to the logger or the backing engine.&lt;/p&gt;

&lt;h2 id=&quot;testing-the-job-runner&quot;&gt;Testing the job runner&lt;/h2&gt;

&lt;p&gt;Now that we have a simple worker going, lets test it with a simple job. Place the following in &lt;code&gt;src/Job/TestJob.php&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App\Job;

class TestJob
{
    public function perform($job)
    {
        debug($job-&amp;gt;data());
    }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we can test this using the &lt;code&gt;bin/cake console&lt;/code&gt; shell:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;// nonsense boilerplate so we can get a logger in the `bin/cake console` shell
$stdout = new \Cake\Log\Engine\ConsoleLog([
    &#39;types&#39; =&amp;gt; [&#39;notice&#39;, &#39;info&#39;, &#39;debug&#39;],
    &#39;stream&#39; =&amp;gt; new \Cake\Console\ConsoleOutput(&#39;php://stdout&#39;),
]);
\Cake\Log\Log::config(&#39;stdout&#39;, [&#39;engine&#39; =&amp;gt; $stdout]);
$logger = \Cake\Log\Log::engine(&#39;stdout&#39;);

// create an engine
$engine = new \josegonzalez\Queuesadilla\Engine\MysqlEngine(
  $logger,
  [&#39;url&#39; =&amp;gt; env(&#39;DATABASE_URL&#39;)]
);

// create a queue connection
$queue = new \josegonzalez\Queuesadilla\Queue($engine);

// zhu li, queue the thing!
$queue-&amp;gt;push([&#39;\App\Job\TestJob&#39;, &#39;perform&#39;], [&#39;sleep&#39; =&amp;gt; 3, &#39;message&#39; =&amp;gt; &#39;hi&#39;, &#39;raise&#39; =&amp;gt; false]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you were running the &lt;code&gt;bin/cake queue&lt;/code&gt; shell in another terminal, you should have seen the debug output.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;CakePHP Shells are actually quite powerful. You can use them not only as wrappers of external job running tools, but also as a way to invoke administrative, one-off code as in the &lt;code&gt;bin/cake console&lt;/code&gt; shell. You could also write longer, one-off tasks as custom shells, and cron-tasks &lt;em&gt;definitely&lt;/em&gt; belong in them.&lt;/p&gt;
</description>
        <pubDate>Sun, 20 Dec 2015 12:00:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2015/12/20/creating-custom-background-shells/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2015/12/20/creating-custom-background-shells/</guid>
        
        <category>cakeadvent-2015</category>
        
        <category>cakephp</category>
        
        <category>shells</category>
        
        <category>queueing</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Tracking Requests Via Dispatch Filters</title>
        <description>&lt;p&gt;CakePHP 2 added dispatch filters. These were cool, but there were a few problems:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;They were managed to configure, which meant it was harder for dependencies and configuration to be added/removed to middleware as the configuration was managed away from the actual dispatch cycle.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Configure&lt;/code&gt;-based management makes it harder to reason about when a particular dispatch filter will be hit.&lt;/li&gt;
  &lt;li&gt;Because of the above, controller handling had to be outside of the middleware layer. Sometimes you want to do something special, and in our case you basically had to replace the whole Dispatcher to do that. Boo.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In CakePHP 3 we now have a nice stack of middleware you configure in &lt;code&gt;config/bootstrap.php&lt;/code&gt; using the &lt;code&gt;DispatcherFactory&lt;/code&gt;. Many applications have no need to modify the stack, but they can be quite handy in a pinch. For instance, what if you wanted to track the number of times certain controller/action pairs in your application are requested?&lt;/p&gt;

&lt;h2 id=&quot;metrics-tracking-via-statsd&quot;&gt;Metrics tracking via StatsD&lt;/h2&gt;

&lt;p&gt;I’m not going to get too much into StatsD, except to say it’s a way to track metrics in a time-series database software called graphite. &lt;a href=&quot;https://codeascraft.com/2011/02/15/measure-anything-measure-everything/&quot;&gt;Here&lt;/a&gt; is a blog post by Etsy covering StatsD and why it’s awesome.&lt;/p&gt;

&lt;p&gt;In our case, we’re going to send a counter to StatsD every time a controller/action pair is hit. Let’s install a library to handle talking to statsd:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;composer require league/statsd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we’ll wire up the simplest of dispatch filters. We will be tracking requests &lt;em&gt;after&lt;/em&gt; they happen, in case anything happens during the dispatch cycle that would change what would be requested:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App\Routing\Filter;

use Cake\Event\Event;
use Cake\Routing\DispatcherFilter;
use Cake\Utility\Inflector;
use League\StatsD\Client;

class StatsdFilter extends DispatcherFilter
{
    // only create the client once and
    // keep a reference to it
    protected $client;

    // these can be overriden whenever
    // we add the dispatch filter
    protected $_defaultConfig = [
        &#39;host&#39; =&amp;gt; &#39;127.0.0.1&#39;,
        &#39;port&#39; =&amp;gt; 8125,
        &#39;namespace&#39; =&amp;gt; &#39;app&#39;
    ];
    public function __construct($config = [])
    {
        // ensure configuration is set
        parent::__construct($config);

        $this-&amp;gt;client = new Client();
        $this-&amp;gt;client-&amp;gt;configure([
            &#39;host&#39; =&amp;gt; $this-&amp;gt;config(&#39;host&#39;),
            &#39;port&#39; =&amp;gt; $this-&amp;gt;config(&#39;port&#39;),
            &#39;namespace&#39; =&amp;gt; $this-&amp;gt;config(&#39;namespace&#39;),
        ]);
    }

    public function afterDispatch(Event $event)
    {
        $request = $event-&amp;gt;data[&#39;request&#39;];
        $response = $event-&amp;gt;data[&#39;response&#39;];

        // Graphite uses folders for metrics
        // We dasherize the names to keep all metrics sane-looking
        $controller = Inflector::dasherize($response-&amp;gt;params[&#39;controller&#39;]);
        $action = Inflector::dasherize($response-&amp;gt;params[&#39;action&#39;]);
        $statusCode = $response-&amp;gt;statusCode();

        // track controller/action pairs
        $statsd-&amp;gt;increment(sprintf(&#39;web.%s.%s.hit&#39;, $controller, $action));

        // track response codes for those pairs as well
        $statsd-&amp;gt;increment(sprintf(&#39;web.%s.%s.%d&#39;, $controller, $action, $statusCode));
    }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And configuring it is easy. Simply add the following to your &lt;code&gt;config/bootstrap.php&lt;/code&gt; after the &lt;code&gt;DispatcherFactory:add(&#39;ControllerFactory&#39;)&lt;/code&gt; call:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;DispatcherFactory::add(&#39;StatsdFilter&#39;, [
    &#39;host&#39; =&amp;gt; &#39;127.0.0.1&#39;,
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now you’ll be tracking metrics in StatsD!&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://book.cakephp.org/3.0/en/development/dispatch-filters.html&quot;&gt;docs on dispatch filters&lt;/a&gt; have another example - altering cache headers on certain requests - but it should be fairly easy to come up with useful ways of bending dispatch filters to your will!&lt;/p&gt;
</description>
        <pubDate>Sat, 19 Dec 2015 12:00:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2015/12/19/tracking-requests-via-dispatch-filters/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2015/12/19/tracking-requests-via-dispatch-filters/</guid>
        
        <category>cakeadvent-2015</category>
        
        <category>cakephp</category>
        
        <category>dispatch-filters</category>
        
        <category>statsd</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Managing Application Configuration</title>
        <description>&lt;p&gt;Most applications have a few custom bits of configuration. For instance, you might configure your error handler, or add some special facebook authentication key. Generally, these fall into two categories:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;configuration specific to the application (how errors are handled)&lt;/li&gt;
  &lt;li&gt;configuration specific to the environment (which key to use for a service in staging/prod)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the former, I like creating a directory structure similar to the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ ls config/
app.php
bootstrap.php
bootstrap_cli.php
bootstrap/environment.php
bootstrap/functions.php
bootstrap/functions_cli.php
bootstrap/keys.php
bootstrap/services.php
paths.php
routes.php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generally speaking, I have a &lt;code&gt;bootstrap&lt;/code&gt; folder which contains multiple php files I require from my &lt;code&gt;bootstrap.php&lt;/code&gt;. I use the &lt;code&gt;_cli&lt;/code&gt; suffix on the filename to denote cli-based configuration. I also separate the config by the type of thing I am configuring, e.g. &lt;code&gt;keys.php&lt;/code&gt; contains keys for stuff like an S3 bucket, while &lt;code&gt;services.php&lt;/code&gt; contains a list of services mapping to their &lt;code&gt;tcp&lt;/code&gt; or &lt;code&gt;udp&lt;/code&gt; urls.&lt;/p&gt;

&lt;p&gt;Sometimes I don’t &lt;em&gt;want&lt;/em&gt; to store this information in the repository. For instance, I might have a specific bit of authentication information for the Facebook application my app is communicating with, or credentials to some SFTP bucket where important documents are stored. Maybe the database credentials are sacred and I don’t want everyone on the dev team to connect directly to production. Generally speaking, I have alternatives I would use in this case so that the functionality works both locally and in production, albeit with slightly different data.&lt;/p&gt;

&lt;p&gt;In this case, I use &lt;code&gt;php-dotenv&lt;/code&gt; to configure &lt;a href=&quot;http://12factor.net/config&quot;&gt;environment variables&lt;/a&gt; for use in my application. Let’s install it in our application first:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;composer require josegonzalez/dotenv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Normally I add the following bit of code &lt;em&gt;right&lt;/em&gt; after the composer &lt;code&gt;vendor/autoload.php&lt;/code&gt; is required in my &lt;code&gt;config/bootstrap.php&lt;/code&gt;. This will affect both cli and web requests, so there isn’t a need to do it twice:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;if (!env(&#39;APP_NAME&#39;)) {
    josegonzalez\Dotenv\Loader::load([
        &#39;filepaths&#39; =&amp;gt; [
            __DIR__ . DS . &#39;.env&#39;,
            __DIR__ . DS . &#39;.env.default&#39;,
        ],
        &#39;toServer&#39; =&amp;gt; false,
        &#39;skipExisting&#39; =&amp;gt; [&#39;toServer&#39;],
        &#39;raiseExceptions&#39; =&amp;gt; false
    ]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A few things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;a href=&quot;https://github.com/josegonzalez/php-dotenv&quot;&gt;php-dotenv&lt;/a&gt; project supports being called in a &lt;a href=&quot;https://github.com/josegonzalez/php-dotenv#usage&quot;&gt;non-static way&lt;/a&gt; if you hate statics.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;.env&lt;/code&gt; files are simply a list of &lt;code&gt;export KEY=VALUE&lt;/code&gt; statements. If you know bash, you know how to use &lt;code&gt;.env&lt;/code&gt; files. There is a &lt;a href=&quot;https://github.com/josegonzalez/php-dotenv#usage&quot;&gt;primer&lt;/a&gt; in the readme.&lt;/li&gt;
  &lt;li&gt;You can load multiple &lt;code&gt;.env&lt;/code&gt; files. The first one that exists on disk will be used. This is useful if you have &lt;code&gt;gitignored&lt;/code&gt; one like I do but wish to provide a default &lt;code&gt;.env&lt;/code&gt; file&lt;/li&gt;
  &lt;li&gt;You can tell &lt;code&gt;php-dotenv&lt;/code&gt; to populate a number of variables. In this case, I am populating &lt;code&gt;$_SERVER&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;By default, exceptions are raised whenever there is an issue loading or parsing a &lt;code&gt;.env&lt;/code&gt; file. Rather than raise an expection at the bootstrap level, I just turn them off and assume the application has sane defaults. YMMV.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, when is this useful? Say I have a default database config, and I store this in my &lt;code&gt;config/.env.default&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# cakephp can read DSNs, remember?
export DATABASE_URL=&quot;mysql://user:password@localhost/database?encoding=utf8&amp;amp;timezone=UTC&amp;amp;cacheMetadata=true&amp;amp;quoteIdentifiers=false&amp;amp;persistent=false&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And I read it into my &lt;code&gt;config/app.php&lt;/code&gt; like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&#39;Datasources&#39; =&amp;gt; [
    &#39;default&#39; =&amp;gt; [
        &#39;url&#39; =&amp;gt; env(&#39;DATABASE_URL&#39;),
    ],
],
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In production, my &lt;code&gt;nginx.conf&lt;/code&gt; sets &lt;code&gt;APP_NAME&lt;/code&gt; and &lt;code&gt;DATABASE_URL&lt;/code&gt;, and therefore I don’t load the default mysql configuration. But what if I didn’t? I could create a &lt;code&gt;config/.env&lt;/code&gt; file on my server with the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;export DATABASE_URL=&quot;mysql://app:pass@some-host/app-database?encoding=utf8&amp;amp;timezone=UTC&amp;amp;cacheMetadata=true&amp;amp;quoteIdentifiers=false&amp;amp;persistent=true&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And my application would be none the wiser. What’s even &lt;em&gt;more&lt;/em&gt; awesome is that I can &lt;em&gt;also&lt;/em&gt; use this same trick to provide custom environments locally. If I have a developer who has slightly different config than the defaults, they can simply create a &lt;code&gt;config/.env&lt;/code&gt; file with their own customizations and they are off to the races!&lt;/p&gt;
</description>
        <pubDate>Fri, 18 Dec 2015 12:00:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2015/12/18/managing-application-configuration/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2015/12/18/managing-application-configuration/</guid>
        
        <category>cakeadvent-2015</category>
        
        <category>cakephp</category>
        
        <category>configuration</category>
        
        <category>environment</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>CakePHP Shells I didn&#39;t know about</title>
        <description>&lt;p&gt;Did you know there is a shell that allows you to enable a plugin after installing it via composer?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake plugin load Muffin/Trash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also load the plugin’s bootstrap or routes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# I&#39;m not releasing this, so don&#39;t try and composer require it
bin/cake plugin load --bootstrap --routes Josegonzalez/Blog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Most people installed CakePHP 3 using the &lt;a href=&quot;/2015/12/09/customizing-your-app-template/&quot;&gt;&lt;code&gt;cakephp/app&lt;/code&gt; project template&lt;/a&gt;, so you have access to both &lt;code&gt;bake&lt;/code&gt; and &lt;code&gt;migrations&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# migrate all the things!
bin/cake migrations migrate

# get a migration status
bin/cake migrations status

# bake a migration
bin/cake bake migration_snapshot Initial

# bake a form (or really anything else)
bin/cake bake form AddForm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are running migrations, it may be useful to clear the ORM’s cache so that your code is aware of the new fields:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake migrations migrate &amp;amp;&amp;amp; bin/cake orm_cache clear
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And if you are deploying code, maybe you want to ensure the cache is set &lt;em&gt;before&lt;/em&gt; the first user’s request comes in, speeding up that initial request:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake orm_cache build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’m a big fan of the &lt;code&gt;server&lt;/code&gt; shell. It allows me to quickly test an app locally without needing to setup a virtualhost or a webserver. Very useful for development, and something I recommend everyone learn to place in their arsenal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# specify a port I know won&#39;t collide with other stuff I run on my machine
bin/cake server -p 1995
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In older versions of CakePHP 3, we introduced a full REPL around &lt;a href=&quot;https://github.com/borisrepl/boris&quot;&gt;boris&lt;/a&gt;, but that has since been replaced with &lt;a href=&quot;http://psysh.org/&quot;&gt;Psysh&lt;/a&gt;. It’s actually quite nice, and lets me test out new code I’ve written in various scenarios.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# yo dawg, i hurd u liek shells, so I put a shell in your shell so you can shell while you shell!
bin/cake console
# Note: it saves your history, just like a regular shell, which is nice :)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally, something I missed from my short stint doing Ruby on Rails, being able to list routes in an application.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# list routes
bin/cake routes

# see what a url route maps to internally
bin/cake routes check /articles

# generate the url route for a key:pair setup
bin/cake routes generate controller:Articles action:view 2
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;bonus&quot;&gt;Bonus!&lt;/h2&gt;

&lt;p&gt;A shell I discovered a few weeks back is one by the ever-helpful &lt;a href=&quot;https://www.loadsys.com/&quot;&gt;Loadsys Web Strategies&lt;/a&gt; company. It lets you read into keys were loaded into configure (which is great if you have an app with several &lt;code&gt;Configure::load()&lt;/code&gt; statements and don’t know where a key might be):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# install it
composer require loadsys/cakephp-config-read:~3.0

# load it
bin/cake plugin load ConfigRead

# use it (on your debug mode)
bin/cake config_read debug

# on your application&#39;s encoding
bin/cake config_read App.encoding

# on the default database configuration
bin/cake config_read Datasources.default
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Is there a CakePHP Shell you’d like to see ported from another framework? Something you find useful or lacking? Leave a note in the comments.&lt;/p&gt;
</description>
        <pubDate>Thu, 17 Dec 2015 12:00:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2015/12/17/cakephp-shells-i-didnt-know-about/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2015/12/17/cakephp-shells-i-didnt-know-about/</guid>
        
        <category>cakeadvent-2015</category>
        
        <category>cakephp</category>
        
        <category>shells</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Custom Validation Rule Classes</title>
        <description>&lt;p&gt;I was asked yesterday if I could elaborate on my &lt;code&gt;OwnedByCurrentUser&lt;/code&gt; rule class. I’ll post it here, but also post on my process for developing rules.&lt;/p&gt;

&lt;h2 id=&quot;organization&quot;&gt;Organization&lt;/h2&gt;

&lt;p&gt;First off, I &lt;em&gt;hate&lt;/em&gt; having anonymous functions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;They are harder to test in isolation of the enclosing scope.&lt;/li&gt;
  &lt;li&gt;They make it more difficult to reason about classes because of the implicit extra scope/binding of the callable.&lt;/li&gt;
  &lt;li&gt;I think they look silly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I definitely think they have their place - configuring the CRUD Plugin is one - but normally I try to stay away from them if possible. Instead, I use &lt;a href=&quot;/2015/12/06/invoking-callable-classes/&quot;&gt;invokable callable classes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For rules, I normally place my callable classes in &lt;code&gt;src/Form/Rule&lt;/code&gt;. Here is what our initial &lt;code&gt;OwnedByCurrentUser&lt;/code&gt; rule looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App\Form\Rule;
class OwnedByCurrentUser
{
    /**
     * Performs the check
     *
     * @param mixed $value The data to validate
     * @param array $context A key value list of data that could be used as context
     * during validation. Recognized keys are:
     * - newRecord: (boolean) whether or not the data to be validated belongs to a
     *   new record
     * - data: The full data that was passed to the validation process
     * - field: The name of the field that is being processed
     * - providers: associative array with objects or class names that will
     *   be passed as the last argument for the validation method
     * @return bool
     */
    public function __invoke($value, array $context = null)
    {
    }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;filling-it-in&quot;&gt;Filling it in&lt;/h2&gt;

&lt;p&gt;When I write a rule, I’ll first write it to handle one very specific case. In this particular application, I had to ensure that a particular &lt;code&gt;Battle&lt;/code&gt; was owned by a participant in the battle before allowing them to perform certain actions. My invoke looked like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function __invoke($value, array $context = null)
{
    $table = \Cake\ORM\TableRegistry::get(&#39;Battles&#39;);
    return !!$table-&amp;gt;find()-&amp;gt;where([
      &#39;id&#39; =&amp;gt; (int)$value,
      &#39;user_id&#39; =&amp;gt; $userId,
    ])-&amp;gt;firstOrFail();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above sort of works:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It actually throws a &lt;code&gt;Cake\Datasource\Exception\RecordNotFoundException&lt;/code&gt; exception, which is incorrect for my use case, since I don’t want validation rules to throw exceptions&lt;/li&gt;
  &lt;li&gt;I wasn’t sure where I was passing in the &lt;code&gt;$userId&lt;/code&gt;. The &lt;code&gt;$context&lt;/code&gt; maybe?&lt;/li&gt;
  &lt;li&gt;I’m offloading a lot of logic into the database. What if I don’t have compound index on &lt;code&gt;id/user_id&lt;/code&gt;? That would slow down this part of the app (maybe not a concern).&lt;/li&gt;
  &lt;li&gt;There was a table where I was thinking of re-using this in the near future that used &lt;code&gt;creator_id&lt;/code&gt; instead of &lt;code&gt;user_id&lt;/code&gt; to denote who owned the record (legacy applications, am I right?). This was hardcoded to the one field, which would mean more copy-pasting. I also couldn’t modify the table that was being checked. Boo.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once I had a few tests going that brought up the above issues, I knew I had to refactor it.&lt;/p&gt;

&lt;h2 id=&quot;fixing-issues&quot;&gt;Fixing issues&lt;/h2&gt;

&lt;p&gt;I took a step back and realized I wanted to instantiate rules and then invoke them several times. This meant modifying the rule instance state, as well as passing in an initial state. First, lets add a constructor:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;protected $_alias;
protected $_userId;
protected $_fieldName;

/**
 * Performs the check
 *
 * @param string $alias Table alias
 * @param mixed $userId A string or integer denoting a user&#39;s id
 * @param string $fieldName A name to use when checking an entity&#39;s association
 * @return void
 */
public function __construct($alias, $userId, $fieldName = &#39;user_id&#39;)
{
    $this-&amp;gt;_alias = $alias;
    $this-&amp;gt;_userId = $userId;
    $this-&amp;gt;_fieldName = $fieldName;
}

public function setTable($alias)
{
    $this-&amp;gt;_alias = $alias;
}

public function setUserId($userId)
{
    $this-&amp;gt;_userId = $userId;
}

public function setFieldName($fieldName)
{
    $this-&amp;gt;_fieldName = $fieldName;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each field is a protected field - meaning I can extend this easily by subclassing - and all have setters - meaning I can reuse a rule instance if necessary. Next I needed to modify the &lt;code&gt;__invoke()&lt;/code&gt; method to use my customizations:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function __invoke($value, array $context = null)
{
    // handle the case where no userId was
    // specified or the user is logged out
    $userId = $this-&amp;gt;_userId;
    if (empty($userId)) {
        return false;
    }

    // use the Table class specified by our configured alias
    $table = \Cake\ORM\TableRegistry::get($this-&amp;gt;_alias);

    // Don&#39;t make the database do the heavy-lifting
    $entity = $table-&amp;gt;find()-&amp;gt;where([&#39;id&#39; =&amp;gt; (int)$value])-&amp;gt;first();
    if (empty($entity)) {
        return false;
    }

    // Ensure any customized field matches our userId
    return $entity-&amp;gt;get($this-&amp;gt;_fieldName) == $userId;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;wrapping-it-up&quot;&gt;Wrapping it up&lt;/h3&gt;

&lt;p&gt;From yesterday’s post, here is how the rule is invoked:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;protected function _buildValidator(Validator $validator)
{
    // use $this-&amp;gt;_user in my validation rules
    $userId = $this-&amp;gt;_user-&amp;gt;get(&#39;id&#39;);
    $validator-&amp;gt;add(&#39;id&#39;, &#39;custom&#39;, [
        &#39;rule&#39; =&amp;gt; function ($value, $context) use ($userId) {
            // reusing an invokable class
            $rule = new OwnedByCurrentUser(&#39;Battles&#39;, $userId);
            return $rule($value, $context);
        },
        &#39;message&#39; =&amp;gt; &#39;This photo isn\&#39;t yours to battle with&#39;
    ]);

    // This should also work
    $validator-&amp;gt;add(&#39;id&#39;, &#39;custom&#39;, [
        &#39;rule&#39; =&amp;gt; new OwnedByCurrentUser(&#39;Battles&#39;, $userId),
        &#39;message&#39; =&amp;gt; &#39;This photo isn\&#39;t yours to battle with&#39;
    ]);

    // As should this (and you can now re-use the rule)
    $rule = new OwnedByCurrentUser(&#39;Battles&#39;, $userId);
    $validator-&amp;gt;add(&#39;id&#39;, &#39;custom&#39;, [
        &#39;rule&#39; =&amp;gt; $rule,
        &#39;message&#39; =&amp;gt; &#39;This photo isn\&#39;t yours to battle with&#39;
    ]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;mopping-up&quot;&gt;Mopping up&lt;/h2&gt;

&lt;p&gt;When I first found out I could do this, I was quite delighted by it. Validation rules have always been a pain to test, and this was as good as it got. I now have an easy to understand class that is both easily testable and gives me increased code reuse.&lt;/p&gt;
</description>
        <pubDate>Wed, 16 Dec 2015 12:00:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2015/12/16/custom-validation-rule-classes/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2015/12/16/custom-validation-rule-classes/</guid>
        
        <category>cakeadvent-2015</category>
        
        <category>cakephp</category>
        
        <category>rules</category>
        
        <category>validation</category>
        
        
        <category>cakephp</category>
        
      </item>
    
  </channel>
</rss>
