<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jose Diaz-Gonzalez</title>
    <description>CakePHP Core Developer, Accidental Ops Guy, and Occasional Blogger</description>
    <link>http://josediazgonzalez.com/</link>
    <atom:link href="http://josediazgonzalez.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 06 Dec 2016 20:55:54 +0000</pubDate>
    <lastBuildDate>Tue, 06 Dec 2016 20:55:54 +0000</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Customizing the Posts Dashboard with CrudView</title>
        <description>&lt;p&gt;A friend of mine asked for a custom website, so here I am, writing a custom cms. I know, there are plenty of systems out there that would handle his needs, but it’s also a good excuse to play around with CakePHP 3, so here we are.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the lazy, the codebase we’ll be working on will be available on &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016&quot;&gt;GitHub&lt;/a&gt;. I will be pushing each set of changes on the date when each blog post in this series is published. No cheating!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;updating-plugins&quot;&gt;Updating Plugins&lt;/h2&gt;

&lt;p&gt;Before we continue, lets be sure we’ve updated all our plugins. I like to do this each day so that I can get any bugfixes that come out for libraries my application depends upon. In this case, there are a few bugfixes for some CakePHP plugins, so we’ll grab those with the following &lt;code&gt;composer&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;composer update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Typically you would run tests at this stage, but since we have &lt;em&gt;yet&lt;/em&gt; to write any, that isn’t necessary.&lt;/p&gt;

&lt;p&gt;Let’s commit any updates:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add composer.lock
git commit -m &quot;Update unpinned dependencies&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;You should always verify your application still works after upgrading dependencies.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;modifying-the-utility-navigation-bar&quot;&gt;Modifying the Utility Navigation Bar&lt;/h2&gt;

&lt;p&gt;The new version of CrudView that we just upgraded to has support for managing the navigation in the upper-right. I’m going to use this to add a logout button. Add the following to your &lt;code&gt;AppController::beforeFilter()&lt;/code&gt; method in the &lt;code&gt;if ($this-&amp;gt;Crud-&amp;gt;isActionMapped()) {&lt;/code&gt; section:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;Crud-&amp;gt;action()-&amp;gt;config(&#39;scaffold.utility_navigation&#39;, [
    new \CrudView\Menu\MenuItem(
        &#39;Log Out&#39;,
        [&#39;controller&#39; =&amp;gt; &#39;Users&#39;, &#39;action&#39; =&amp;gt; &#39;logout&#39;]
    )
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can use the following classes for defining a utility navigation bar:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;\CrudView\Menu\MenuDropdown&lt;/code&gt;: Can be used to setup dropdown menus&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;\CrudView\Menu\MenuDivider&lt;/code&gt;: Can be used as a separator in dropdown menus&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;\CrudView\Menu\MenuItem&lt;/code&gt;: A menu item link. Takes the same options as &lt;code&gt;HtmlHelper::link()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pretty easy way for us to customize what is being shown, and as the &lt;code&gt;MenuItem&lt;/code&gt; takes all the same options as &lt;code&gt;HtmlHelper::link()&lt;/code&gt;, it should be quite useful.&lt;/p&gt;

&lt;h2 id=&quot;modifying-the-sidebar-navigation&quot;&gt;Modifying the Sidebar Navigation&lt;/h2&gt;

&lt;p&gt;The new version of CrudView that we just upgraded to has support for managing the navigation on the sidebar. We can disable it, blacklist tables, or control the exact contents. We previously used the table blacklist, but I’m going to replace this with a completely controled sidebar. Add the following to your &lt;code&gt;AppController::beforeFilter()&lt;/code&gt; method in the &lt;code&gt;if ($this-&amp;gt;Crud-&amp;gt;isActionMapped()) {&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;Crud-&amp;gt;action()-&amp;gt;config(&#39;scaffold.sidebar_navigation&#39;, [
    new \CrudView\Menu\MenuItem(
        &#39;Posts&#39;,
        [&#39;controller&#39; =&amp;gt; &#39;Posts&#39;, &#39;action&#39; =&amp;gt; &#39;index&#39;]
    ),
    new \CrudView\Menu\MenuItem(
        &#39;Profile&#39;,
        [&#39;controller&#39; =&amp;gt; &#39;Users&#39;, &#39;action&#39; =&amp;gt; &#39;edit&#39;]
    ),
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can use the following classes for defining a utility navigation bar:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;\CrudView\Menu\MenuDivider&lt;/code&gt;: Can be used as a separator in dropdown menus&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;\CrudView\Menu\MenuItem&lt;/code&gt;: A menu item link. Takes the same options as &lt;code&gt;HtmlHelper::link()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A useful addition would be a &lt;code&gt;MenuList&lt;/code&gt;, so we can have groups of sidebar items, though for now this is good enough.&lt;/p&gt;

&lt;h2 id=&quot;customizing-posts-fields&quot;&gt;Customizing &lt;code&gt;/posts&lt;/code&gt; fields&lt;/h2&gt;

&lt;p&gt;If you look at the existing &lt;code&gt;/posts&lt;/code&gt; page, you’ll see there are quite a few fields there that we might not want. Ideally, the following is shown:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;id&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;title&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;status&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;published_date&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;actions list&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Looking at the list, we’re missing the following fields from our &lt;code&gt;posts&lt;/code&gt; table:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;title&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;published_date&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can add those pretty easily via the migrations plugin. I ran the following to add the fields:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake bake migration add_admin_field_to_posts title:string published_date:datetime
bin/cake migrations migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Simple enough. Now we’ll scope the fields being shown to just those that we want. Rather than adding a bunch of custom callbacks directly to our &lt;code&gt;PostsController&lt;/code&gt;, lets create a &lt;code&gt;PostsListener&lt;/code&gt; in &lt;code&gt;src/Listener/PostsListener.php&lt;/code&gt;. Here is mine, with the changes needed to scope our &lt;code&gt;/posts&lt;/code&gt; page:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App\Listener;

use Cake\Event\Event;
use Crud\Listener\BaseListener;

/**
 * Posts Listener
 */
class PostsListener extends BaseListener
{
    /**
     * Callbacks definition
     *
     * @return array
     */
    public function implementedEvents()
    {
        return [
            &#39;Crud.beforeHandle&#39; =&amp;gt; &#39;beforeHandle&#39;,
        ];
    }

    /**
     * Before Handle
     *
     * @param \Cake\Event\Event $event Event
     * @return void
     */
    public function beforeHandle(Event $event)
    {
        if ($this-&amp;gt;_controller()-&amp;gt;request-&amp;gt;action === &#39;index&#39;) {
            $this-&amp;gt;beforeHandleIndex($event);

            return;
        }
    }

    /**
     * Before Handle Index Action
     *
     * @param \Cake\Event\Event $event Event
     * @return void
     */
    public function beforeHandleIndex(Event $event)
    {
        $this-&amp;gt;_action()-&amp;gt;config(&#39;scaffold.fields&#39;, [
            &#39;id&#39;,
            &#39;title&#39;,
            &#39;status&#39;,
            &#39;published_date&#39;,
        ]);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we need to load it in our &lt;code&gt;PostsController::initialize()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;Crud-&amp;gt;addListener(&#39;Users&#39;, &#39;App\Listener\PostsListener&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty neat.&lt;/p&gt;

&lt;h2 id=&quot;modifying-field-output-using-formatters&quot;&gt;Modifying field output using formatters&lt;/h2&gt;

&lt;p&gt;One cool thing about CrudView is that we can specify how we want fields to look like on templates by using custom formatters. Rather than show the status as just text, I’m going to switch it to use a bootstrap label depending upon the content of the text.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;_action()-&amp;gt;config(&#39;scaffold.fields&#39;, [
    &#39;id&#39;,
    &#39;title&#39;,
    &#39;status&#39; =&amp;gt; [
      &#39;formatter&#39; =&amp;gt; function ($name, $value, $entity) {
          $type = $value == &#39;active&#39; ? &#39;success&#39; : &#39;default&#39;;
          return sprintf(&#39;&amp;lt;span class=&quot;label label-%s&quot;&amp;gt;%s&amp;lt;/span&amp;gt;&#39;, $type, $value);
      },
    ],
    &#39;published_date&#39;,
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/12/06/dope-admin-customizations.png&quot; alt=&quot;dope admin panel&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can also use an element as a &lt;code&gt;formatter&lt;/code&gt;, though please refer to the documentation on CrudView for further details.&lt;/p&gt;

&lt;p&gt;Lets save where we are for now.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add config/Migrations/20161206204729_AddAdminFieldToPosts.php config/Migrations/schema-dump-default.lock src/Controller/AppController.php src/Controller/PostsController.php src/Listener/PostsListener.php
git commit -m &quot;Updated /posts dashboard&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;For those that may just want to ensure their codebase matches what has been done so far, the codebase is available on GitHub and tagged as &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016/tree/0.0.6&quot;&gt;0.0.6&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We now have a reasonable looking &lt;code&gt;/posts&lt;/code&gt; page with a few lines of code. Super Dope! Our next job is to work on the possibility of having different post types, how to model them in code, and how they relate to our database structure.&lt;/p&gt;

&lt;p&gt;Be sure to follow along via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2016 CakeAdvent Calendar. Come back tomorrow for more delicious content.&lt;/p&gt;

</description>
        <pubDate>Tue, 06 Dec 2016 11:28:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/12/06/customizing-the-posts-crudview-dashboard/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/12/06/customizing-the-posts-crudview-dashboard/</guid>
        
        <category>crud</category>
        
        <category>navigation</category>
        
        <category>cakeadvent-2016</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Preparing our Posts Admin</title>
        <description>&lt;p&gt;A friend of mine asked for a custom website, so here I am, writing a custom cms. I know, there are plenty of systems out there that would handle his needs, but it’s also a good excuse to play around with CakePHP 3, so here we are.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the lazy, the codebase we’ll be working on will be available on &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016&quot;&gt;GitHub&lt;/a&gt;. I will be pushing each set of changes on the date when each blog post in this series is published. No cheating!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;aliasing--to-postscontrollerhome&quot;&gt;Aliasing / to &lt;code&gt;PostsController::home&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;In the previous blog post, we decided to alias the &lt;code&gt;/&lt;/code&gt; route to the &lt;code&gt;PostsController::index()&lt;/code&gt; action. Since we still need that action for the admin dashboard, lets make a new action called &lt;code&gt;home&lt;/code&gt; and use &lt;em&gt;that&lt;/em&gt; as the alias. We’ll start by modifying the &lt;code&gt;config/routes.php&lt;/code&gt; file, and setting the default route to the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$routes-&amp;gt;connect(&#39;/&#39;, [&#39;controller&#39; =&amp;gt; &#39;Posts&#39;, &#39;action&#39; =&amp;gt; &#39;home&#39;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we need to map that action in our controller to something real. Instead of defining a &lt;code&gt;home&lt;/code&gt; action, for now I’m just going to add an extra mapping of &lt;code&gt;home&lt;/code&gt; to the &lt;code&gt;Crud.Index&lt;/code&gt; action. We’ll use a new &lt;code&gt;PostsController::initialize()&lt;/code&gt; method to handle this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    /**
     * Initialization hook method.
     *
     * Use this method to add common initialization code like loading components.
     *
     * e.g. `$this-&amp;gt;loadComponent(&#39;Security&#39;);`
     *
     * @return void
     */
    public function initialize()
    {
        parent::initialize();
        $this-&amp;gt;Crud-&amp;gt;mapAction(&#39;home&#39;, &#39;Crud.Index&#39;);
        $this-&amp;gt;Auth-&amp;gt;allow([&#39;home&#39;]);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we’ll want to set the proper template for the action. Copy the file &lt;code&gt;src/Template/Posts/index.ctp&lt;/code&gt; to &lt;code&gt;src/Template/Posts/home.ctp&lt;/code&gt;. We can decide what to display here later.&lt;/p&gt;

&lt;p&gt;Once thats done, commit your changes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git config/routes.php src/Controller/PostsController.php src/Template/Posts/home.ctp
git commit -m &quot;Move / route to /posts/home&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;crudview&quot;&gt;CrudView&lt;/h2&gt;

&lt;p&gt;This entire time, we’ve been leaning on the generated bake templates to decide what we want to show users. A powerful alternative to this is the &lt;code&gt;CrudView&lt;/code&gt; plugin. &lt;code&gt;CrudView&lt;/code&gt; is a counterpart to the &lt;code&gt;Crud&lt;/code&gt; plugin in that it allows you to autogenerate views for actions contained in that plugin. It’s pretty radical.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;While we &lt;em&gt;have&lt;/em&gt; edited our &lt;code&gt;Users/edit.ctp&lt;/code&gt; template, we haven’t spent too much time there, so I think we can afford to drop our existing work.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To start off, lets enable &lt;code&gt;CrudView&lt;/code&gt; for our PostsController. We’ll do so by modifying our &lt;code&gt;AppController&lt;/code&gt; to enable &lt;code&gt;CrudView&lt;/code&gt; whenever we are in a current admin action. Start by adding the following property to your &lt;code&gt;AppController&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    /**
     * A list of actions where the CrudView.View
     * listener should be enabled. If an action is
     * in this list but `isAdmin` is false, the
     * action will still be rendered via CrudView.View
     *
     * @var array
     */
    protected $adminActions = [];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In &lt;code&gt;AppController::initialize()&lt;/code&gt;, there is a check on &lt;code&gt;$this-&amp;gt;isAdmin&lt;/code&gt; when states whether or not we can enable the &lt;code&gt;CrudView&lt;/code&gt; listener. We’ll modify that to take our &lt;code&gt;adminActions&lt;/code&gt; property into account.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;if ($this-&amp;gt;isAdmin || in_array($this-&amp;gt;request-&amp;gt;action, $this-&amp;gt;adminActions)) {
    $this-&amp;gt;Crud-&amp;gt;addListener(&#39;CrudView.View&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ll also need to modify the &lt;code&gt;$isAdmin&lt;/code&gt; variable in our &lt;code&gt;AppController::beforeFilter()&lt;/code&gt; to take this into account.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$isAdmin = $this-&amp;gt;isAdmin || in_array($this-&amp;gt;request-&amp;gt;action, $this-&amp;gt;adminActions);
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;The above changes aren’t necessary in later versions of josegonzalez/app - certainly not after 1.4.8. They are here in case you have an older version of the app skeleton.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now that we have some of the groundwork laid out, we need to actually specify the &lt;code&gt;adminActions&lt;/code&gt; property in our &lt;code&gt;PostsController&lt;/code&gt;. I’ve set it to allow almost all crud-actions, except for the &lt;code&gt;view&lt;/code&gt; action, which doesn’t make sense for my admin panel.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    /**
     * A list of actions where the CrudView.View
     * listener should be enabled. If an action is
     * in this list but `isAdmin` is false, the
     * action will still be rendered via CrudView.View
     *
     * @var array
     */
    protected $adminActions = [&#39;index&#39;, &#39;add&#39;, &#39;edit&#39;, &#39;delete&#39;];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we’ll need to allow access to these actions. Our admin panel won’t be very useful if we can’t see whats going on. I’ve also helpfully added the &lt;code&gt;delete&lt;/code&gt; action, because we’ll probably want to delete posts. Add the following to your &lt;code&gt;PostsController&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    /**
     * Check if the provided user is authorized for the request.
     *
     * @param array|\ArrayAccess|null $user The user to check the authorization of.
     *   If empty the user fetched from storage will be used.
     * @return bool True if $user is authorized, otherwise false
     */
    public function isAuthorized($user = null)
    {
        $action = $this-&amp;gt;request-&amp;gt;param(&#39;action&#39;);
        if (in_array($action, $this-&amp;gt;adminActions) || $action == &#39;delete&#39;) {
            return true;
        }
        return parent::isAuthorized($user);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And last but not least, lets remove all the baked &lt;code&gt;Posts&lt;/code&gt; templates.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;rm src/Template/Posts/index.ctp src/Template/Posts/add.ctp src/Template/Posts/edit.ctp src/Template/Posts/view.ctp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you go to the &lt;code&gt;/posts&lt;/code&gt; url now, you’ll get a view similar to the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/12/05/generated-posts-admin.png&quot; alt=&quot;workinggenerated posts admin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pretty sweet. It doesn’t match our &lt;code&gt;/users/edit&lt;/code&gt; page - or really anything else - but we’ll work on that later. For now, lets clean up that sidebar. We’ll add the following logic to our &lt;code&gt;AppController::beforeFilter()&lt;/code&gt; method, in the block that checks on whether the crud action is mapped or not.:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;Crud-&amp;gt;action()-&amp;gt;config(&#39;scaffold.tables_blacklist&#39;, [
    &#39;phinxlog&#39;,
    &#39;muffin_tokenize_phinxlog&#39;,
    &#39;post_attributes&#39;,
    &#39;tokenize_tokens&#39;,
    &#39;users&#39;,
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;For now, we won’t have a link to the &lt;code&gt;/users/edit&lt;/code&gt; page, but in the near future, it’ll hopefully be possible to both add arbitary links to the sidebar as well as arbitrary links to the top navigation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We have the beginnings of our admin dashboard, using CrudView. Let’s save that up:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Controller/AppController.php src/Controller/PostsController.php src/Template/Posts/add.ctp src/Template/Posts/edit.ctp src/Template/Posts/index.ctp src/Template/Posts/view.ctp
git commit -m &quot;CrudView now handles /posts admin panels&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;For those that may just want to ensure their codebase matches what has been done so far, the codebase is available on GitHub and tagged as &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016/tree/0.0.5&quot;&gt;0.0.5&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This was a short post, but we actually did quite a bit of work. We now have a programmatic admin dashboard that can be melded to our use case in future posts. It’s been a long week, and our CMS is starting to take shape. Tomorrow we’ll look at modifying what exactly is shown on our &lt;code&gt;/posts&lt;/code&gt; dashboard, and make sure our database tables line up with our needs.&lt;/p&gt;

&lt;p&gt;Be sure to follow along via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2016 CakeAdvent Calendar. Come back tomorrow for more delicious content.&lt;/p&gt;

</description>
        <pubDate>Mon, 05 Dec 2016 02:00:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/12/05/preparing-our-posts-admin/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/12/05/preparing-our-posts-admin/</guid>
        
        <category>admin</category>
        
        <category>crud</category>
        
        <category>routing</category>
        
        <category>cakeadvent-2016</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>File Uploading and Account Management</title>
        <description>&lt;p&gt;A friend of mine asked for a custom website, so here I am, writing a custom cms. I know, there are plenty of systems out there that would handle his needs, but it’s also a good excuse to play around with CakePHP 3, so here we are.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the lazy, the codebase we’ll be working on will be available on &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016&quot;&gt;GitHub&lt;/a&gt;. I will be pushing each set of changes on the date when each blog post in this series is published. No cheating!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;managing-a-users-account&quot;&gt;Managing a User’s account&lt;/h2&gt;

&lt;p&gt;Now that we can login, we’ll probably want to be able to update our profile &lt;em&gt;without&lt;/em&gt; needing to go through the reset password flow. For that, we’ll need a account page. I’d also love to be able to personalize the account so that the user will feel at home in his CMS, so we’ll allow them to upload a custom image as well. We’ll start on account management first. First, lets start by making the &lt;code&gt;UsersController::edit()&lt;/code&gt; action open to all authenticated users by modifying our &lt;code&gt;UsersController::isAuthorized()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    /**
     * Check if the provided user is authorized for the request.
     *
     * @param array|\ArrayAccess|null $user The user to check the authorization of.
     *   If empty the user fetched from storage will be used.
     * @return bool True if $user is authorized, otherwise false
     */
    public function isAuthorized($user = null)
    {
        if (in_array($this-&amp;gt;request-&amp;gt;param(&#39;action&#39;), [&#39;edit&#39;, &#39;logout&#39;])) {
            return true;
        }
        return parent::isAuthorized($user);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, lets go to the &lt;code&gt;/users/edit&lt;/code&gt; page in our browser. You should get a &lt;code&gt;NotFoundException&lt;/code&gt;. This is because the &lt;code&gt;UsersController::edit()&lt;/code&gt; action is currently mapped to the &lt;code&gt;Crud.Edit&lt;/code&gt; action class in your &lt;code&gt;AppController::initialize()&lt;/code&gt;, and that action class expects a user id to be passed in. We can fix that and force the edit page to &lt;em&gt;always&lt;/em&gt; map to the currently logged in user by handling the &lt;code&gt;beforeHandle&lt;/code&gt; Crud event in our &lt;code&gt;UsersListener&lt;/code&gt;. First, lets add the following to the list of events handled in our &lt;code&gt;UsersListener::implementedEvents()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&#39;Crud.beforeHandle&#39; =&amp;gt; &#39;beforeHandle&#39;,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we’ll need to implement the &lt;code&gt;UsersListener::beforeHandle()&lt;/code&gt; method. As the &lt;code&gt;beforeHandle&lt;/code&gt; event occurs for &lt;em&gt;all&lt;/em&gt; executed Crud actions, we’ll need to take extra care to only set the action arguments when the current action is the &lt;code&gt;edit&lt;/code&gt; action.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    /**
     * Before Handle
     *
     * @param \Cake\Event\Event $event Event
     * @return void
     */
    public function beforeHandle(Event $event)
    {
        if ($event-&amp;gt;subject-&amp;gt;action === &#39;edit&#39;) {
            $this-&amp;gt;beforeHandleEdit($event);

            return;
        }
    }

    /**
     * Before Handle Edit Action
     *
     * @param \Cake\Event\Event $event Event
     * @return void
     */
    public function beforeHandleEdit(Event $event)
    {
        $userId = $this-&amp;gt;_controller()-&amp;gt;Auth-&amp;gt;user(&#39;id&#39;);
        $event-&amp;gt;subject-&amp;gt;args = [$userId];
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Browse to the &lt;code&gt;/users/edit&lt;/code&gt; page now and you’ll see a lovely form with our current user’s information filled out. Yay! Unfortunately, it leaks the existing password, which isn’t great. Honestly, I think we should clean up this form a bit:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The password field should not have the pre-hashed password set&lt;/li&gt;
  &lt;li&gt;The password field should only be changed when the password is confirmed&lt;/li&gt;
  &lt;li&gt;The &lt;code&gt;avatar_dir&lt;/code&gt; field shouldn’t be shown on the form&lt;/li&gt;
  &lt;li&gt;The &lt;code&gt;avatar&lt;/code&gt; field is actually a form upload.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s take care of the first three tasks. We’ll start by adding an event handler to remove the hashed &lt;code&gt;password&lt;/code&gt; during the &lt;code&gt;Crud.beforeRender&lt;/code&gt; event. Add the following to your &lt;code&gt;UsersListener::implementedEvents()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&#39;Crud.beforeRender&#39; =&amp;gt; &#39;beforeRender&#39;,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we’ll handle the event in the same &lt;code&gt;UsersListener&lt;/code&gt; class and unset the &lt;code&gt;password&lt;/code&gt; property on the Crud-produced entity:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    /**
     * Before Render
     *
     * @param \Cake\Event\Event $event Event
     * @return void
     */
    public function beforeRender(Event $event)
    {
        if ($this-&amp;gt;_controller()-&amp;gt;request-&amp;gt;action === &#39;edit&#39;) {
            $this-&amp;gt;beforeRenderEdit($event);

            return;
        }
    }

    /**
     * Before Render Edit Action
     *
     * @param \Cake\Event\Event $event Event
     * @return void
     */
    public function beforeRenderEdit(Event $event)
    {
        $event-&amp;gt;subject-&amp;gt;entity-&amp;gt;unsetProperty(&#39;password&#39;);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you refresh the &lt;code&gt;/users/edit&lt;/code&gt; page, you should see that the hashed password was removed. Now that this is set, we’ll need tomodify the edit form. We previously baked this on the first day of development, so you should have a &lt;code&gt;src/Template/Users/edit.ctp&lt;/code&gt; file. We’ll edit the form section to show the following for now (ignore the sidebar section!):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;div class=&quot;users form large-9 medium-8 columns content&quot;&amp;gt;
    &amp;lt;?= $this-&amp;gt;Form-&amp;gt;create($user) ?&amp;gt;
    &amp;lt;fieldset&amp;gt;
        &amp;lt;legend&amp;gt;&amp;lt;?= __(&#39;Edit User&#39;) ?&amp;gt;&amp;lt;/legend&amp;gt;
        &amp;lt;?php
            echo $this-&amp;gt;Form-&amp;gt;input(&#39;email&#39;);
            echo $this-&amp;gt;Form-&amp;gt;input(&#39;password&#39;, [&#39;required&#39; =&amp;gt; false]);
            echo $this-&amp;gt;Form-&amp;gt;input(&#39;confirm_password&#39;);
            echo $this-&amp;gt;Form-&amp;gt;input(&#39;avatar&#39;);
        ?&amp;gt;
    &amp;lt;/fieldset&amp;gt;
    &amp;lt;?= $this-&amp;gt;Form-&amp;gt;button(__(&#39;Submit&#39;)) ?&amp;gt;
    &amp;lt;?= $this-&amp;gt;Form-&amp;gt;end() ?&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above adds a &lt;code&gt;confirm_password&lt;/code&gt; field and also removes the &lt;code&gt;avatar_dir&lt;/code&gt; field. Finally, add password confirmation, and only save the updated password if it matches the &lt;code&gt;confirm_password&lt;/code&gt; field &lt;em&gt;and&lt;/em&gt; both have a value. We’ll create a custom validation method - validationAccount - to handle this. Place the following within a trait at &lt;code&gt;src/Model/Table/Traits/AccountValidationTrait.php&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App\Model\Table\Traits;

use Cake\Validation\Validator;

trait AccountValidationTrait
{
    /**
     * Account validation rules.
     *
     * @param \Cake\Validation\Validator $validator Validator instance.
     * @return \Cake\Validation\Validator
     */
    public function validationAccount(Validator $validator)
    {
        $validator = $this-&amp;gt;validationDefault($validator);
        $validator-&amp;gt;remove(&#39;password&#39;);
        $validator-&amp;gt;allowEmpty(&#39;confirm_password&#39;);
        $validator-&amp;gt;add(&#39;confirm_password&#39;, &#39;no-misspelling&#39;, [
            &#39;rule&#39; =&amp;gt; [&#39;compareWith&#39;, &#39;password&#39;],
            &#39;message&#39; =&amp;gt; &#39;Passwords are not equal&#39;,
        ]);
        return $validator;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;I really love traits. Sorry not sorry?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this custom validation rule, we inherit from the default rules - defined in the &lt;code&gt;UsersTable::validationDefault()&lt;/code&gt; method - remove the rules that require a &lt;code&gt;password&lt;/code&gt; to be set, and add a rule that requires the &lt;code&gt;password&lt;/code&gt; and &lt;code&gt;confirm_password&lt;/code&gt; fields to match.&lt;/p&gt;

&lt;p&gt;Next, we’ll need to add the proper &lt;code&gt;use&lt;/code&gt; statement to the &lt;em&gt;inside&lt;/em&gt; of our &lt;code&gt;UsersTable&lt;/code&gt; class.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;use \App\Model\Table\Traits\AccountValidationTrait;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To ensure that our custom validation method is actually invoked, we’ll need to modify the &lt;code&gt;UsersListener::beforeHandleEdit()&lt;/code&gt; to tell the &lt;code&gt;Edit&lt;/code&gt; action class to use it. Here is what I added to that method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;_controller()-&amp;gt;Crud-&amp;gt;action()-&amp;gt;saveOptions([&#39;validate&#39; =&amp;gt; &#39;account&#39;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One thing to note is that we never want to update the password when no password has been set. The &lt;code&gt;Edit&lt;/code&gt; action class doesn’t currently provide an event to directly edit event data, but we still have two options:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If no &lt;code&gt;password&lt;/code&gt;/&lt;code&gt;confirm_password&lt;/code&gt; is set at the time of the &lt;code&gt;beforeHandle&lt;/code&gt; event, we can just unset it from the request.&lt;/li&gt;
  &lt;li&gt;If no &lt;code&gt;password&lt;/code&gt;/&lt;code&gt;confirm_password&lt;/code&gt; is set at the time of the &lt;code&gt;beforeSave&lt;/code&gt; event, we can mark the &lt;code&gt;password&lt;/code&gt; field as not dirty, and it won’t be overwritten.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I prefer the latter, because I don’t like screwing around with the incoming request data. Where you perform the scrubbing is up to you. If you do as I do, you’ll have to check if &lt;code&gt;confirm_password&lt;/code&gt; is empty instead of &lt;code&gt;password&lt;/code&gt;. This is because at the &lt;code&gt;beforeSave&lt;/code&gt; event, the data has already been set upon the entity, and an empty string has been hashed by the &lt;code&gt;User::_setPassword()&lt;/code&gt; method. The &lt;code&gt;confirm_password&lt;/code&gt; field will only be empty if both are empty, otherwise we wouldn’t even have gotten to the save phase.&lt;/p&gt;

&lt;p&gt;I’ll add the following to handle my event to &lt;code&gt;UsersListener::implementedEvents()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&#39;Crud.beforeSave&#39; =&amp;gt; &#39;beforeSave&#39;,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here are the methods to add to the &lt;code&gt;UsersListener&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    /**
     * Before Save
     *
     * @param \Cake\Event\Event $event Event
     * @return void
     */
    public function beforeSave(Event $event)
    {
        if ($this-&amp;gt;_controller()-&amp;gt;request-&amp;gt;action === &#39;edit&#39;) {
            $this-&amp;gt;beforeSaveEdit($event);

            return;
        }
    }

    /**
     * Before Render Edit Action
     *
     * @param \Cake\Event\Event $event Event
     * @return void
     */
    public function beforeSaveEdit(Event $event)
    {
        if ($event-&amp;gt;subject-&amp;gt;entity-&amp;gt;confirm_password === &#39;&#39;) {
            $event-&amp;gt;subject-&amp;gt;entity-&amp;gt;unsetProperty(&#39;password&#39;);
            $event-&amp;gt;subject-&amp;gt;entity-&amp;gt;dirty(&#39;password&#39;, false);
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Woot! Very close. If you try to submit the form now, you will probably get a validation error - if your browser even lets you submit. Why? The &lt;code&gt;avatar&lt;/code&gt; field is empty. Even though we’ve set it to allow &lt;code&gt;null&lt;/code&gt; values, we need to remove the validation rules surrounding them in our &lt;code&gt;UsersTable::validationDefault()&lt;/code&gt; method. Remove the rules regarding &lt;code&gt;avatar&lt;/code&gt; and &lt;code&gt;avatar_dir&lt;/code&gt;, and you should be off to the races.&lt;/p&gt;

&lt;p&gt;Let’s save our position now.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Controller/UsersController.php src/Listener/UsersListener.php src/Model/Table/Traits/AccountValidationTrait.php src/Model/Table/UsersTable.php src/Template/Users/edit.ctp
git commit -m &quot;Implement initial account management, including password changing&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;setting-an-image-avatar&quot;&gt;Setting an image avatar&lt;/h2&gt;

&lt;p&gt;While image uploading isn’t baked into cake - &lt;em&gt;lol&lt;/em&gt; - by default, I’ve included my Upload plugin with the composer app skeleton we used to create the &lt;code&gt;calico&lt;/code&gt; app. If you don’t have it installed, you’ll want to install it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# install the plugin
composer require josegonzalez/cakephp-upload

# load it in your app
bin/cake plugin load Josegonzalez/Upload
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;You are welcome and encouraged to try other plugins that might better suit your needs. I wrote mine and like mine, but maybe you prefer a different one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next, we’ll need to modify our &lt;code&gt;UsersTable::initialize()&lt;/code&gt; method to add the behavior for our &lt;code&gt;avatar&lt;/code&gt; and &lt;code&gt;avatar_dir&lt;/code&gt; fields:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;addBehavior(&#39;Josegonzalez/Upload.Upload&#39;, [
    &#39;avatar&#39; =&amp;gt; [
        &#39;fields&#39; =&amp;gt; [
            &#39;dir&#39; =&amp;gt; &#39;avatar_dir&#39;,
        ],
    ],
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we’ll need to modify our form to show the correct input type for the &lt;code&gt;avatar&lt;/code&gt; field. I’m also going to conditionally show the avatar on the page so we know what it looks like when it has been uploaded. This is what the form section of the &lt;code&gt;edit.ctp&lt;/code&gt; should look like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;div class=&quot;users form large-9 medium-8 columns content&quot;&amp;gt;
    &amp;lt;?= $this-&amp;gt;Form-&amp;gt;create($user, [&#39;type&#39; =&amp;gt; &#39;file&#39;]) ?&amp;gt;
    &amp;lt;fieldset&amp;gt;
        &amp;lt;legend&amp;gt;&amp;lt;?= __(&#39;Edit User&#39;) ?&amp;gt;&amp;lt;/legend&amp;gt;
        &amp;lt;?php
            echo $this-&amp;gt;Form-&amp;gt;input(&#39;email&#39;);
            echo $this-&amp;gt;Form-&amp;gt;input(&#39;password&#39;, [&#39;required&#39; =&amp;gt; false]);
            echo $this-&amp;gt;Form-&amp;gt;input(&#39;confirm_password&#39;);
            echo $this-&amp;gt;Form-&amp;gt;input(&#39;avatar&#39;, [&#39;type&#39; =&amp;gt; &#39;file&#39;]);
            if (!empty($user-&amp;gt;avatar)) {
                $imageUrl = &#39;../&#39; . preg_replace(&quot;/^webroot/&quot;, &quot;&quot;, $user-&amp;gt;avatar_dir) . &#39;/&#39; . $user-&amp;gt;avatar;
                echo $this-&amp;gt;Html-&amp;gt;image($imageUrl, [
                    &#39;height&#39; =&amp;gt; &#39;100&#39;,
                    &#39;width&#39; =&amp;gt; &#39;100&#39;,
                ]);
            }
        ?&amp;gt;
    &amp;lt;/fieldset&amp;gt;
    &amp;lt;?= $this-&amp;gt;Form-&amp;gt;button(__(&#39;Submit&#39;)) ?&amp;gt;
    &amp;lt;?= $this-&amp;gt;Form-&amp;gt;end() ?&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you try it out now, you should get a working image upload. Here is what the form looks like for me after an avatar upload:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/12/04/working-image-upload.png&quot; alt=&quot;working image upload&quot; /&gt;&lt;/p&gt;

&lt;p&gt;My cat looks handsome, doesn’t she?&lt;/p&gt;

&lt;p&gt;Before closing out image uploads, we’ll want to ignore the &lt;code&gt;webroot/files&lt;/code&gt; directory in our &lt;code&gt;.gitignore&lt;/code&gt;. If we do not, we’ll end up accidentally committing uploaded files. Please ensure the following line is in your &lt;code&gt;.gitignore&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/webroot/files
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lets commit all our changes as well.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add .gitignore src/Model/Table/UsersTable.php src/Template/Users/edit.ctp
git commit -m &quot;Enable avatar uploads&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;validating-image-uploads&quot;&gt;Validating image uploads&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;The following are only &lt;em&gt;some&lt;/em&gt; of the things you can do to validate that images uploaded are, in fact, images. I would recommend you also:&lt;br /&gt;
- resize the images to remove extra metadata that you may not wish to show&lt;br /&gt;
- only display images that have been sanitized&lt;br /&gt;
- use the &lt;a href=&quot;http://cloudinary.com/blog/how_to_detect_and_prevent_malware_infected_user_uploads&quot;&gt;metascan&lt;/a&gt; tool to verify the validity of uploads before referencing them on your site.&lt;br /&gt;
This list is also by no means exhaustive, and as security is an important subject, I defer to the experts. Please keep this in mind!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before allowing just &lt;em&gt;any&lt;/em&gt; file uploads, lets be sure that they are indeed images. I’d also like to ensure we’re not allowing a save to occur when the image upload fails for whatever reason. This will ensure we surface the errors to the users before the UploadBehavior gets to it. The following should be added to your &lt;code&gt;AccountValidationTrait::validationAccount()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$validator-&amp;gt;allowEmpty(&#39;avatar&#39;);
$validator-&amp;gt;add(&#39;avatar&#39;, &#39;valid-image&#39;, [
    &#39;rule&#39; =&amp;gt; [&#39;uploadedFile&#39;, [
        &#39;types&#39; =&amp;gt; [
            &#39;image/bmp&#39;,
            &#39;image/gif&#39;,
            &#39;image/jpeg&#39;,
            &#39;image/pjpeg&#39;,
            &#39;image/png&#39;,
            &#39;image/vnd.microsoft.icon&#39;,
            &#39;image/x-windows-bmp&#39;,
            &#39;image/x-icon&#39;,
            &#39;image/x-png&#39;,
        ],
        &#39;optional&#39; =&amp;gt; true,
    ]],
    &#39;message&#39; =&amp;gt; &#39;The uploaded avatar was not a valid image&#39;
]);
$validator-&amp;gt;add(&#39;avatar&#39;, &#39;not-upload-error&#39;, [
    &#39;rule&#39; =&amp;gt; [&#39;uploadError&#39;, true],
    &#39;message&#39; =&amp;gt; &#39;There was an error uploading your avatar&#39;,
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;We’re allowing the avatar field to be empty. If you don’t do this, you’re going to see errors when saving the form without an uploaded avatar.&lt;/li&gt;
  &lt;li&gt;We’re only allowing valid images to be uploaded. Hell, our user can even upload an icon as his avatar if they want.&lt;/li&gt;
  &lt;li&gt;We want to make sure that there are no upload errors. Note that &lt;em&gt;not&lt;/em&gt; uploading a file should not be considered an error. PHP will report it as such, and if we want to allow no files to be uploaded, we have to pass &lt;code&gt;true&lt;/code&gt; as the first option to the &lt;code&gt;uploadError&lt;/code&gt; rule.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The above validation rules are included with CakePHP, but you can &lt;em&gt;also&lt;/em&gt; use custom rules - such as file and image size limiting - that are available from the Upload plugin. Documentation for that is available &lt;a href=&quot;https://cakephp-upload.readthedocs.io/en/latest/validation.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now that we’ve validated our image uploads, lets save our changes to the git repository.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Model/Table/Traits/AccountValidationTrait.php
git commit -m &quot;Ensure avatar uploads are actually images&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;For those that may just want to ensure their codebase matches what has been done so far, the codebase is available on GitHub and tagged as &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016/tree/0.0.4&quot;&gt;0.0.4&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Our app now has proper image uploading and account management. We’ve learned a few new tricks regarding the Crud plugin event system, added advanced validation rules for managing our account, and even showed off our avatar on the form. I think we’re more or less done with account management for now. Tomorrow, we’ll get into the nitty-gritty of our blog internals, beginning with the initial stages of our posts admin panel.&lt;/p&gt;

&lt;p&gt;Be sure to follow along via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2016 CakeAdvent Calendar. Come back tomorrow for more delicious content.&lt;/p&gt;
</description>
        <pubDate>Sun, 04 Dec 2016 01:35:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/12/04/file-uploading-and-account-management/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/12/04/file-uploading-and-account-management/</guid>
        
        <category>files</category>
        
        <category>user-accounts</category>
        
        <category>upload</category>
        
        <category>cakeadvent-2016</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Password Resets and Email</title>
        <description>&lt;p&gt;A friend of mine asked for a custom website, so here I am, writing a custom cms. I know, there are plenty of systems out there that would handle his needs, but it’s also a good excuse to play around with CakePHP 3, so here we are.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the lazy, the codebase we’ll be working on will be available on &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016&quot;&gt;GitHub&lt;/a&gt;. I will be pushing each set of changes on the date when each blog post in this series is published. No cheating!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;errata-from-last-post&quot;&gt;Errata from last post&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;I fixed a few typos in executing the &lt;code&gt;users&lt;/code&gt; shell. Specifically, the &lt;code&gt;username-field&lt;/code&gt; flag should have a value of &lt;code&gt;email&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;In CakePHP 3.x, you no longer specify &lt;code&gt;admin =&amp;gt; true|false&lt;/code&gt; when configuring the &lt;code&gt;AuthComponent&lt;/code&gt;. It should be &lt;code&gt;prefix =&amp;gt; false|PREFIX_NAME&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The preferred method of retrieving values from the request object is not &lt;code&gt;ArrayAccess&lt;/code&gt;, but via a method. You should use &lt;code&gt;$this-&amp;gt;request-&amp;gt;param(&#39;field&#39;)&lt;/code&gt; instead of the array-method.&lt;/li&gt;
  &lt;li&gt;I’ve removed the type-hint on &lt;code&gt;AppController::isAuthorized()&lt;/code&gt; and &lt;code&gt;UsersController::isAuthorized()&lt;/code&gt;. The docblock states that they can also accept &lt;code&gt;ArrayAccess&lt;/code&gt;, so &lt;code&gt;array&lt;/code&gt; as a type-hint was inappropriate. In the recently released PHP 7.1, you can instead use &lt;code&gt;iterable&lt;/code&gt; as a type-hint.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code&gt;config/bootstrap.php&lt;/code&gt; file is missing the &lt;code&gt;Plugin::load(&#39;CrudUsers&#39;);&lt;/code&gt; statement. You can add it manually or using the cli tool as follows:&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake plugin load CrudUsers
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks to those who’ve pointed out my derps. These fixes are available as the first commit in the current release.&lt;/p&gt;

&lt;h2 id=&quot;updating-plugins&quot;&gt;Updating Plugins&lt;/h2&gt;

&lt;p&gt;Before we continue, lets be sure we’ve updated all our plugins. I like to do this each day so that I can get any bugfixes that come out for libraries my application depends upon. In this case, there are a few bugfixes for some CakePHP plugins, so we’ll grab those with the following &lt;code&gt;composer&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;composer update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Typically you would run tests at this stage, but since we have &lt;em&gt;yet&lt;/em&gt; to write any, that isn’t necessary.&lt;/p&gt;

&lt;p&gt;Let’s commit any updates:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add composer.lock
git commit -m &quot;Update patch-level for all plugins&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;You should always verify your application still works after upgrading dependencies.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;reset-password-flow&quot;&gt;Reset Password Flow&lt;/h2&gt;

&lt;p&gt;First, we need a reset password flow.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This workflow is vulnerable to email enumeration. Keep this in mind when implementing this in your application. You might want to look into some sort of rate-limiting for the &lt;code&gt;/users/forgot-password&lt;/code&gt; endpoint…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images/ditaa/ditaa-923bcc9bcd42f601ba22a85fc9f3d7ea.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Seems pretty reasonable. We will start be hooking up the appropriate crud actions for this.&lt;/p&gt;

&lt;h2 id=&quot;enabling-the-crud-actions&quot;&gt;Enabling the Crud Actions&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Using Crud actions is going to become more or less second nature in this app. Get used to it?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Add the following three lines to your &lt;code&gt;UsersController::initialize()&lt;/code&gt; method. This will map the &lt;code&gt;forgotPassword&lt;/code&gt;, &lt;code&gt;resetPassword&lt;/code&gt;, and &lt;code&gt;verify&lt;/code&gt; actions, as well as allow anonymous access to each.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;Crud-&amp;gt;mapAction(&#39;forgotPassword&#39;, &#39;CrudUsers.ForgotPassword&#39;);
$this-&amp;gt;Crud-&amp;gt;mapAction(&#39;resetPassword&#39;, [
    &#39;className&#39; =&amp;gt; &#39;CrudUsers.ResetPassword&#39;,
    &#39;findMethod&#39; =&amp;gt; &#39;token&#39;,
]);
$this-&amp;gt;Crud-&amp;gt;mapAction(&#39;verify&#39;, [
    &#39;className&#39; =&amp;gt; &#39;CrudUsers.Verify&#39;,
    &#39;findMethod&#39; =&amp;gt; &#39;token&#39;,
]);
$this-&amp;gt;Auth-&amp;gt;allow([&#39;forgotPassword&#39;, &#39;resetPassword&#39;, &#39;verify&#39;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These three actions require the following fields for usage:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;token&lt;/code&gt;: A string field storing a reset token.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;verified&lt;/code&gt;: A boolean database field.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;adding-the-verified-field&quot;&gt;Adding the &lt;code&gt;verified&lt;/code&gt; field&lt;/h3&gt;

&lt;p&gt;To get the verified field, we’ll create a migration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake bake migration add_verified_field_to_users verified:boolean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once generated, you’ll want to set the &lt;code&gt;verified&lt;/code&gt; field default to either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. I set mine to &lt;code&gt;true&lt;/code&gt;, because we’ll only ever have a single verified user in this blog.&lt;/p&gt;

&lt;p&gt;And now we can run it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake migrations migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;adding-the-token-field&quot;&gt;Adding the &lt;code&gt;token&lt;/code&gt; field&lt;/h3&gt;

&lt;p&gt;To add the token field, we &lt;em&gt;could&lt;/em&gt; generate a migration and run it, but then we’d have to worry about generating tokens themselves. The &lt;code&gt;CrudUsers.ForgotPassword&lt;/code&gt; action class &lt;em&gt;does not generate tokens&lt;/em&gt;. I’d rather not have to deal with that logic, so we’ll lean on &lt;em&gt;yet another plugin&lt;/em&gt;, the &lt;code&gt;Muffin/Tokenize&lt;/code&gt; plugin.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Doesn’t it seem like I love plugins? In truth, I just am very lazy, so I lean on them heavily. Write once, use forever.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Lets install it first:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;composer require muffin/tokenize
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we’ll need to enable it and run it’s migrations:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# enable the plugin (with routes and bootstrapping)
bin/cake plugin load Muffin/Tokenize --bootstrap --routes

# run migrations
bin/cake migrations migrate --plugin Muffin/Tokenize
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Muffin/Tokenize&lt;/code&gt; plugin doesn’t actually store tokens in the &lt;code&gt;users&lt;/code&gt; table. It creates a separate table and stores them there. For our next act, we’ll be actually sending the email and properly verifying that the user exists. Let’s save our progress for now.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add composer.json composer.lock config/Migrations/* config/bootstrap.php src/Controller/UsersController.php
git commit -m &quot;Initial setup for password reset flow&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;event-listeners-and-mailers&quot;&gt;Event Listeners and Mailers&lt;/h2&gt;

&lt;p&gt;In order to actually trigger email sending, we’re going to create a few classes and traits. Specifically, we need to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Be able to properly retrieve tokens from our related table&lt;/li&gt;
  &lt;li&gt;Ensure we send emails&lt;/li&gt;
  &lt;li&gt;Verify tokens correctly&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;finding-muffin-tokens&quot;&gt;Finding muffin tokens&lt;/h3&gt;

&lt;p&gt;First things first, we’ll need to be able to lookup a token. To do so, we’ll need to add the &lt;code&gt;Muffin/Tokenize.Tokenize&lt;/code&gt; behavior to our &lt;code&gt;UsersTable::initialize()&lt;/code&gt; method, located in &lt;code&gt;src/Model/Table/UsersTable.php&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;addBehavior(&#39;Muffin/Tokenize.Tokenize&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that the behavior is loaded, we have setup a relation from the &lt;code&gt;UsersTable&lt;/code&gt; to the &lt;code&gt;TokensTable&lt;/code&gt; from the &lt;code&gt;Muffin/Tokenize&lt;/code&gt; plugin. We’ll also need a custom &lt;code&gt;find&lt;/code&gt; method to bind that in.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Find methods are functions that describe how to query a table for entities. You can chain multiple find methods together to create new, more powerful finds. The built-in finds are &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, and &lt;code&gt;threaded&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I personally like placing finds in traits, so that on the off-chance I need to use them elsewhere, I can. It also allows me to test the finds in isolation of any customizations performed in &lt;code&gt;Table&lt;/code&gt; classes. The following should go in &lt;code&gt;src/Table/Traits/TokenFinderTrait.php&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App\Model\Table\Traits;

trait TokenFinderTrait
{
    /**
     * Find user based on token
     *
     * @param \Cake\ORM\Query $query The query to find with
     * @param array $options The options to find with
     * @return \Cake\ORM\Query The query builder
     */
    public function findToken($query, $options)
    {
        return $this-&amp;gt;find()-&amp;gt;matching(&#39;Tokens&#39;, function ($q) use ($options) {
            return $q-&amp;gt;where([&#39;Tokens.token&#39; =&amp;gt; $options[&#39;token&#39;]]);
        });
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will retrieve a user that is associated with a given token. In order to use this trait, you’ll need to add the following &lt;em&gt;inside&lt;/em&gt; the &lt;code&gt;UsersTable&lt;/code&gt; class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;use \App\Model\Table\Traits\TokenFinderTrait;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can commit this small change now:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Model/Table/UsersTable.php src/Model/Table/Traits/TokenFinderTrait.php
git commit -m &quot;Enable finding reset tokens&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;event-listeners&quot;&gt;Event Listeners&lt;/h3&gt;

&lt;p&gt;Halfway there. The &lt;code&gt;CrudUsers.ForgotPassword&lt;/code&gt; action class uses the &lt;code&gt;afterForgotPassword&lt;/code&gt; event to do the heavy lifting of notifying users of a password reset. We’ll need to handle it in our own event listener. You can do this via either a callable class - boo, hiss, hard to test - or via a nice Listener class. I’m going to do the latter, because it is cleaner. Add the following to &lt;code&gt;src/Listener/UsersListener.php&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App\Listener;

use Cake\Event\Event;
use Cake\Mailer\MailerAwareTrait;
use Cake\ORM\TableRegistry;
use Crud\Listener\BaseListener;

/**
 * Users Listener
 */
class UsersListener extends BaseListener
{
    use MailerAwareTrait;

    /**
     * Default config for this object.
     *
     * @var array
     */
    protected $_defaultConfig = [
        &#39;mailer&#39; =&amp;gt; &#39;Users.User&#39;,
    ];

    /**
     * Callbacks definition
     *
     * @return array
     */
    public function implementedEvents()
    {
        return [
            &#39;Crud.afterForgotPassword&#39; =&amp;gt; &#39;afterForgotPassword&#39;,
        ];
    }

    /**
     * After Forgot Password
     *
     * @param \Cake\Event\Event $event Event
     * @return void
     */
    public function afterForgotPassword(Event $event)
    {
        if (!$event-&amp;gt;subject-&amp;gt;success) {
            return;
        }

        $table = TableRegistry::get($this-&amp;gt;_controller()-&amp;gt;modelClass);
        $token = $table-&amp;gt;tokenize($event-&amp;gt;subject-&amp;gt;entity-&amp;gt;id);

        if ($this-&amp;gt;config(&#39;mailer&#39;)) {
            $this-&amp;gt;getMailer($this-&amp;gt;config(&#39;mailer&#39;))-&amp;gt;send(&#39;forgotPassword&#39;, [
                $event-&amp;gt;subject-&amp;gt;entity-&amp;gt;toArray(),
                $token,
            ]);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a basic &lt;a href=&quot;http://book.cakephp.org/3.0/en/core-libraries/events.html#registering-listeners&quot;&gt;event listener&lt;/a&gt;. We define a list of &lt;code&gt;implementedEvents&lt;/code&gt;, map them to functions, and have our event logic in those functions. In this case, we’re using Crud internals to automatically get stuff like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The current controller’s model&lt;/li&gt;
  &lt;li&gt;Ensure we implement a listener in the form that Crud wants (which is merely a bit of sugar on top of a regular CakePHP event listener)&lt;/li&gt;
  &lt;li&gt;Get and set custom configuration.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One thing you’ll notice is that we’ve added the &lt;code&gt;MailerAwareTrait&lt;/code&gt;. This trait is used to enable usage of CakePHP &lt;code&gt;Mailers&lt;/code&gt;, which are classes that store reusable email configuration. They are new in CakePHP 3.1, and while it’s certainly not how I used to write emails, I’ve come to appreciate them.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It’s classes and traits all the way down! How do I keep track of all of these things? It’s mostly practice, as you can certainly do without most of this, but the separation allows us to cleanly refactor bits and pieces of code, as well as test individual pieces of logic.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In our listener, we’ve specified the &lt;code&gt;UserMailer&lt;/code&gt;, which lives in &lt;code&gt;src/Mailer/UserMailer.php&lt;/code&gt;. We are using &lt;code&gt;forgotPassword&lt;/code&gt; method of that mailer to send our email. If you’ve ever sent an email in CakePHP, you’ll be right at home. If not, it’s a pretty easy read. Below is the contents of that class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App\Mailer;

use Cake\Mailer\Mailer;

class UserMailer extends Mailer
{
    /**
     * Email sent on password recovery requests
     *
     * @param array $user User information, must includer email and username
     * @param string $token Token used for validation
     * @return \Cake\Mailer\Mailer
     */
    public function forgotPassword($user, $token)
    {
        return $this-&amp;gt;to($user[&#39;email&#39;])
            -&amp;gt;subject(&#39;Reset your password&#39;)
            -&amp;gt;template(&#39;forgot_password&#39;)
            -&amp;gt;layout(false)
            -&amp;gt;set([
                &#39;token&#39; =&amp;gt; $token,
            ])
            -&amp;gt;emailFormat(&#39;html&#39;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have our listener and mailer setup, so now all we have to do is attach it to Crud and test it out. To begin, add the following line to your &lt;code&gt;UsersController&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;Crud-&amp;gt;addListener(&#39;Users&#39;, &#39;App\Listener\UsersListener&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we’ll need &lt;code&gt;html&lt;/code&gt; and &lt;code&gt;text&lt;/code&gt; templates for sending out these emails. The following are what I use in &lt;code&gt;src/Template/Email/html/forgot_password.ctp&lt;/code&gt; and &lt;code&gt;src/Template/Email/text/forgot_password.ctp&lt;/code&gt; (in that order):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
use Cake\Routing\Router;
$url = Router::url(
    [
        &#39;controller&#39; =&amp;gt; &#39;users&#39;,
        &#39;action&#39; =&amp;gt; &#39;verify&#39;,
        $token
    ],
    true
);
?&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;?= $this-&amp;gt;fetch(&#39;title&#39;) ?&amp;gt;&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;?= $this-&amp;gt;fetch(&#39;content&#39;) ?&amp;gt;
    &amp;lt;h1&amp;gt;Set your password...&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;
        A password recovery link has been requested for your account. If you
        haven&#39;t requested this, please ignore this email.
    &amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;
        &amp;lt;?= $this-&amp;gt;Html-&amp;gt;link(&#39;Click here to reset your password&#39;, $url) ?&amp;gt;
    &amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
use Cake\Routing\Router;
$url = Router::url(
    [
        &#39;controller&#39; =&amp;gt; &#39;users&#39;,
        &#39;action&#39; =&amp;gt; &#39;verify&#39;,
        $token
    ],
    true
);
?&amp;gt;

A password recovery link has been requested for your account. If you haven&#39;t requested this, please ignore this email.

Click here to reset your password: &amp;lt;?= $url ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we’ll need a &lt;code&gt;forgotPassword&lt;/code&gt; template, which should go in &lt;code&gt;src/Template/Users/forgot_password.ctp&lt;/code&gt;. This will be used to present the forgot password form to our users.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;div class=&quot;users form&quot;&amp;gt;
&amp;lt;?= $this-&amp;gt;Flash-&amp;gt;render(&#39;auth&#39;) ?&amp;gt;
    &amp;lt;?= $this-&amp;gt;Form-&amp;gt;create() ?&amp;gt;
    &amp;lt;fieldset&amp;gt;
        &amp;lt;legend&amp;gt;&amp;lt;?= __(&#39;Please enter your email to send a reset email&#39;) ?&amp;gt;&amp;lt;/legend&amp;gt;
        &amp;lt;?= $this-&amp;gt;Form-&amp;gt;input(&#39;email&#39;) ?&amp;gt;
    &amp;lt;/fieldset&amp;gt;
    &amp;lt;?= $this-&amp;gt;Form-&amp;gt;button(__(&#39;Reset password&#39;)); ?&amp;gt;
    &amp;lt;?= $this-&amp;gt;Form-&amp;gt;end() ?&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since we’re in a good place regarding the “forgot password” step, lets save our progress.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Controller/UsersController.php src/Listener/UsersListener.php src/Mailer/UserMailer.php src/Template/Email/html/forgot_password.ctp src/Template/Email/text/forgot_password.ctp src/Template/Users/forgot_password.ctp
git commit -m &quot;Implement forgot-password phase&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;verifying-tokens&quot;&gt;Verifying Tokens&lt;/h3&gt;

&lt;p&gt;Once we are capable of sending emails, we’ll want to verify that the token being sent in the email is both a token we know about and is valid. The &lt;code&gt;ResetPassword&lt;/code&gt; action class does this by emitting a &lt;code&gt;verifyToken&lt;/code&gt; event, which we can listen to in our &lt;code&gt;UsersListener&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tokens are a one-time use deal, and the &lt;code&gt;Muffin/Tokenize&lt;/code&gt; plugin expires them in three days (configurable!).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We’ll need to first tell the listener that we have an implementation of the event handler by adding the following entry to the array our &lt;code&gt;UsersListener::implementedEvents()&lt;/code&gt; returns:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&#39;Crud.verifyToken&#39; =&amp;gt; &#39;verifyToken&#39;,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now for the implementation, we’ll want to call into the &lt;code&gt;Muffin/Tokenize&lt;/code&gt; plugin and just call &lt;code&gt;verify()&lt;/code&gt; on the token like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    /**
     * Before Verify
     *
     * @param \Cake\Event\Event $event Event
     * @return void
     */
    public function verifyToken(Event $event)
    {
        $event-&amp;gt;subject-&amp;gt;verified = TableRegistry::get(&#39;Muffin/Tokenize.Tokens&#39;)
            -&amp;gt;verify($event-&amp;gt;subject-&amp;gt;token);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also need the &lt;code&gt;reset_password&lt;/code&gt; template. Place the following in &lt;code&gt;src/Template/Users/reset_password.ctp&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;div class=&quot;users form&quot;&amp;gt;
&amp;lt;?= $this-&amp;gt;Flash-&amp;gt;render(&#39;auth&#39;) ?&amp;gt;
    &amp;lt;?= $this-&amp;gt;Form-&amp;gt;create() ?&amp;gt;
    &amp;lt;fieldset&amp;gt;
        &amp;lt;legend&amp;gt;&amp;lt;?= __(&#39;Enter a new password to reset your account&#39;) ?&amp;gt;&amp;lt;/legend&amp;gt;
        &amp;lt;?= $this-&amp;gt;Form-&amp;gt;input(&#39;password&#39;) ?&amp;gt;
    &amp;lt;/fieldset&amp;gt;
    &amp;lt;?= $this-&amp;gt;Form-&amp;gt;button(__(&#39;Signin&#39;)) ?&amp;gt;
    &amp;lt;?= $this-&amp;gt;Form-&amp;gt;end() ?&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s it, that’s all! Lets commit it!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Listener/UsersListener.php src/Template/Users/reset_password.ctp
git commit -m &quot;Verify user tokens&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;testing-the-whole-flow&quot;&gt;Testing the Whole Flow&lt;/h3&gt;

&lt;p&gt;In order to send email, we’ll need to configure a transport properly. You can do this in your &lt;code&gt;config/.env&lt;/code&gt; file, by changing the &lt;code&gt;EMAIL_TRANSPORT_DEFAULT_URL&lt;/code&gt; value to the desired configuration. I personally set mine to match my gmail credentials for now, though you’ll likely want to use something a bit more bulletproof. I’m not sure yet what we’ll use once we get to deploying this, but we’ll cross that bridge when we need to. Here is what I set mine to (minus a valid &lt;code&gt;username:password&lt;/code&gt; combination):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;export EMAIL_TRANSPORT_DEFAULT_URL=&quot;smtp://username:password@smtp.gmail.com:587/?client=null&amp;amp;timeout=30&amp;amp;tls=true&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, lets test sending this email. Browse to &lt;code&gt;/users/forgot-password&lt;/code&gt;, enter in the email address you set for your user earlier, submit the form, and check your email. If everything was configured properly - it was for me! - you’ll see an email like the following in your inbox:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/12/03/reset-password-email.png&quot; alt=&quot;reset password email&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Yes, my email avatar is a cat with a kermit hat. Deal with it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This seems good so far. Click on the link to be taken to the following page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/12/03/reset-password-page.png&quot; alt=&quot;reset password page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And fill in your new password to reset your account.&lt;/p&gt;

&lt;p&gt;Seems legit!&lt;/p&gt;

&lt;h2 id=&quot;default-landing-page&quot;&gt;Default landing page&lt;/h2&gt;

&lt;p&gt;You’ll notice that once you reset your password, you were redirected to the login page. If you try and login, you’ll land right back on the login page with two messages, one saying you are logged in, and one saying you do not have access. This is because we have made the app such that all controller/action pairs &lt;em&gt;must&lt;/em&gt; be individually allowed. Lets fix that and at least allow a landing page.&lt;/p&gt;

&lt;p&gt;For now, our landing page will be the list of blog posts. We’ll need to first ensure that &lt;code&gt;/&lt;/code&gt; points at &lt;code&gt;PostsController::index()&lt;/code&gt;. This is done by editing our application’s routes in &lt;code&gt;config/routes.php&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Routes are how CakePHP knows what an incoming url points to in the application. A common use for changing routing is to add vanity urls. You can do all sorts of funny stuff with routes, as well see in later posts. CakePHP has some sane defaults that make it easy for developers to get started, which is why our &lt;code&gt;/users/login&lt;/code&gt;, &lt;code&gt;/users/forgot-password&lt;/code&gt;, etc. urls all worked out of the box.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The default route should currently be as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$routes-&amp;gt;connect(&#39;/&#39;, [&#39;controller&#39; =&amp;gt; &#39;Pages&#39;, &#39;action&#39; =&amp;gt; &#39;display&#39;, &#39;home&#39;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’re going to update it to the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$routes-&amp;gt;connect(&#39;/&#39;, [&#39;controller&#39; =&amp;gt; &#39;Posts&#39;, &#39;action&#39; =&amp;gt; &#39;index&#39;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, lets allow access to this action in our &lt;code&gt;PostsController&lt;/code&gt;. We’ll need a custom &lt;code&gt;PostsController::initialize()&lt;/code&gt;. Here is what you should add to the &lt;code&gt;PostsController&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    /**
     * Initialization hook method.
     *
     * Use this method to add common initialization code like loading components.
     *
     * e.g. `$this-&amp;gt;loadComponent(&#39;Security&#39;);`
     *
     * @return void
     */
    public function initialize()
    {
        parent::initialize();
        $this-&amp;gt;Auth-&amp;gt;allow([&#39;index&#39;]);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Why wouldn’t we have an &lt;code&gt;PostsController::isAuthorized()&lt;/code&gt;? That method applies only to already logged in users. Anonymous users would never be able to access the page, regardless of what you return from &lt;code&gt;isAuthorized()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You should now be able to access &lt;code&gt;/&lt;/code&gt;, both before and after logging in. Let’s commit what we have and end for today.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add config/routes.php src/Controller/PostsController.php
git commit -m &quot;Allow logged in and anonymous access to an initial / route&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;For those that may just want to ensure their codebase matches what has been done so far, the codebase is available on GitHub and tagged as &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016/tree/0.0.3&quot;&gt;0.0.3&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hurray, we have some authentication configured for our application, are sending emails, have figured out how to customize Crud for our usage, and even have a landing page. Tomorrow we’ll work on allowing the blog user to edit their account, and potentially even get to image uploading.&lt;/p&gt;

&lt;p&gt;Be sure to follow along via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2016 CakeAdvent Calendar. Come back tomorrow for more delicious content.&lt;/p&gt;
</description>
        <pubDate>Sat, 03 Dec 2016 01:40:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/12/03/password-resets-and-email/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/12/03/password-resets-and-email/</guid>
        
        <category>passwords</category>
        
        <category>email</category>
        
        <category>cakeadvent-2016</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>User Authentication in CakePHP</title>
        <description>&lt;p&gt;A friend of mine asked for a custom website, so here I am, writing a custom cms. I know, there are plenty of systems out there that would handle his needs, but it’s also a good excuse to play around with CakePHP 3, so here we are.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the lazy, the codebase we’ll be working on will be available on &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016&quot;&gt;GitHub&lt;/a&gt;. I will be pushing each set of changes on the date when each blog post in this series is published. No cheating!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;requiring-user-authentication&quot;&gt;Requiring User Authentication&lt;/h2&gt;

&lt;p&gt;First, we’ll start by locking everything down. I’m going to centralize all my auth-related loading code in &lt;code&gt;AppController::loadAuthComponent()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    /**
     * Configures the AuthComponent
     *
     * @return void
     */
    protected function loadAuthComponent()
    {
        $this-&amp;gt;loadComponent(&#39;Auth&#39;, [
            &#39;authorize&#39; =&amp;gt; [&#39;Controller&#39;],
            &#39;loginAction&#39; =&amp;gt; [
                &#39;plugin&#39; =&amp;gt; null,
                &#39;prefix&#39; =&amp;gt; false,
                &#39;controller&#39; =&amp;gt; &#39;Users&#39;,
                &#39;action&#39; =&amp;gt; &#39;login&#39;
            ],
            &#39;loginRedirect&#39; =&amp;gt; &#39;/&#39;,
            &#39;logoutRedirect&#39; =&amp;gt; &#39;/&#39;,
            &#39;authenticate&#39; =&amp;gt; [
                &#39;all&#39; =&amp;gt; [
                    &#39;fields&#39; =&amp;gt; [&#39;username&#39; =&amp;gt; &#39;email&#39;, &#39;password&#39; =&amp;gt; &#39;password&#39;],
                ],
                &#39;Form&#39;,
            ]
        ]);
   }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ll walk through this a bit at a time:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Components are behavioral modifiers for Controllers. They are useful for adding logic around the request/dispatch cycle. The alternative is to use PSR-7 middleware, but as the migration to PSR-7 is currently underway, we’ll be using this method for now.&lt;/li&gt;
  &lt;li&gt;You can load a component using &lt;code&gt;Controller::loadComponent()&lt;/code&gt;. The first argument is the component alias, and the second is an array of options for that component. This class loading pattern is pretty much the same all over CakePHP. You can also alias a component if you wish, by setting the &lt;code&gt;className&lt;/code&gt; option to your specific class.&lt;/li&gt;
  &lt;li&gt;Authentication in CakePHP is controlled via the &lt;code&gt;AuthComponent&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;We’ve set a few options that should be pretty straightforward.
    &lt;ul&gt;
      &lt;li&gt;The &lt;code&gt;authorize&lt;/code&gt; key is used to specify the authorization method. This will allow us to approve or deny access to a particular plugin/controller/action set. The &lt;code&gt;Controller&lt;/code&gt; method lets us use a special &lt;code&gt;isAuthorized(array $user)&lt;/code&gt; method to check if a user has access to an action.&lt;/li&gt;
      &lt;li&gt;One thing that may need explanation is the &lt;code&gt;authenticate&lt;/code&gt; option. It allows us to specify &lt;code&gt;Authenticate&lt;/code&gt; classes that can be used to, well, “authenticate” a user. The most common class in use is the &lt;code&gt;Form&lt;/code&gt; class, which enables form-based authorization. You must specify a class in order to enable that authorization method. I’ve also specified an &lt;code&gt;all&lt;/code&gt; key whose options are inherited by the other classes.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m going to call this method from my &lt;code&gt;AppController::initialize()&lt;/code&gt;, right before loading any other components. As we’ve setup &lt;code&gt;Controller&lt;/code&gt;-based authorization, our &lt;code&gt;AppController&lt;/code&gt; will need an &lt;code&gt;isAuthorized(array $user)&lt;/code&gt; method. Here is mine (I’m blocking access to everything):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    /**
     * Check if the provided user is authorized for the request.
     *
     * @param array|\ArrayAccess|null $user The user to check the authorization of.
     *   If empty the user fetched from storage will be used.
     * @return bool True if $user is authorized, otherwise false
     */
    public function isAuthorized($user = null)
    {
        return false;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also need to make a &lt;em&gt;very&lt;/em&gt; small addition to our &lt;code&gt;User&lt;/code&gt; Entity class, located in &lt;code&gt;src/Model/Entity/User.php&lt;/code&gt;. The &lt;code&gt;User&lt;/code&gt; entity needs to have a custom password setter that will automatically hash a password on save. This is important for when we create users in our database. Why? Because it would be a real shame to store passwords in plain-text in the database. Lets create a Trait to hold this logic. Add the following to &lt;code&gt;src/Model/Entity/PasswordHashingTrait.php&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App\Model\Entity;

use Cake\Auth\DefaultPasswordHasher;

trait PasswordHashingTrait
{
    protected function _setPassword($password)
    {
        return (new DefaultPasswordHasher)-&amp;gt;hash($password);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;What is a Trait? Traits are little snippets of code that allow you to reuse logic across classes. Think of them as little mix-ins that you can use to make a Cat quack like a Duck. See the &lt;a href=&quot;https://secure.php.net/manual/en/language.oop5.traits.php&quot;&gt;PHP documentation&lt;/a&gt; for more details.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now add this trait to your &lt;code&gt;User&lt;/code&gt; Entity class. To do so, add the following &lt;em&gt;inside&lt;/em&gt; the class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;use \App\Model\Entity\PasswordHashingTrait;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will tell PHP to include the &lt;code&gt;PasswordHashingTrait&lt;/code&gt; inside of our User Entity, giving it the ability to automatically hash passwords. Neat.&lt;/p&gt;

&lt;p&gt;Once that’s done, we’ll need the actual login/logout methods, but for now, lets commit these changes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Controller/AppController.php src/Model/Entity/PasswordHashingTrait.php src/Model/Entity/User.php
git commit -m &quot;Configure the AuthComponent and automatically hash passwords&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;creating-a-user&quot;&gt;Creating a User&lt;/h2&gt;

&lt;p&gt;We’ll need to create a user in our database. This is pretty boring, so I just created a shell to do it. Here is my shell (it goes in &lt;code&gt;src/Shell/UserShell.php&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App\Shell;

use Cake\Console\Shell;
use Cake\ORM\TableRegistry;
use Cake\Utility\Inflector;

/**
 * User shell command.
 */
class UserShell extends Shell
{

    /**
     * main() method.
     *
     * @return bool|int Success or error code.
     */
    public function main()
    {
        $data = [];
        $fields = [
            $this-&amp;gt;params[&#39;username-field&#39;],
            $this-&amp;gt;params[&#39;password-field&#39;]
        ];
        foreach ($fields as $field) {
            $value = null;
            $fieldName = Inflector::humanize($field);
            while (empty($value)) {
                $value = $this-&amp;gt;in(sprintf(&#39;%s?&#39;, $fieldName));
            }
            $data[$field] = $value;
        }

        $this-&amp;gt;out(&#39;&#39;);
        $continue = $this-&amp;gt;in(&#39;Continue?&#39;, [&#39;y&#39;, &#39;n&#39;], &#39;n&#39;);
        if ($continue !== &#39;y&#39;) {
            return $this-&amp;gt;error(&#39;User not saved.&#39;);
        }
        $this-&amp;gt;out(&#39;&#39;);
        $this-&amp;gt;hr();

        $table = TableRegistry::get($this-&amp;gt;params[&#39;table&#39;]);
        $entity = $table-&amp;gt;newEntity($data, [&#39;validate&#39; =&amp;gt; false]);
        if (!$table-&amp;gt;save($entity)) {
            return $this-&amp;gt;error(sprintf(&#39;User could not be inserted: %s&#39;, print_r($entity-&amp;gt;errors(), true)));
        }
        $this-&amp;gt;out(sprintf(&#39;User inserted! ID: %d, Data: %s&#39;, $entity-&amp;gt;id, print_r($entity-&amp;gt;toArray(), true)));
    }


    /**
     * UserShell
     *
     * @return ConsoleOptionParser
     */
    public function getOptionParser()
    {
        $parser = parent::getOptionParser();
        $parser-&amp;gt;description(&#39;The User shell can create a user on the fly for local development.&#39;);

        $parser-&amp;gt;addOption(&#39;table&#39;, [
            &#39;short&#39; =&amp;gt; &#39;t&#39;,
            &#39;help&#39; =&amp;gt; &#39;Name of Table class (with plugin prefix) to use to create a user&#39;,
            &#39;default&#39; =&amp;gt; &#39;Users&#39;,
        ]);
        $parser-&amp;gt;addOption(&#39;username-field&#39;, [
            &#39;short&#39; =&amp;gt; &#39;u&#39;,
            &#39;help&#39; =&amp;gt; &#39;Name of username field&#39;,
            &#39;default&#39; =&amp;gt; &#39;username&#39;,
        ]);
        $parser-&amp;gt;addOption(&#39;password-field&#39;, [
            &#39;short&#39; =&amp;gt; &#39;p&#39;,
            &#39;help&#39; =&amp;gt; &#39;Name of password field&#39;,
            &#39;default&#39; =&amp;gt; &#39;password&#39;,
        ]);
        return $parser;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;LOTS OF CODE! A few notes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;This might be familiar to anyone who has seen any of my other blog posts.&lt;/li&gt;
  &lt;li&gt;This is an interactive shell that will ask you two questions - Username/Password - and create the User for you.&lt;/li&gt;
  &lt;li&gt;We’ve exposed a few ways of customizing the shell usage, including modifying the table, username-field, and password-field. You might even wish to further customize it to give automatic values for these fields.&lt;/li&gt;
  &lt;li&gt;I’m not validating the data, and will assume it’s good.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can run this shell - and answer the questions - via the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake user --username-field email
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you’ll get an error. Why? Because you cannot save &lt;code&gt;null&lt;/code&gt; to the &lt;code&gt;avatar&lt;/code&gt; and &lt;code&gt;avatar_dir&lt;/code&gt; fields. Poo. Lets fix that by creating a migration. First, lets generate a scaffold for the migration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake bake migration alter_users avatar:string? avatar_dir:string?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ll need to change the migration slightly to accommodate for the fact that the fields already exist. You can do this by changing &lt;code&gt;addColumn&lt;/code&gt; to &lt;code&gt;changeColumn&lt;/code&gt; in the generated migration file. Once thats done, lets run the migration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake migrations migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now run the &lt;code&gt;users&lt;/code&gt; shell:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake user --username-field email
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you run it again with the same options, you’ll see it happily inserts the same email address &lt;em&gt;again&lt;/em&gt;. Boo. Delete that record however you wish, but lets create a migration to ensure that doesn’t happen again:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake bake migration unique_users
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The contents of the &lt;code&gt;change&lt;/code&gt; method should be as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    /**
     * Change Method.
     *
     * More information on this method is available here:
     * http://docs.phinx.org/en/latest/migrations.html#the-change-method
     * @return void
     */
    public function change()
    {
        $table = $this-&amp;gt;table(&#39;users&#39;);
        $table-&amp;gt;removeIndex([
            &#39;email&#39;,
        ], [
            &#39;name&#39; =&amp;gt; &#39;BY_EMAIL&#39;,
            &#39;unique&#39; =&amp;gt; false,
        ]);
        $table-&amp;gt;addIndex([
            &#39;email&#39;,
        ], [
            &#39;name&#39; =&amp;gt; &#39;UNIQUE_EMAIL&#39;,
            &#39;unique&#39; =&amp;gt; true,
        ]);
        $table-&amp;gt;update();
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now run the migration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake migrations migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And our &lt;code&gt;users&lt;/code&gt; table should be set. Lets commit our changes before we get lost:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add config/Migrations/* src/Shell/UserShell.php
git commit -m &quot;Allow user creation via shell and fix our users table&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;login-and-logout&quot;&gt;Login and Logout&lt;/h2&gt;

&lt;p&gt;A given controller is made up of a collection of actions. Normally, you’d add the following to your controller to enable login/logout functionality in your app:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    public function login()
    {
        if ($this-&amp;gt;request-&amp;gt;is(&#39;post&#39;)) {
            $user = $this-&amp;gt;Auth-&amp;gt;identify();
            if ($user) {
                $this-&amp;gt;Auth-&amp;gt;setUser($user);
                return $this-&amp;gt;redirect($this-&amp;gt;Auth-&amp;gt;redirectUrl());
            }
            $this-&amp;gt;Flash-&amp;gt;error(__(&#39;Invalid username or password, try again&#39;));
        }
    }

    public function logout()
    {
        return $this-&amp;gt;redirect($this-&amp;gt;Auth-&amp;gt;logout());
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;The above is copied verbatim from the &lt;a href=&quot;http://book.cakephp.org/&quot;&gt;CakePHP book&lt;/a&gt;, an excellent source for all things CakePHP.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You’re totally welcome to do that, but I’m not going to because I’m even lazier than that and cannot be arsed to copy the code. Remember how I said Crud has “action” classes that we can reuse across your application? Lets lean on it here and install the &lt;code&gt;CrudUsers&lt;/code&gt; plugin.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;composer require friendsofcake/crud-users
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;CrudUsers&lt;/code&gt; plugin has action classes for various user-related functionality, including a &lt;code&gt;LoginAction&lt;/code&gt; and  &lt;code&gt;LogoutAction&lt;/code&gt;. These can be “mapped” to action names using &lt;code&gt;CrudComponent::mapAction()&lt;/code&gt;. Add the following code to your - mostly empty - &lt;code&gt;UsersController&lt;/code&gt;, located in &lt;code&gt;src/Controller/UsersController.php&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    /**
     * Initialization hook method.
     *
     * Use this method to add common initialization code like loading components.
     *
     * e.g. `$this-&amp;gt;loadComponent(&#39;Security&#39;);`
     *
     * @return void
     */
    public function initialize()
    {
        parent::initialize();

        $this-&amp;gt;Crud-&amp;gt;mapAction(&#39;login&#39;, &#39;CrudUsers.Login&#39;);
        $this-&amp;gt;Crud-&amp;gt;mapAction(&#39;logout&#39;, &#39;CrudUsers.Logout&#39;);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you browse to any part of your site in a browser, you should be redirected to a page like the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/12/02/users-login-missing-template.png&quot; alt=&quot;missing users::login template&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you don’t have CakePHP installed under a web server, you can start up the built-in PHP server by running &lt;code&gt;bin/cake server&lt;/code&gt;. Your application will be accessible at &lt;a href=&quot;http://localhost:8765&quot;&gt;http://localhost:8765&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While the CrudUsers plugin &lt;em&gt;does&lt;/em&gt; have an action class for login, we’ll still need the relevant cake template file. Thankfully, we can just create it using the &lt;code&gt;Bake&lt;/code&gt; plugin, which has a sample &lt;code&gt;login.ctp&lt;/code&gt; for use with our apps:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake bake template Users login
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ll need to make one &lt;em&gt;very small&lt;/em&gt; change to the generated &lt;code&gt;src/Template/Users/login.ctp&lt;/code&gt;. It currently references a &lt;code&gt;username&lt;/code&gt; field when it should instead reference the &lt;code&gt;email&lt;/code&gt; field. Once this is done, browse to &lt;code&gt;/users/login&lt;/code&gt;, and attempt to login with the credentials you created before. You should get a page like the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/12/02/users-login-success.png&quot; alt=&quot;users::login success kid&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To allow logging out, we’ll need to explicitely whitelist it for authenticated users. Add the following to your &lt;code&gt;UsersController&lt;/code&gt; to do so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    /**
     * Check if the provided user is authorized for the request.
     *
     * @param array|\ArrayAccess|null $user The user to check the authorization of.
     *   If empty the user fetched from storage will be used.
     * @return bool True if $user is authorized, otherwise false
     */
    public function isAuthorized($user = null)
    {
        if ($this-&amp;gt;request-&amp;gt;param(&#39;action&#39;) == &#39;logout&#39;) {
            return true;
        }
        return parent::isAuthorized($user);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now browse to &lt;code&gt;/users/logout&lt;/code&gt;. You’ll be redirected back to the login with potentially confusing flash messages. You &lt;em&gt;are&lt;/em&gt; in fact logged out. The error messages are because we haven’t allowed access to &lt;code&gt;/&lt;/code&gt; in our app. We can fix that later, but for now, lets save our progress:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add composer.json composer.lock src/Controller/UsersController.php src/Template/Users/login.ctp
git commit -m &quot;Working login flow&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;For those that may just want to ensure their codebase matches what has been done so far, the codebase is available on GitHub and tagged as &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016/tree/0.0.2&quot;&gt;0.0.2&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yep, we’re stopping here. We did say we’d get the whole forgot-password flow working, but it’s about quittin’ time for the day and we’ve covered quite a bit of ground. We’ll save that task for tomorrow, and also create a viewable landing page for our app.&lt;/p&gt;

&lt;p&gt;Be sure to follow along via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2016 CakeAdvent Calendar. Come back tomorrow for more delicious content.&lt;/p&gt;
</description>
        <pubDate>Fri, 02 Dec 2016 02:20:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/12/02/user-authentication-in-cakephp/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/12/02/user-authentication-in-cakephp/</guid>
        
        <category>authentication</category>
        
        <category>authorization</category>
        
        <category>cakeadvent-2016</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Creating a microblogging platform</title>
        <description>&lt;p&gt;A friend of mine asked for a custom website, so here I am, writing a custom cms. I know, there are plenty of systems out there that would handle his needs, but it’s also a good excuse to play around with CakePHP 3, so here we are.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the lazy, the codebase we’ll be working on will be available on &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016&quot;&gt;GitHub&lt;/a&gt;. I will be pushing each set of changes on the date when each blog post in this series is published. No cheating!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;

&lt;p&gt;To follow this series of tutorials, you’ll need at least the following setup:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PHP 5.5.9+: I am running PHP 7.0.12 locally&lt;/li&gt;
  &lt;li&gt;Composer: I’ve installed this via &lt;code&gt;homebrew&lt;/code&gt; on my mac.&lt;/li&gt;
  &lt;li&gt;A supported CakePHP SQL Database: I am testing against both Postgres and MySQL. YMMV.&lt;/li&gt;
  &lt;li&gt;git: I’ve installed this via &lt;code&gt;homebrew&lt;/code&gt; on my mac.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have none of these, you’ll want to use the &lt;a href=&quot;https://github.com/friendsofcake/vagrant-chef&quot;&gt;friendsofcake/vagrant-chef&lt;/a&gt; setup. It has support for multiple PHP applications, as well as various datastores/utilities, and is probably the easiest setup to get going. Follow the instructions in the readme if you have any further questions.&lt;/p&gt;

&lt;h2 id=&quot;baking-the-app&quot;&gt;Baking the App&lt;/h2&gt;

&lt;p&gt;Lets start by baking the app! Most CakePHP projects start out by using the official cakephp/app going to use my own &lt;a href=&quot;https://github.com/josegonzalez/app&quot;&gt;josegonzalez/app&lt;/a&gt; composer project skeleton. It has a few goodies I’ll be using in the application.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;composer create-project --no-interaction --prefer-dist josegonzalez/app calico
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A few things!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I’ve named my blog platform &lt;code&gt;calico&lt;/code&gt;. You can name yours lollipop if you’d like. Calico suits me pretty well.&lt;/li&gt;
  &lt;li&gt;I’m using the &lt;code&gt;--no-interaction&lt;/code&gt; flag to create the new project. If you omit this, the &lt;code&gt;composer&lt;/code&gt; command may ask you questions. For now, I am assuming that the defaults are fine.&lt;/li&gt;
  &lt;li&gt;I’ve customized the project skeleton by specifying &lt;code&gt;josegonzalez/app&lt;/code&gt;. Changing this will change your skeleton base.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lets save our new application in a git repository.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;cd calico
git init
git add .
git commit -m &quot;Initial commit&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;All further shell commands are assumed to be running within the application folder. In this case, that will be &lt;code&gt;calico&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;configuring-our-app&quot;&gt;Configuring our app&lt;/h2&gt;

&lt;p&gt;In my application skeleton, all configuration is done via environment variables. This allows us to change any config value at runtime without necessitating a full application deploy. It will also allow us to specify different environments both locally, as well as once the application has been deployed to a server. All config is stored in the &lt;code&gt;config/.env.default&lt;/code&gt; file, though it is highly recommended that you customize it in a &lt;code&gt;config/.env&lt;/code&gt; file. Lets do that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;cp config/.env.default config/.env
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;The &lt;code&gt;config/.env&lt;/code&gt; file is git-ignored, meaning it will not be tracked by git and cannot be committed. To see what else is git-ignored, check out the &lt;code&gt;.gitignore&lt;/code&gt; file in your repository base.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’m going to change one thing in my &lt;code&gt;config/.env&lt;/code&gt;, and that is the &lt;code&gt;APP_NAME&lt;/code&gt; variable. I’ve changed mine to &lt;code&gt;calico&lt;/code&gt;, because that is what my application is called. The other environment variables can be changed at will, and - through a few small modifications to the base app project - are automatically picked up by CakePHP.&lt;/p&gt;

&lt;h2 id=&quot;creating-our-initial-database-tables&quot;&gt;Creating our initial database tables&lt;/h2&gt;

&lt;p&gt;Before we continue, you’ll want to create a database for your application. By default, the app skeleton will name the database after your &lt;code&gt;APP_NAME&lt;/code&gt; variable. For my application, the following databases were created:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;calico&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;calico_test&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can configure the &lt;code&gt;DATABASE_URL&lt;/code&gt; environment variable in the &lt;code&gt;config/.env&lt;/code&gt; file to change this default.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The default username and password are also set here to the normal CakePHP defaults. I created both of these on my server, though you can modify these - and the other sections of that environment variable - to suit your needs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now that you have a database setup, we’ll want a few tables. After speaking with my friend, I’ve decided upon the following initial schema.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Users hasMany Posts&lt;/li&gt;
  &lt;li&gt;Posts belongsTo Users&lt;/li&gt;
  &lt;li&gt;Posts hasMany PostAttributes&lt;/li&gt;
  &lt;li&gt;PostAttributes belongsTo Posts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Why am I going for an extra table to store post attributes?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CakePHP does not support native JSON values in the ORM. It is totally possible to use JSON, but I don’t get any native database enhancements (yet)&lt;/li&gt;
  &lt;li&gt;The CMS is a bit of a tumblog, and I don’t completely know what post types I’ll be creating. I can optimize this later if need be, but I doubt it will be a problem.&lt;/li&gt;
  &lt;li&gt;It lets me play with the ORM a bit more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’ll be generating migration files using the &lt;code&gt;cake bake&lt;/code&gt; cli tool. Migrations can be used to version our database locally in PHP files, allowing us to apply them as necessary:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake bake migration create_posts user_id:integer:index type:string:index url:string:index status:index created modified
sleep 1
bin/cake bake migration create_post_attributes post_id:integer:index name:string[100] value:text
sleep 1
bin/cake bake migration create_users email:string:index password:string avatar:string avatar_dir:string created modified
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Why Sleep? We sleep because each migration uses the current timestamp as the unique identifier. This is a limitation of phinx, the library in use for migrations. By adding a sleep in between each command, we simulate running each command at a different timestamp, and therefore give them unique identifiers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Seems legit. Once you run those commands, you’ll have three migration files in &lt;code&gt;config/Migrations&lt;/code&gt;. We can execute these against our database using the following &lt;code&gt;cake&lt;/code&gt; cli command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake migrations migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you open up your database, you’ll see our three tables were created by the above command, as well as a fourth &lt;code&gt;phinx&lt;/code&gt; table. This table is used to figure out which migrations were already run.&lt;/p&gt;

&lt;p&gt;Lets commit these changes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add config/Migrations
git commit -m &quot;Added migrations for posts, post_attributes, and users&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;baking-the-app-1&quot;&gt;Baking the app&lt;/h2&gt;

&lt;p&gt;This bit is pretty trivial. CakePHP has long offered a &lt;code&gt;bake&lt;/code&gt; tool that can be used to autogenerate files for your application. CakePHP includes it’s own bake templates that have quite a bit of functionality “baked” in, but we’ll be using the &lt;code&gt;Crud&lt;/code&gt; templates.&lt;/p&gt;

&lt;p&gt;What is &lt;code&gt;Crud&lt;/code&gt;? Think of Crud as a programmatic bake. It allows us to provide the same defaults as &lt;code&gt;bake&lt;/code&gt; would, but &lt;em&gt;also&lt;/em&gt; provides a programmable interface to editing those defaults. In the past, rebaking a file would have ended up destroying most of your customizations. Crud allows you to reuse the default actions in your controllers and views with all the power of an actual programming language. It’s a bit hard to explain, so just assume I know what I’m talking about and we’ll hopefully get through this.&lt;/p&gt;

&lt;p&gt;To bake using crud templates, we’ll run the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake bake all posts --theme Crud
bin/cake bake all post_attributes --theme Crud
bin/cake bake all users --theme Crud
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you run &lt;code&gt;git status&lt;/code&gt; at this point, the following files and directories will show up:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;src/Controller/PostAttributesController.php
src/Controller/PostsController.php
src/Controller/UsersController.php
src/Model/Entity/Post.php
src/Model/Entity/PostAttribute.php
src/Model/Entity/User.php
src/Model/Table/PostAttributesTable.php
src/Model/Table/PostsTable.php
src/Model/Table/UsersTable.php
src/Template/PostAttributes/
src/Template/Posts/
src/Template/Users/
tests/Fixture/PostAttributesFixture.php
tests/Fixture/PostsFixture.php
tests/Fixture/UsersFixture.php
tests/TestCase/Controller/PostAttributesControllerTest.php
tests/TestCase/Controller/PostsControllerTest.php
tests/TestCase/Controller/UsersControllerTest.php
tests/TestCase/Model/Table/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lots of gunk here. Lets explain them all before continuing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;src/Controller&lt;/code&gt;: These files are where you’ll be adding most entrypoints to the application. If you open any of these up, they’ll be largely empty, as they will be inheriting from the &lt;code&gt;AppController&lt;/code&gt; located in &lt;code&gt;src/Controller/AppController.php&lt;/code&gt;. Don’t worry too much about these, we’ll dig into them further in a bit.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;src/Model/Entity&lt;/code&gt;: Handles some minimal logic concerning individual records in your database. I usually put “helper” code in here - date-time formatting, pretty-printed titles - in these classes.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;src/Model/Table&lt;/code&gt;: Business logic &lt;em&gt;can&lt;/em&gt; go here. I generally place complex find queries (select statements) here. You can also place validation rules here, as well as configure the Table to have the correct behaviors (decorator classes that change/enhance functionality).&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;src/Template&lt;/code&gt;: In CakePHP 2, we placed &lt;code&gt;.ctp&lt;/code&gt; (cake templates) files in the View directory. In CakePHP 3, the View folder is reserved for Helpers and View classes, while cake template files go in &lt;code&gt;src/Template&lt;/code&gt;. It’s a bit cleaner, and also lets you use &lt;code&gt;View&lt;/code&gt; and &lt;code&gt;Helper&lt;/code&gt; as table names.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;tests/Fixture&lt;/code&gt;: The classes here contain sample data that can be inserted into our test database during testing.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;tests/TestCase&lt;/code&gt;: Test classes! They are mostly stubs, because we haven’t written any real code yet.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m going to add all these files and call it a night. My friend said they have a few weeks before they need their site, so taking it slow works for me :)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Controller src/Model/Entity src/Model/Table src/Template tests/Fixture tests/TestCase
git commit -m &quot;Add baked files for initial application&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yay!&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;For those that may just want to ensure their codebase matches what has been done so far, the codebase is available on GitHub and tagged as &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016/tree/0.0.1&quot;&gt;0.0.1&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What is next? While you can certainly go in and create any records you’d like at this time, we’re going to want to lock down our database. Thus, our next target will be general user management, including a forgot password flow and modifying their personal details. We’ll be covering the above topic in the next installment of CakeAdvent 2016.&lt;/p&gt;

&lt;p&gt;Be sure to follow along via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2016 CakeAdvent Calendar. Come back tomorrow for more delicious content.&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Dec 2016 01:56:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/12/01/creating-a-microblogging-platform/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/12/01/creating-a-microblogging-platform/</guid>
        
        <category>cakeadvent-2016</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>A Lambda PaaS</title>
        <description>&lt;p&gt;Infrastructure is a confusing beast to developers. Here are things you would have to learn about and manage:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Proper Logging (and storage thereof)&lt;/li&gt;
  &lt;li&gt;Application Configuration&lt;/li&gt;
  &lt;li&gt;Deployment Pipelines&lt;/li&gt;
  &lt;li&gt;Metric Collection&lt;/li&gt;
  &lt;li&gt;Automatic Scaling&lt;/li&gt;
  &lt;li&gt;Database Maintenance&lt;/li&gt;
  &lt;li&gt;Environment Management (dev/staging/prod)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unless you are using a PaaS, you are probably in a bad spot in one or more ways. If you’re not, it is likely that you can go to the software company down the block and they would be doing all of these things &lt;em&gt;quite&lt;/em&gt; differently than you are.&lt;/p&gt;

&lt;p&gt;I’m not all-in on serverless application development, but some platforms get it right. Heroku certainly does, and AWS has nice pieces that can be used to implement the above - albeit in a jank ui. I was playing with a few bits of tech this weekend to make the experience a bit nicer, and here is a description of what I came up with.&lt;/p&gt;

&lt;h2 id=&quot;pushing-code-and-executing-a-pipeline&quot;&gt;Pushing Code and Executing a Pipeline&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;You’ll need to be running a build server for this. Install docker on the instance, as we’ll be using that. Also, install the &lt;code&gt;zip&lt;/code&gt; utility.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is probably the most boring part to me. I’ve already worked on a few systems that have this sort of functionality - Dokku being the biggest - but for this purpose, lets just use &lt;a href=&quot;https://github.com/coreos/go-gitreceive&quot;&gt;go-gitreceive&lt;/a&gt;. You’ll need to install it and initialize the &lt;code&gt;git&lt;/code&gt; user, but once that is done, here is our stub &lt;code&gt;receiver&lt;/code&gt; script that goes in &lt;code&gt;/home/git/receiver&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;#!/bin/bash
main() {
  local TMP_WORK_DIR=$(mktemp -d &quot;/tmp/laambda.XXXX&quot;)
  trap &#39;rm -rf &quot;$TMP_WORK_DIR&quot; &amp;gt; /dev/null&#39; RETURN INT TERM EXIT

  mkdir -p &quot;$TMP_WORK_DIR&quot; &amp;amp;&amp;amp; cat | tar -x -C &quot;$TMP_WORK_DIR&quot;

  if [[ ! -f &quot;$TMP_WORK_DIR/requirements.txt&quot;]]; then
    echo &quot;Invalid python application detected, bailing&quot;
  fi

  # the rest of the script goes here
}

main &quot;$@&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For my dummy implementation, I didn’t keep the repository around, though you are welcome to do so using &lt;code&gt;git-upload-pack&lt;/code&gt; if you have it installed on your server.&lt;/p&gt;

&lt;p&gt;Note that you’ll also need to add your ssh key to the server via &lt;code&gt;go-gitreceive upload-key git&lt;/code&gt; or similar. Please read the docs for the referenced project.&lt;/p&gt;

&lt;h2 id=&quot;laambda-two-as-because-its-a-paas&quot;&gt;laambda (two As because its a PaaS)&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;This system only supported Python because I don’t believe in Node.JS. It doesn’t exist, sorry. I also don’t drink coffee, so Java is out.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One thing I hate about the current lambda deploy model is that it is annoying to build assets locally and then push that into the cloud. My Macbook isn’t CentOS 7 with a bunch of funny bits changed, so I can’t be sure my code will work &lt;em&gt;exactly&lt;/em&gt; as I expect it to. The hack that a few people use is to build in a VM or an EC2 instance, but I’d like something slightly closer to Lambda’s infrastructure. For that, I turned to the &lt;a href=&quot;https://github.com/lambci/docker-lambda&quot;&gt;docker-lambda&lt;/a&gt; project.&lt;/p&gt;

&lt;p&gt;The docker-lambda project is more or less a replica of the Lambda container used on AWS. It does have a few changes - notably task runners are changed in order to be able to run outside of the AWS infrastructure - but overall is an easy to use replica of the Lambda environment. You can use it to build an application locally&lt;/p&gt;

&lt;p&gt;Here is a quick test of how it might work for a given python application:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# make this configurable somehow ;)
APP_NAME=api

# cd into the app you want to build for lambda
cd &quot;$TMP_WORK_DIR&quot;

# in a docker container, do the following:
# - create a virtualenv
# - activate it
# - install your dependencies
# be sure to load up a volume for caching, or you&#39;re gonna have a bad time
docker run --rm \
    -v &quot;$TMP_WORK_DIR&quot;:/var/task \
    -v /tmp/.cache:/root/.cache \
    lambci/lambda:build-python2.7 \
    bash -c &#39;virtualenv .virtualenv &amp;amp;&amp;amp; source .virtualenv/bin/activate &amp;amp;&amp;amp; pip install -r requirements.txt&#39;

# move the built virtualenv out of the way for now
mv .virtualenv /tmp/.virtualenv
VIRTUAL_ENV=/tmp/.virtualenv

# create your initial zip file
zip -9 &quot;/tmp/${APP_NAME}.zip&quot;

# now zip up the site-packages for lib
cd $VIRTUAL_ENV/lib/python2.7/site-packages
zip -r9 &quot;/tmp/${APP_NAME}.zip&quot; *

# and also the site-packages for lib64
cd $VIRTUAL_ENV/lib64/python2.7/site-packages
zip -r9 &quot;/tmp/${APP_NAME}.zip&quot; *

# and now add all of your app code
cd &quot;$TMP_WORK_DIR&quot;
zip -g &quot;/tmp/${APP_NAME}.zip&quot; *
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty nifty I think. We’ve still got a bit of work to do.&lt;/p&gt;

&lt;h2 id=&quot;specifying-multiple-functions&quot;&gt;Specifying multiple functions&lt;/h2&gt;

&lt;p&gt;At this point in the game, while I do believe that it’s a bit inflexible, the &lt;code&gt;Procfile&lt;/code&gt; fits right into how we might specify commands. Lets say my codebase has two python files:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;CreateThumbnail&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;ResizeThumbnail&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each one has a function called &lt;code&gt;handler&lt;/code&gt;, which does all the work for our api. We could spend time coming up with yet another yaml format - oh joy, our developers will &lt;em&gt;love&lt;/em&gt; learning a new format - or we could just use the following Procfile:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;create: CreateThumbnail.handler
resize: ResizeThumbnail.handler
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Seems pretty reasonable to me. No, it doesn’t specify any extra info, like memory, timeout, iam profile, etc., but all those can have “sane” defaults within our &lt;code&gt;laambda&lt;/code&gt; PaaS. We’ll get into that later. Lets assume the following are the defaults:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;region&lt;/code&gt;: &lt;code&gt;us-east-1&lt;/code&gt;, the best region&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;function-name&lt;/code&gt;: The name of the codebase (&lt;code&gt;api&lt;/code&gt; in this case), suffixed with the entry in the Procfile (&lt;code&gt;create&lt;/code&gt; or &lt;code&gt;resize&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;runtime&lt;/code&gt;: &lt;code&gt;python2.7&lt;/code&gt;. No other runtimes exist, remember?&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;timeout&lt;/code&gt;: &lt;code&gt;10&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;memory-size&lt;/code&gt;: &lt;code&gt;1024&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following will need to be specified on app creation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;role&lt;/code&gt;: An arn role for your function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since you have the zip file, you can just run your &lt;code&gt;aws&lt;/code&gt; command for each function to upload the codebase like normal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;aws lambda create-function \
  --region &quot;$REGION&quot; \
  --function-name &quot;$FUNCTION_MAME&quot; \
  --zip-file &quot;fileb://tmp/${APP_NAME}.zip&quot; \
  --role &quot;$ROLE_ARN&quot; \
  --handler &quot;$FUNCTION_HANDLER&quot; \
  --runtime &quot;$RUNTIME&quot; \
  --timeout &quot;$TIMEOUT&quot; \
  --memory-size &quot;$MEMORY_SIZE&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty good, I think.&lt;/p&gt;

&lt;h2 id=&quot;managing-the-lambda-functions&quot;&gt;Managing the Lambda functions&lt;/h2&gt;

&lt;p&gt;No one wants to remember the &lt;code&gt;aws lambda&lt;/code&gt; cli, so provide your developers with the tooling to manage that sort of thing. For my test, I configured the event sources on the web ui, but you might want to have a cli like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# manage event sources
laambda event-sources        FUNCTION
laambda event-sources:add    FUNCTION SOURCE_HERE
laambda event-sources:remove FUNCTION SOURCE_HERE
laambda event-sources:clear  FUNCTION SOURCE_HERE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similarly, any bit that can be managed by the &lt;code&gt;aws lambda&lt;/code&gt; cli should be handled by your tooling. I implemented the following handlers for my own purposes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# manage configuration
# all functions in an app have access to the same env in my model
laambda config
laambda config:get KEY
laambda config:set KEY=VALUE
laambda config:unset KEY
laambda config:clear

# manage resources
laambda resource:memory FUNCTION VALUE
laambda resource:timeout FUNCTION VALUE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’d imagine it would be a good idea to also handle VPC configuration, KMS encryption keys, roles associated with your function, and anything else either not version controlled or that AWS exposes in the future.&lt;/p&gt;

&lt;h2 id=&quot;rollbacks&quot;&gt;Rollbacks&lt;/h2&gt;

&lt;p&gt;One nice thing about Heroku is that you can rollback in time to basically any state of your application. Like it or not, a developer (and the ops folks!) will screw things up eventually, so turning back the clock is almost assuredly necessary.&lt;/p&gt;

&lt;p&gt;Ideally, you are storing your app configuration in a distributed, encrypted k/v, &lt;em&gt;outside&lt;/em&gt; of Lambda. This will allow you to maintain some notion of state. I have no real recommendations here, other than to keep the following for each changeset:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A reference to the built zip file (likely as a hash of the codebase) which you may want to store on S3&lt;/li&gt;
  &lt;li&gt;An encrypted bag of the current configuration for every function within an APP.&lt;/li&gt;
  &lt;li&gt;A description of the changes (config change, deploy, etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You should also be able to list these changesets so that you actually know what went down. I’d build the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;laambda releases
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And give it some sort of &lt;code&gt;git changelog&lt;/code&gt; style output.&lt;/p&gt;

&lt;h2 id=&quot;further-considerations&quot;&gt;Further considerations&lt;/h2&gt;

&lt;p&gt;Some questions you’ll want to answer:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Where are you storing logs?
    &lt;ul&gt;
      &lt;li&gt;The easiest is Cloudwatch, though honestly the UI kinda blows. You can probably get away with shipping them elsewhere, like an external service - Honeycomb.io, Logentries, Papertrail all would work - or you can ship them to whatever centralized logging system you have - the ELK stack and Graylog are popular ones. Just also expose the logs via the same cli tooling you built to manage this thing.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;How are you collecting metrics?
    &lt;ul&gt;
      &lt;li&gt;The same applies here as does for logging. The big issue with either is DNS, as Lambda functions aren’t necessarily listening to your custom DNS server. I’d likely setup a simple Grafana/Graphite/StatsD setup and go from there.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;How do you test functions?
    &lt;ul&gt;
      &lt;li&gt;Be sure to setup multiple environments. Your tooling could take a &lt;code&gt;--env&lt;/code&gt; flag to specify a VPC, for instance, and you’d simply partition environments based on the VPC.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other enhancements you may want to consider:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The system above has no authentication, so anyone with ssh access can push to any application.&lt;/li&gt;
  &lt;li&gt;While developers are fine with a CLI, they’ll also be hurting for a web ui. Having a web ui will also allow you to personally audit what is going on, without needing to depend upon the developer to paste the output. If you have a web ui, build an API that does all the coordination for your CLI tool, instead of having that CLI tool be a crappy wrapper around &lt;code&gt;awscli&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Your system &lt;em&gt;is&lt;/em&gt; capable of continuous deployment, and I highly encourage that model.&lt;/li&gt;
  &lt;li&gt;You could add support for each AWS Lambda runtime by detecting the language in use on deploy. We added a small amount of python detection to our &lt;code&gt;go-gitreceive&lt;/code&gt; handler, though you can expand on that quite easily. I would suggest looking into the heroku buildpack model for figuring out how to properly detect and install each “runtime”.&lt;/li&gt;
  &lt;li&gt;None of this handles the local development cycle of a Laambda function.&lt;/li&gt;
  &lt;li&gt;Autoscale your build servers. You’ll have some issues around having the same dependency cache - get around that by uploading/downloading it from S3 - but it will allow you to weather an outage of your build servers. Route53 can be set to round-robbin DNS requests with healthchecks, making it easy to perform maintenance on your build environment.&lt;/li&gt;
  &lt;li&gt;Promoting apps from environment to environment, or even allowing “pull request” apps to be deployed in a specific environment, would allow developers to gain confidence in what they are deploying. Heroku has PR apps, so why shouldn’t you?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I do think that services like Lambda provide an excellent framework for building applications, but we should start thinking about how we’d like to interact with these services, instead of how these services force us to interact with them.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Why isn’t this &lt;em&gt;also&lt;/em&gt; a thing for EMR? Or really any similar kind of service?&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 21 Nov 2016 19:51:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/11/21/push-to-deploy-lambda-applications/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/11/21/push-to-deploy-lambda-applications/</guid>
        
        <category>deployment</category>
        
        <category>infrastructure</category>
        
        <category>serverless</category>
        
        
        <category>opschops</category>
        
      </item>
    
      <item>
        <title>Serverless Distributed Cron System</title>
        <description>&lt;p&gt;I’ve implemented the following in a &lt;em&gt;very&lt;/em&gt; untested project I have decided not to release, but the mental exercise of going through the system is worth doing.&lt;/p&gt;

&lt;h2 id=&quot;what-is-cron-baby-dont-hurt-me&quot;&gt;What is Cron? (baby don’t hurt me)&lt;/h2&gt;

&lt;p&gt;Cron is a generic name for various schedulers that run commands at a specific interval. Many developers encounter it via a &lt;code&gt;crontab&lt;/code&gt; file or similar that they have to edit. Here is an example (with a neat graph from wikipedia):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cron&quot;&gt; ┌───────────── min (0 - 59)
 │ ┌────────────── hour (0 - 23)
 │ │ ┌─────────────── day of month (1 - 31)
 │ │ │ ┌──────────────── month (1 - 12)
 │ │ │ │ ┌───────────────── day of week (0 - 6) (Sunday to Saturday;
 │ │ │ │ │                                         7 is also Sunday)
 │ │ │ │ │ ┌────────────the command you are going to run (should be executable)
 │ │ │ │ │ │
 5 2 * * 6 /var/lib/scripts/awesome-script.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s pretty nifty, and fairly easy to automate. Lots of developers seem to want to write versions in their own languages (because why not!), and here is a list of awful implementations in various languages. If you aren’t listed here, don’t worry, your version is almost certainly also awful.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Java: &lt;a href=&quot;http://www.sauronsoftware.it/projects/cron4j/&quot;&gt;cron4j&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Node.JS: &lt;a href=&quot;https://bunkat.github.io/later/&quot;&gt;later&lt;/a&gt; and &lt;a href=&quot;https://github.com/kelektiv/node-cron&quot;&gt;node-cron&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;PHP: this &lt;a href=&quot;https://packagist.org/packages/cron/cron&quot;&gt;cron&lt;/a&gt; library and &lt;a href=&quot;https://laravel.com/docs/5.3/scheduling&quot;&gt;laravel’s sceheduler&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Python: &lt;a href=&quot;https://github.com/fengsp/plan&quot;&gt;plan&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ruby: &lt;a href=&quot;https://github.com/jmettraux/rufus-scheduler&quot;&gt;rufus-scheduler&lt;/a&gt; and &lt;a href=&quot;https://github.com/javan/whenever&quot;&gt;whenever&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are certainly others, these are just the ones I knew off the top of my head or googled really quickly. They are probably fine projects, just that re-implementing cron for the hell of it seems like a waste of time.&lt;/p&gt;

&lt;p&gt;For the record, here are the components of a reasonable cron scheduler:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A scheduler (cron)&lt;/li&gt;
  &lt;li&gt;A process to retrieve logs and process results (cron/syslog)&lt;/li&gt;
  &lt;li&gt;A mechanism for storing the tasks (your cron file)&lt;/li&gt;
  &lt;li&gt;A ui for editing cron tasks (your text editor of choice)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;distributed-cron&quot;&gt;Distributed Cron&lt;/h2&gt;

&lt;p&gt;This is a pretty nasty problem. It turns out that building distributed systems is hard, and the semantics around running cron tasks don’t necessarily work for every problem.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You may want to ensure only one version of a command is running at a time.&lt;/li&gt;
  &lt;li&gt;You may want to ensure every invocation of a command is handled.&lt;/li&gt;
  &lt;li&gt;You may want to ensure every task completes successfully.&lt;/li&gt;
  &lt;li&gt;You may want to log all output somewhere for later investigation.&lt;/li&gt;
  &lt;li&gt;You may want to be able to pause a command from being scheduled.&lt;/li&gt;
  &lt;li&gt;You may want to stop a run that is &lt;em&gt;currently&lt;/em&gt; executing.&lt;/li&gt;
  &lt;li&gt;You may want to place commands in maintenance mode.&lt;/li&gt;
  &lt;li&gt;You may want to group commands for easy perusal in large installations.&lt;/li&gt;
  &lt;li&gt;You may want to lock down commands to certain groups of users.&lt;/li&gt;
  &lt;li&gt;You may want to be able to schedule commands via both an api and web ui.&lt;/li&gt;
  &lt;li&gt;You may want to notify on errors.&lt;/li&gt;
  &lt;li&gt;You may be dealing with commands that have an exit code of &lt;code&gt;0&lt;/code&gt; but actually failed.&lt;/li&gt;
  &lt;li&gt;You may hope that you won’t need to learn entirely knew ways of thinking in order to manage this system.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There aren’t really too many ways to “properly” do distributed cron. You can hack it pretty easily using a MySQL based system for scheduling jobs, as noted by Quora in &lt;a href=&quot;https://engineering.quora.com/Quoras-Distributed-Cron-Architecture&quot;&gt;this blog post&lt;/a&gt;. It works, but isn’t the greatest thing in the world, as you are probably also using MySQL for your queuing system (lulz).&lt;/p&gt;

&lt;p&gt;At work, a hackathon project turned into &lt;a href=&quot;https://github.com/seatgeek/cronq&quot;&gt;CronQ&lt;/a&gt;, our distributed cron solution using MySQL and RabbitMQ. Now we have THREE systems to keep highly-available! Turns out it works - using like 4 processes, one to inject jobs, one for running jobs, one for gathering results, and one for an ok ui - but certainly doesn’t have all of the above things built-in. Also, as a by-product of using MySQL, the developer interface is this terrible ISO 8601 Interval format. Even I have trouble explaining how it works to developers, and I maintain the thing.&lt;/p&gt;

&lt;p&gt;At the webscale end of this problem, you have &lt;a href=&quot;https://mesos.github.io/chronos/&quot;&gt;Chronos&lt;/a&gt;. It’s pretty awesome, is built on &lt;a href=&quot;https://mesos.apache.org/&quot;&gt;Mesos&lt;/a&gt;, and is webscale af. But you probably don’t want to run all that just so your rinky-dink cron task doesn’t not execute when the only host it is on goes down. If you have Mesos, awesome, try it out. I don’t, and I also don’t think it’s a good use of my time to maintain.&lt;/p&gt;

&lt;p&gt;You could also:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;wrap every command with your favorite locking mechanism of choice - consul is distributed and you might have it up, but I’ve seen a ton of Redis or Postgres usage here&lt;/li&gt;
  &lt;li&gt;place the same crontab on every file&lt;/li&gt;
  &lt;li&gt;hope for no network partitions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Good luck? Hope you’re using a service like &lt;a href=&quot;https://cronitor.io/&quot;&gt;cronitor.io&lt;/a&gt; to monitor your jobs.&lt;/p&gt;

&lt;h2 id=&quot;serverless-cron&quot;&gt;Serverless Cron&lt;/h2&gt;

&lt;p&gt;Heroku has a pretty nice scheduler. Here is a screenshot!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/11/21/heroku-dashboard-scheduler.png&quot; alt=&quot;dashboard scheduler confessional&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s also very barebones. You can add a command, set one of three frequencies, and more or less hope for the best. Still, pretty useful for developers. They don’t really need to think about much except for the command itself.&lt;/p&gt;

&lt;p&gt;AWS Lambda has a similar feature. You can schedule based on one of two syntaxes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;rate&lt;/code&gt;: Think &lt;code&gt;yearly&lt;/code&gt; or &lt;code&gt;hourly&lt;/code&gt;. Rates are pretty useful if you want to not need to decipher when your cron syntax says something will run. The heroku dashboard gets this right I think, and I believe rate will continue to be pretty powerful.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;cron&lt;/code&gt;: This is the syntax we all know and love to lookup every time we write it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lambda, however, has a few limitations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You can only execute code in lambda. You cannot execute code on other servers, at least not directly (webcron? lol).&lt;/li&gt;
  &lt;li&gt;By default, you can only execute 100 functions at a time. You can have this raised, but you probably don’t want to break other uses of lambda in your system.&lt;/li&gt;
  &lt;li&gt;The deployment environment is pretty limited - Java, Node.JS, Python - unless you use a shim, which is less than ideal.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Still, it’s a pretty useful primitive for building on top of.&lt;/p&gt;

&lt;h2 id=&quot;distributed-serverless-mostly-cron&quot;&gt;Distributed Serverless (mostly) Cron&lt;/h2&gt;

&lt;p&gt;Components?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Lambda Scheduler Function&lt;/li&gt;
  &lt;li&gt;Lambda Results Retriever Function&lt;/li&gt;
  &lt;li&gt;Lambda DynamoDB Pruning Function&lt;/li&gt;
  &lt;li&gt;Cloudwatch&lt;/li&gt;
  &lt;li&gt;DynamoDB&lt;/li&gt;
  &lt;li&gt;SQS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Jobs are stored in a DynamoDB table. This table can be hand-edited in the AWS Console for now, but in the future, you’d probably build some sort of Web UI (and API) on top of it. Here is what you would store:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Group identifier for the command&lt;/li&gt;
  &lt;li&gt;Name of the command&lt;/li&gt;
  &lt;li&gt;Command&lt;/li&gt;
  &lt;li&gt;Cron syntax specifying the interval at which to run&lt;/li&gt;
  &lt;li&gt;Whether the command is enabled or not&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Execution events are &lt;em&gt;also&lt;/em&gt; stored in DynamoDB. Whenever a task is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Scheduled&lt;/li&gt;
  &lt;li&gt;Started&lt;/li&gt;
  &lt;li&gt;Completed (fail or success)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An entry is stored in the execution table. The entry has a reference to the original job, the current timestamp, position in the workflow, and any metadata (such as the executor and the exit code). This can be used at a later date to construct a history of runs for the job.&lt;/p&gt;

&lt;p&gt;There is a Lambda function that is executed which prunes the executed events DynamoDB table. You probably don’t care about whether the command executed three months ago, so storing only relevant recent data here is important.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Aside: MongoDB’s capped collection functionality would be pretty useful in this situation, as then its somewhat fire and forget.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Lambda can execute a function every minute. Even with a 10 second start-time overhead, that gives us roughly 50 seconds to schedule tasks for that minute interval. Each iteration will:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Retrieve all tasks from DynamoDB&lt;/li&gt;
  &lt;li&gt;Throw away any tasks that do not need to be executed in that minute interval&lt;/li&gt;
  &lt;li&gt;Enqeue a message (with a unique identifer for the job run!) into a group-specific SQS queue&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, you have the actual task runner. This can be any old daemon that lives on your server. It simply listens for jobs on SQS and executes them. You can have a few different running modes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;One at a time: Each task runner can execute one job at a time. If another job appears on it’s queue, it’ll ignore it until it’s current job is fulfilled.&lt;/li&gt;
  &lt;li&gt;Resource-based: You could probably associated each job with an amount of resources it needs in order to be executed. With a bit of work, the task-runner can be made aware of what resources are left on the server, and appropriately retrieve a job to execute next. Users of plain-old-cron probably don’t care about this, but those living in highly available worlds might want to build this into their task runners (lol you’re also probably building something akin to Mesos at this point, so just use Chronos).&lt;/li&gt;
  &lt;li&gt;Free-for-all task runners: Each task runner in a group will just continue trying to get a job from the queue. If it gets a job, it just starts it, OOM-killers be damned. Most developers sort of expect this behavior, though I believe the “One at a time” behavior is a bit easier to predict.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Why do we have task runners on actual servers? Personally, I like being able to execute the full range of code in my repositories. At work, we deploy the following languages in production:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;C#&lt;/li&gt;
  &lt;li&gt;Golang&lt;/li&gt;
  &lt;li&gt;Node.JS&lt;/li&gt;
  &lt;li&gt;Ruby&lt;/li&gt;
  &lt;li&gt;PHP&lt;/li&gt;
  &lt;li&gt;Python&lt;/li&gt;
  &lt;li&gt;Ruby&lt;/li&gt;
  &lt;li&gt;Scala&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hell, there’s even a bit of Perl and Lua running around (don’t ask). Each system has it’s own tasks we want to run on a schedule, and usually on “actual” hardware. For traditional, non-container based systems, the tasks should run on the servers where a codebase is deployed, so it makes sense to have a task runner.&lt;/p&gt;

&lt;p&gt;The task runner is responsible for the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Executing a task: A subprocess will likely work here. You can get fancy and orphan a process, then poll for it’s file descriptor if you wish.&lt;/li&gt;
  &lt;li&gt;Collecting logs: You can ship logs to cloudwatch if that is all you have handy, which gives you a shitty web ui for looking at logs. You may also want to integrate with your syslog solution of choice, such as the ELK stack or Graylog.&lt;/li&gt;
  &lt;li&gt;Sending execution event notifications: Starts, Stops, Exit Codes, Host information etc. All of this should be recorded for later inspection.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, you’ll have your Lambda function that retrieves results from a results queue and stores them in your execution events DynamoDB table.&lt;/p&gt;

&lt;h2 id=&quot;implementation-notes&quot;&gt;Implementation Notes&lt;/h2&gt;

&lt;p&gt;The simplest solution here is to use python as your Lambda deploy target. It is supported, has a wide range of libraries, and is easy enough to deploy. Here are a few libraries you can use for your implementation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/boto/boto3&quot;&gt;boto3&lt;/a&gt;: Because you’ll need something to both read and write to SQS.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/taichino/croniter/&quot;&gt;croniter&lt;/a&gt;: For parsing cron syntax in python. It’s the best library I found.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/myusuf3/delorean&quot;&gt;delorean&lt;/a&gt;: You’ll need this to properly parse datetimes in the correct timezone (use UTC please).&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kennethreitz/envoy&quot;&gt;envoy&lt;/a&gt;: For dealing with python subprocesses. It’s honestly not so bad to do directly, but you really need to know what you’re doing or you’ll do something silly with log messages or file descriptors.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/stevearc/flywheel&quot;&gt;flywheel&lt;/a&gt;: Works well for interacting with DynamoDB in an ORM-like interface.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/amoffat/sh&quot;&gt;sh&lt;/a&gt;: In case you hate envoy for subprocesses.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you wish to go the Golang route - which I would probably prefer, given that you can ship a binary for the task runner - you should look into the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/eawsy/aws-lambda-go&quot;&gt;aws-lambda-go&lt;/a&gt;: You need a wrapper to deploy golang to Lambda, and this was the nicest thing I found.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/gorhill/cronexpr&quot;&gt;cronexpr&lt;/a&gt;: Well-tested cron parsing&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/underarmour/dynago&quot;&gt;dynago&lt;/a&gt;: A surprisingly good way to interface with DynamoDB&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/goamz/goamz/tree/master/sqs&quot;&gt;goamz&lt;/a&gt;: SQS&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;closing-thoughts&quot;&gt;Closing Thoughts&lt;/h2&gt;

&lt;p&gt;At the end of the day, this is a system you are now maintaining. I &lt;em&gt;highly&lt;/em&gt; suggest open sourcing it and being as loud as possible about how it works and how awesome it is (or isn’t) so that you’re not the only one looking at the code.&lt;/p&gt;

&lt;p&gt;This system also doesn’t track dependencies and the like. It’s a straight reimplementation of cron, but for “the cloud”. If you need more, you’ll need to either write that other bit, or simply go to a system like &lt;a href=&quot;https://github.com/mesos/chronos&quot;&gt;Chronos&lt;/a&gt; or &lt;a href=&quot;https://github.com/spotify/luigi&quot;&gt;Luigi&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The above system did not describe any sort of reasonable web ui for tackling the developer experience problems. Bring in someone from your frontend team to work on that part, and be nice to them when they want to build an asset-pipeline for it. You reimplemented cron and your implementation is awful, you have no right to complain.&lt;/p&gt;

&lt;p&gt;The task runners are going to be a bit of work. Things like waiting on new jobs to appear on the queue, properly handling subprocesses, and managing where logs go after they are collected will be a bit painful. Be sure to test any “performance” enhancements you implement first on a “toy” system before rolling it out into production and killing the distributed cron.&lt;/p&gt;

&lt;p&gt;One last thing: Give credit where credit is due. The folks who have written the underlying libraries, frameworks, and infrastructure primitives have put you in a good position to succeed. If you’re filing a bug, try and also come up with a patch. OSS is a two-way street.&lt;/p&gt;
</description>
        <pubDate>Mon, 21 Nov 2016 00:08:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/11/21/serverless-distributed-cron-system/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/11/21/serverless-distributed-cron-system/</guid>
        
        <category>cron</category>
        
        <category>infrastructure</category>
        
        <category>serverless</category>
        
        
        <category>opschops</category>
        
      </item>
    
      <item>
        <title>Paginating one table while sorting by a field from another table</title>
        <description>&lt;p&gt;There was a user on irc who asked the question, “How do I sort pagination of one table by another table’s field?”. I actually had to dig a little but to do this. Let’s layout how pagination works first.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: all of this will assume Users belongsTo Cities. YMMV for anything else, I definitely didn’t test it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can paginate by specifying a Table object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$users = $this-&amp;gt;paginate($this-&amp;gt;Users);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also specify the string name:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$users = $this-&amp;gt;paginate(&#39;Users&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, you can pass in a query object (which can be retrieved from a &lt;code&gt;find()&lt;/code&gt; call):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$query = $this-&amp;gt;Users-&amp;gt;find();
$users = $this-&amp;gt;paginate($query);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, if you wanted to include related data, you would need to contain that data, which is where the &lt;code&gt;query&lt;/code&gt; method shines, as you can easily modify it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$query = $this-&amp;gt;Users-&amp;gt;find()
                     -&amp;gt;contain(&#39;Cities&#39;);
$users = $this-&amp;gt;paginate($query);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One thing of note is that you can also specify the query info in a controller’s &lt;code&gt;$this-&amp;gt;paginate&lt;/code&gt; attribute:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;paginate[&#39;contain&#39;] = [&#39;Cities&#39;];
$users = $this-&amp;gt;paginate(&#39;Users&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you wanted to sort the output by a related field, you can add it to the query:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$query = $this-&amp;gt;Users-&amp;gt;find()
                     -&amp;gt;contain(&#39;Cities&#39;)
                     -&amp;gt;order([&#39;Cities.name&#39; =&amp;gt; &#39;DESC&#39;]);
$users = $this-&amp;gt;paginate($query);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above works fine, but this won’t:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;paginate[&#39;contain&#39;] = [&#39;Cities&#39;];
$this-&amp;gt;paginate[&#39;order&#39;] = [&#39;Cities.name&#39; =&amp;gt; &#39;DESC&#39;];
$users = $this-&amp;gt;paginate(&#39;Users&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Why? Because in the former, we are passing in the order via a query object explicitly. In the later, CakePHP will strip it out because the related field is &lt;strong&gt;not&lt;/strong&gt; whitelisted for pagination sorting. The scope of this is limited to the paginated model by default. This is to avoid people futzing with your querystring parameters and taking down your site because of an un-indexed sort…&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ALWAYS ADD INDEXES FOR FIELDS YOU ARE SORTING ON&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What if you wanted to use the &lt;code&gt;$this-&amp;gt;paginate&lt;/code&gt; method? You can do this by adding to the &lt;code&gt;sortWhitelist&lt;/code&gt; option:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;paginate[&#39;contain&#39;] = [&#39;Cities&#39;];
$this-&amp;gt;paginate[&#39;order&#39;] = [&#39;Cities.name&#39; =&amp;gt; &#39;DESC&#39;];
$this-&amp;gt;paginate[&#39;sortWhitelist&#39;] = $this-&amp;gt;Users-&amp;gt;schema()-&amp;gt;columns() + [&#39;Cities.name&#39;];
$users = $this-&amp;gt;paginate(&#39;Users&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yay! You might notice that I added &lt;code&gt;$this-&amp;gt;Users-&amp;gt;schema()-&amp;gt;columns()&lt;/code&gt; to the &lt;code&gt;sortWhitelist&lt;/code&gt; as well. Since it is a whitelist, if I don’t whitelist the primary tables fields, I won’t be able to sort via those fields. You can of course restrict the fields:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;paginate[&#39;contain&#39;] = [&#39;Cities&#39;];
$this-&amp;gt;paginate[&#39;order&#39;] = [&#39;Cities.name&#39; =&amp;gt; &#39;DESC&#39;];
// id and created will be fields in the Users table
$this-&amp;gt;paginate[&#39;sortWhitelist&#39;] = [&#39;id&#39;, &#39;created&#39;, &#39;Cities.name&#39;];
$users = $this-&amp;gt;paginate(&#39;Users&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that if you want to be able to sort by other fields than the one passed explicitly in a query object, you’ll need to mix the two methods:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;paginate[&#39;sortWhitelist&#39;] = $this-&amp;gt;Users-&amp;gt;schema()-&amp;gt;columns() + [&#39;Cities.id&#39;, &#39;Cities.name&#39;];
$query = $this-&amp;gt;Users-&amp;gt;find()
                     -&amp;gt;contain(&#39;Cities&#39;)
                     -&amp;gt;order([&#39;Cities.name&#39; =&amp;gt; &#39;DESC&#39;]);
$users = $this-&amp;gt;paginate($query);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;what-method-should-i-use&quot;&gt;What method should I use?&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;$this-&amp;gt;paginate&lt;/code&gt; method is pretty simple to use in a pinch. Doesn’t require much change from 2.x. I would use it for a one-off pagination setup.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;$query&lt;/code&gt; method is useful if you have a complex find or want to reuse that find in another method, as you can abstract the query object behind a cakephp custom find.&lt;/p&gt;
</description>
        <pubDate>Thu, 10 Mar 2016 20:51:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/03/10/pagination-sorting-by-related-tables/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/03/10/pagination-sorting-by-related-tables/</guid>
        
        <category>cakephp</category>
        
        <category>table</category>
        
        <category>model</category>
        
        <category>pagination</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Open Source is Hard</title>
        <description>&lt;p&gt;Writing code isn’t very difficult. Usually you write something, it mostly does what it needs to do, and you carry on with your day. If you writing code for work, it might go through some review, or you may just ship it out to whoever your users happen to be. If you are writing code for open source, that’s where it gets tricky.&lt;/p&gt;

&lt;h2 id=&quot;what-is-open-source-software&quot;&gt;What is open source software?&lt;/h2&gt;

&lt;p&gt;I’ll loosely define open source software as any piece of software wherein the author(s) provides a copy of the source code to run a piece of software, as well as a license stating that others are able to use it for any purpose.&lt;/p&gt;

&lt;p&gt;Sometimes that source code might result in a binary - for instance, if you are compiling a game application, or a console executable. In many cases, web developers end up using the source code directly, such as in non-compiled rubygems, or npm packages for nodejs. Backend developers might use compiled versions of software for datastores such as MySQL or Elasticsearch. &lt;em&gt;Usually&lt;/em&gt; there is an easy way to transform the provided source code into a finished product.&lt;/p&gt;

&lt;p&gt;The license might have some limitations - you might not be able to sue me, for instance, or I might require that you release any modifications as open source as well. There are a myriad of licenses, each with caveats or reasons why you might favor it as an individual but be opposed to it as a company.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There are an equal number of explanations as to why a particular license is suitable for your next open-source project, so investigating them is an easy way to waste a weekend. &lt;a href=&quot;https://tldrlegal.com/&quot;&gt;tldrlegal&lt;/a&gt; seems to be a legitimate website that explains commonly used licenses.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;what-is-an-open-source-project&quot;&gt;What is an open source project?&lt;/h2&gt;

&lt;p&gt;An open source project differs in a way from open source software. For instance, I might have the following bit of MIT-Licensed PHP code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
/**
 * The MIT License (MIT)
 * Copyright (c) 2015 Jose Diaz-Gonzalez
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the &quot;Software&quot;),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

echo &quot;lolipop\n&quot;;
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above software, when executed, prints &lt;code&gt;lolipop&lt;/code&gt; with a newline to the screen. You can run it locally under your version of PHP and it will probably work fine. YMMV and all that jazz.&lt;/p&gt;

&lt;p&gt;An open-source &lt;em&gt;project&lt;/em&gt; typically also has the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The above code is in a repository somewhere.&lt;/li&gt;
  &lt;li&gt;There is an issue tracker where users can report bugs.&lt;/li&gt;
  &lt;li&gt;There is documentation concerning the installation and usage of the software.&lt;/li&gt;
  &lt;li&gt;There might be test cases for this software.&lt;/li&gt;
  &lt;li&gt;The project has actual maintainers, instead of authors, who steward the project for it’s “lifetime”.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An open-source project requires more effort on the part of maintainers to ensure that the project is kept up to date, continues to evolve as necessary, and issues are responded to where required.&lt;/p&gt;

&lt;h2 id=&quot;things-a-good-open-source-project-does&quot;&gt;Things a good open-source project does&lt;/h2&gt;

&lt;p&gt;A good open-source project does the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Writes well-written, ever-evolving documentation.&lt;/li&gt;
  &lt;li&gt;Keeps a roadmap for users to understand how and where the project is changing.&lt;/li&gt;
  &lt;li&gt;Responds to issues that are reported by users, and:
    &lt;ul&gt;
      &lt;li&gt;Fixes bugs as they arise.&lt;/li&gt;
      &lt;li&gt;Limits the scope of the project when enhancements are requested.&lt;/li&gt;
      &lt;li&gt;Implements feature requests where possible.&lt;/li&gt;
      &lt;li&gt;Points users the right piece of documentation for their issue.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Provides multiple methods of providing live support. This can be any of the following:
    &lt;ul&gt;
      &lt;li&gt;Forums&lt;/li&gt;
      &lt;li&gt;IRC/Some form of live chat&lt;/li&gt;
      &lt;li&gt;Mailing list&lt;/li&gt;
      &lt;li&gt;Stackoverflow&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Proactively deals with issues that were brought up via social media.&lt;/li&gt;
  &lt;li&gt;Has detailed onboarding information for new members of the core team, and revises them as necessary.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A good open-source project is run like a business, because that is what they are. All the things a company does to survive are things successful open-source do on a daily basis. These things matter because the perception of an open-source project is based upon all of these items, and - other than personal need - that perception is oftentimes the only thing keeping the project alive. No one wants to work on an unused piece of software.&lt;/p&gt;

&lt;h2 id=&quot;how-to-crush-the-soul-of-an-open-source-project-maintainer&quot;&gt;How to crush the soul of an open-source project maintainer&lt;/h2&gt;

&lt;p&gt;I personally have a very large backlog of projects I’d like to work on for a myriad of reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;personal gain&lt;/li&gt;
  &lt;li&gt;beneficial to a specific community&lt;/li&gt;
  &lt;li&gt;requirement for an upcoming work project&lt;/li&gt;
  &lt;li&gt;it is something that I find interesting&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given that, I tend to start projects, work on them until they fit my needs, and then move on. I’ll also attempt to provide usage documentation and a way to reach out to me. And that is when the problems start.&lt;/p&gt;

&lt;p&gt;A user will happen across my project, see that it appears to be well-maintained and easy to use, and start using it. At some point it might not fit their requirements, so they file an issue with bugs or enhancement requests. Responding isn’t so bad when you have a few small projects, or when you have a large project that has a few users. The issue is magnified when you start having multiple projects with many distinct users who each &lt;em&gt;expect&lt;/em&gt; changes to occur. For free.&lt;/p&gt;

&lt;p&gt;Open-source projects tend to be unfunded.&lt;/p&gt;

&lt;p&gt;People say any of the following things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Don’t offer it for free if you cannot support it.
    &lt;ul&gt;
      &lt;li&gt;I open-source projects so I can get a new set of eyes on something, which is beneficial for both myself and the community that ends up using it.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Ask for donations.
    &lt;ul&gt;
      &lt;li&gt;Developers do not donate money for code as their companies do not normally provide stipends for this.&lt;/li&gt;
      &lt;li&gt;Companies usually only ever “pay” for open-source in order to receive a license that they can use without being sued. When was the last time your company sent a donation to Debian or the Apache folks?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Require payment for support.
    &lt;ul&gt;
      &lt;li&gt;Now you are some greedy douchebag and you will receive hate-mail.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Add more users as co-maintainers.
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;Sometimes&lt;/em&gt; this works, but honestly now you have to manage both an internal community and an external community. Try doing this for a half-dozen projects, it doesn’t scale.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s quite common to see open-source developers quit their communities for a while once they see a barage of issues coming their way with little to no benefit for them.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note that your work &lt;em&gt;may&lt;/em&gt; be generous and allow you to work on OSS during work hours - 20% time anyone?. Mine at least does not complain if I spend a few minutes responding to something on Github. Some people are not so lucky, and might even find that their work wants to keep the IP of your outside projects, even if it wasn’t made on company hardware, etc. YMMV.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;lazygreedy-developers&quot;&gt;Lazy/Greedy Developers&lt;/h3&gt;

&lt;p&gt;A good developer is lazy. They will go online, find some code that mostly does what they need it to do, hack at it until it does the rest, and move on.&lt;/p&gt;

&lt;p&gt;A small percentage of users that have issues will file an issue asking for an enhancement or a bug fix. An even smaller percentage will provide a fix for that issue, or a patch that includes their enhancement. And the odds that the code provided is up to the standards of the project &lt;em&gt;and&lt;/em&gt; is in the scope of the project is pretty-well close to zero.&lt;/p&gt;

&lt;p&gt;Of those that don’t provide a fix, there is a very large number of people that &lt;em&gt;expect&lt;/em&gt; the code to be written for them. Sometimes this is a case where there is a language barrier, but oftentimes developers just assume that what they want will come for free and it will be implemented quickly. Their project is way more important than yours, and they are &lt;a href=&quot;https://github.com/JuliaLang/IJulia.jl/issues/398&quot;&gt;providing you an unpaid service by giving you feedback&lt;/a&gt;. And they are &lt;a href=&quot;https://github.com/plataformatec/devise/issues/3834&quot;&gt;actively hostile&lt;/a&gt; when you &lt;a href=&quot;https://github.com/plataformatec/devise/issues/3832&quot;&gt;attempt to provide answers&lt;/a&gt; to their questions. The number of entitled developers online is outrageous.&lt;/p&gt;

&lt;p&gt;And people continue to be surprised that demand for free labor outstrips supply.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is a common pattern I’ve seen in many organizations, where people don’t complain loudly when things are broken because they expect no movement from people that can help. So they trudge along with semi-broken experiences, because they are under some deadline and in many cases don’t feel like fixing an issue themselves.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;how-do-we-fix-it&quot;&gt;How do we fix it?&lt;/h2&gt;

&lt;p&gt;We don’t. You could try being a bit nicer to your open-source maintainer, perhaps send them a few bucks if they really saved your bacon, but honestly if a project like OpenSSL &lt;a href=&quot;http://arstechnica.com/information-technology/2014/04/tech-giants-chastened-by-heartbleed-finally-agree-to-fund-openssl/&quot;&gt;cannot get more than a couple thousand&lt;/a&gt; in funding a year, it’s highly unlikely that a project maintainer will see any sort of monetary gain from their projects.&lt;/p&gt;

&lt;p&gt;There are ways you can support developers. For instance, I might one day make a whole $10 dollars from &lt;a href=&quot;https://gratipay.com/~josegonzalez/&quot;&gt;Gratipay donations&lt;/a&gt;, which is enough to buy two of the three venti mocha fraps I drink a day. There is also &lt;a href=&quot;https://flattr.com/&quot;&gt;flattr&lt;/a&gt;, but I honestly have no idea how to use it. Definitely some room to improve, here, though if the OpenSSL people can’t get the money they &lt;em&gt;actually&lt;/em&gt; need, I don’t have a snowball’s chance in hell of receiving a meaningful amount of donations to feed my cat.&lt;/p&gt;

&lt;p&gt;The only thing I can think of is, well, going back to charging for software. Having a paid software ecosystem around your projects seems to work nicely for those that can manage it. Certainly possible for some larger open-source projects - &lt;a href=&quot;https://www.elastic.co/&quot;&gt;there&lt;/a&gt; &lt;a href=&quot;https://www.mongodb.org/&quot;&gt;are&lt;/a&gt; &lt;a href=&quot;https://www.sugarcrm.com/&quot;&gt;many&lt;/a&gt; &lt;a href=&quot;https://convox.com/&quot;&gt;startups&lt;/a&gt; &lt;a href=&quot;https://www.docker.com/&quot;&gt;focused&lt;/a&gt; &lt;a href=&quot;https://www.joyent.com/&quot;&gt;around&lt;/a&gt; &lt;a href=&quot;https://about.gitlab.com/&quot;&gt;this&lt;/a&gt; &lt;a href=&quot;https://www.nginx.com/&quot;&gt;model&lt;/a&gt; - though I wonder how easy it would be for the every-day developer to start off.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Providing software support packages could also work, but now you are just consulting. I write open source code because it’s fun, not because I want to do work.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Tue, 26 Jan 2016 12:00:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/01/26/open-source-is-hard/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/01/26/open-source-is-hard/</guid>
        
        <category>rant</category>
        
        
        <category>rant</category>
        
      </item>
    
  </channel>
</rss>
