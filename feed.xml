<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jose Diaz-Gonzalez</title>
    <description>CakePHP Core Developer, Accidental Ops Guy, and Occasional Blogger</description>
    <link>http://josediazgonzalez.com/</link>
    <atom:link href="http://josediazgonzalez.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 12 Dec 2016 19:30:59 +0000</pubDate>
    <lastBuildDate>Mon, 12 Dec 2016 19:30:59 +0000</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Error Handling new Posts</title>
        <description>&lt;p&gt;A friend of mine asked for a custom website, so here I am, writing a custom cms. I know, there are plenty of systems out there that would handle his needs, but it’s also a good excuse to play around with CakePHP 3, so here we are.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the lazy, the codebase we’ll be working on will be available on &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016&quot;&gt;GitHub&lt;/a&gt;. I will be pushing each set of changes on the date when each blog post in this series is published. No cheating!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;updating-plugins&quot;&gt;Updating Plugins&lt;/h2&gt;

&lt;p&gt;Before we continue, lets be sure we’ve updated all our plugins. I like to do this each day so that I can get any bugfixes that come out for libraries my application depends upon. In this case, there are a few bugfixes for some CakePHP plugins, so we’ll grab those with the following &lt;code&gt;composer&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;composer update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Typically you would run tests at this stage, but since we have &lt;em&gt;yet&lt;/em&gt; to write any, that isn’t necessary.&lt;/p&gt;

&lt;p&gt;Let’s commit any updates:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add composer.lock
git commit -m &quot;Update unpinned dependencies&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;You should always verify your application still works after upgrading dependencies.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;todays-todolist&quot;&gt;Today’s todolist&lt;/h2&gt;

&lt;p&gt;We’ll take care of the following two items today.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Only showing action buttons to add valid post types.&lt;/li&gt;
  &lt;li&gt;Redirecting when a new post is being added with an unspecified or invalid type.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;modifying-shown-buttons&quot;&gt;Modifying shown buttons&lt;/h3&gt;

&lt;p&gt;On the &lt;code&gt;/posts&lt;/code&gt; page, we currently show an &lt;code&gt;Add&lt;/code&gt; button and a &lt;code&gt;Home&lt;/code&gt; button. We should only show Add buttons, but &lt;em&gt;only&lt;/em&gt; for post types that exist. To do so, we’ll replace the scaffolded &lt;code&gt;actions&lt;/code&gt; viewblock with one that contains valid action urls. I’ve added the following to our &lt;code&gt;PostsListener::beforeHandleIndex()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;_controller()-&amp;gt;set(&#39;indexActions&#39;, $this-&amp;gt;_getIndexActions());
$this-&amp;gt;_action()-&amp;gt;config(&#39;scaffold.viewblocks&#39;, [
    &#39;actions&#39; =&amp;gt; [
        &#39;admin/Posts/index-actions&#39; =&amp;gt; &#39;element&#39;,
    ],
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’re going to rely on a special element - &lt;code&gt;src/Template/Element/admin/Posts/index-actions.ctp&lt;/code&gt; - to render the variable &lt;code&gt;indexActions&lt;/code&gt; for any viewblock named &lt;code&gt;actions&lt;/code&gt;. The contents of the &lt;code&gt;PostsListener::_getIndexActions()&lt;/code&gt; method is as follows.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Get valid actions for the index page
 *
 * @return array
 */
protected function _getIndexActions()
{
    $indexActions = [];
    $postTypes = PostsTable::postTypes();
    foreach ($postTypes as $class =&amp;gt; $alias) {
        $indexActions[] = [
            &#39;title&#39; =&amp;gt; __(&#39;Add {0}&#39;, $alias),
            &#39;url&#39; =&amp;gt; [&#39;controller&#39; =&amp;gt; &#39;Posts&#39;, &#39;action&#39; =&amp;gt; &#39;add&#39;, $alias],
            &#39;options&#39; =&amp;gt; [&#39;class&#39; =&amp;gt; &#39;btn btn-default&#39;],
            &#39;method&#39; =&amp;gt; &#39;GET&#39;,
        ];
    }
    return $indexActions;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty straightforward. I retrieve all available &lt;code&gt;PostType&lt;/code&gt; classes, then return each one as a link.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Remember to add &lt;code&gt;use App\Model\Table\PostsTable;&lt;/code&gt; to the top of your class, otherwise you’ll get an error regarding the class not existing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now on to our &lt;code&gt;index-actions.ctp&lt;/code&gt; template.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
foreach ($indexActions as $config) {
    echo $this-&amp;gt;element(&#39;CrudView.action-button&#39;, [&#39;config&#39; =&amp;gt; $config]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, I’m relying on the &lt;code&gt;Crud.action-button&lt;/code&gt; template to render the correct button link, so if that ever changes, we’ll get the correct update on our end. Time to commit:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Listener/PostsListener.php src/Template/Element/admin/Posts/index-actions.ctp
git commit -m &quot;Only show the buttons we want to show on the /posts page&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;redirecting-on-bad-blog-post-types&quot;&gt;Redirecting on bad blog post types&lt;/h3&gt;

&lt;p&gt;This one is pretty simple. For the &lt;code&gt;add&lt;/code&gt; action, we should only allow registered post types. This is my modified &lt;code&gt;PostsListener::beforeRenderAdd()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Before Render Add Action
 *
 * @param \Cake\Event\Event $event Event
 * @return void
 */
public function beforeRenderAdd(Event $event)
{
    $passedArgs = $this-&amp;gt;_request()-&amp;gt;param(&#39;pass&#39;);
    if (!PostsTable::isValidPostType($passedArgs)) {
        return $this-&amp;gt;_controller()-&amp;gt;redirect([
            &#39;controller&#39; =&amp;gt; &#39;Posts&#39;,
            &#39;action&#39; =&amp;gt; &#39;index&#39;,
        ]);
    }

    $event-&amp;gt;subject-&amp;gt;entity-&amp;gt;type = $passedArgs[0];
    $this-&amp;gt;_setPostType($event, $event-&amp;gt;subject-&amp;gt;entity-&amp;gt;getPostType());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, here is the method that checks if the PostType is valid. I’ve added it to the &lt;code&gt;PostTypesTrait&lt;/code&gt; that is used in the &lt;code&gt;PostsTable&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Checks if the passed arguments contain a valid post type
 *
 * @param string $passedArgs a list of passed request parameters
 * @return bool
 */
public static function isValidPostType($passedArgs)
{
    if (empty($passedArgs[0])) {
        return false;
    }

    $validPostType = false;
    $postTypes = static::postTypes();
    foreach ($postTypes as $class =&amp;gt; $alias) {
        if ($passedArgs[0] === $alias) {
            $validPostType = true;
            break;
        }
    }
    return $validPostType;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we should redirect back &lt;em&gt;even if&lt;/em&gt; the user tries to set an invalid post type. Commit time!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Listener/PostsListener.php src/Model/Table/Traits/PostTypesTrait.php
git commit -m &quot;Ensure users do not try to add a non-existent post type&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;homework&quot;&gt;Homework!&lt;/h2&gt;

&lt;p&gt;Create a validation rule for the &lt;code&gt;PostsTable&lt;/code&gt; that only allows &lt;code&gt;type&lt;/code&gt; to be a valid post type. Good luck!&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;For those that may just want to ensure their codebase matches what has been done so far, the codebase is available on GitHub and tagged as &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016/tree/0.0.12&quot;&gt;0.0.12&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We’re quickly wrapping up our blog’s admin panel. While there will definitely be a few more things to do to clean up the UI, it’s in great shape now. We’ll be turning our attention to the other post types now, which hopefully won’t require too many additions.&lt;/p&gt;

&lt;p&gt;Be sure to follow along via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2016 CakeAdvent Calendar. Come back tomorrow for more delicious content.&lt;/p&gt;
</description>
        <pubDate>Mon, 12 Dec 2016 12:06:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/12/12/error-handling-new-posts/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/12/12/error-handling-new-posts/</guid>
        
        <category>elements</category>
        
        <category>events</category>
        
        <category>viewblocks</category>
        
        <category>cakeadvent-2016</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Unifying our admin dashboard views</title>
        <description>&lt;p&gt;A friend of mine asked for a custom website, so here I am, writing a custom cms. I know, there are plenty of systems out there that would handle his needs, but it’s also a good excuse to play around with CakePHP 3, so here we are.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the lazy, the codebase we’ll be working on will be available on &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016&quot;&gt;GitHub&lt;/a&gt;. I will be pushing each set of changes on the date when each blog post in this series is published. No cheating!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;updating-plugins&quot;&gt;Updating Plugins&lt;/h2&gt;

&lt;p&gt;Before we continue, lets be sure we’ve updated all our plugins. I like to do this each day so that I can get any bugfixes that come out for libraries my application depends upon. In this case, there are a few bugfixes for some CakePHP plugins, so we’ll grab those with the following &lt;code&gt;composer&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;composer update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Typically you would run tests at this stage, but since we have &lt;em&gt;yet&lt;/em&gt; to write any, that isn’t necessary.&lt;/p&gt;

&lt;p&gt;Let’s commit any updates:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add composer.lock
git commit -m &quot;Update unpinned dependencies&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;You should always verify your application still works after upgrading dependencies.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;todays-todolist&quot;&gt;Today’s todolist&lt;/h2&gt;

&lt;p&gt;We’ll take care of the following three items today.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The login screen looks different from the rest of the site.&lt;/li&gt;
  &lt;li&gt;The &lt;code&gt;/users/edit&lt;/code&gt; page has the wrong look and wrong sidebar.&lt;/li&gt;
  &lt;li&gt;The &lt;code&gt;/users/forgot-password&lt;/code&gt; and &lt;code&gt;/users/reset-password&lt;/code&gt; pages has the wrong look and wrong sidebar.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;using-crudview-for-the-login-page&quot;&gt;Using CrudView for the Login Page&lt;/h2&gt;

&lt;p&gt;First, lets make sure that we are using &lt;code&gt;CrudView&lt;/code&gt; for the login action. I added the following property to my &lt;code&gt;UsersController&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * A list of actions where the CrudView.View
 * listener should be enabled. If an action is
 * in this list but `isAdmin` is false, the
 * action will still be rendered via CrudView.View
 *
 * @var array
 */
protected $adminActions = [&#39;login&#39;];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we’ll want to delete the &lt;code&gt;src/Template/Users/login.ctp&lt;/code&gt; and &lt;code&gt;src/Template/Users/add.ctp&lt;/code&gt; files. This will force &lt;code&gt;CrudView&lt;/code&gt; to take control. Once that is done, we’ll also need to set a view for the action. CrudView does not currently come with a view for the login action, so we’ll repurpose the &lt;code&gt;CrudView.add.ctp&lt;/code&gt; template. I added the following to my &lt;code&gt;UsersListener::beforeHandle()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;if ($event-&amp;gt;subject-&amp;gt;action === &#39;login&#39;) {
    $this-&amp;gt;beforeHandleLogin($event);

    return;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally, here is my &lt;code&gt;UsersListener::beforeHandleLogin()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Before Handle Login Action
 *
 * @param \Cake\Event\Event $event Event
 * @return void
 */
public function beforeHandleLogin(Event $event)
{
    $this-&amp;gt;_controller()-&amp;gt;set([
        &#39;viewVar&#39; =&amp;gt; &#39;login&#39;,
        &#39;login&#39; =&amp;gt; null,
    ]);
    $this-&amp;gt;_controller()-&amp;gt;viewBuilder()-&amp;gt;template(&#39;add&#39;);
    $this-&amp;gt;_action()-&amp;gt;config(&#39;scaffold.page_title&#39;, &#39;Login&#39;);
    $this-&amp;gt;_action()-&amp;gt;config(&#39;scaffold.fields&#39;, [
        &#39;email&#39;,
        &#39;password&#39;,
    ]);
    $this-&amp;gt;_action()-&amp;gt;config(&#39;scaffold.viewblocks&#39;, [
        &#39;actions&#39; =&amp;gt; [&#39;&#39; =&amp;gt; &#39;text&#39;],
    ]);
    $this-&amp;gt;_action()-&amp;gt;config(&#39;scaffold.sidebar_navigation&#39;, false);
    $this-&amp;gt;_action()-&amp;gt;config(&#39;scaffold.disable_extra_buttons&#39;, true);
    $this-&amp;gt;_action()-&amp;gt;config(&#39;scaffold.submit_button_text&#39;, &#39;Login&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All of these options are available via CrudView, but check out the docs if you have any questions about them. You should be able to see a &lt;code&gt;/users/login&lt;/code&gt; page with our normal CrudView styling now.&lt;/p&gt;

&lt;p&gt;I’m committing my changes now:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;rm src/Template/Users/add.ctp src/Template/Users/login.ctp
git rm src/Template/Users/add.ctp src/Template/Users/login.ctp
git add src/Controller/UsersController.php src/Listener/UsersListener.php
git commit -m &quot;Use CrudView to template out the login page&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;using-crudview-for-the-account-page&quot;&gt;Using CrudView for the Account Page&lt;/h2&gt;

&lt;p&gt;This is going to be pretty similar to the login page. Let’s add &lt;code&gt;edit&lt;/code&gt; to the &lt;code&gt;UsersController::$adminActions&lt;/code&gt; property.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * A list of actions where the CrudView.View
 * listener should be enabled. If an action is
 * in this list but `isAdmin` is false, the
 * action will still be rendered via CrudView.View
 *
 * @var array
 */
protected $adminActions = [
    &#39;edit&#39;,
    &#39;login&#39;
];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we’ll want to delete the &lt;code&gt;src/Template/Users/edit.ctp&lt;/code&gt;. To customize the view, we can modify our &lt;code&gt;UsersListener::beforeHandleEdit()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Before Handle Edit Action
 *
 * @param \Cake\Event\Event $event Event
 * @return void
 */
public function beforeHandleEdit(Event $event)
{
    $userId = $this-&amp;gt;_controller()-&amp;gt;Auth-&amp;gt;user(&#39;id&#39;);
    $event-&amp;gt;subject-&amp;gt;args = [$userId];

    $this-&amp;gt;_action()-&amp;gt;saveOptions([&#39;validate&#39; =&amp;gt; &#39;account&#39;]);
    $this-&amp;gt;_action()-&amp;gt;config(&#39;scaffold.page_title&#39;, &#39;Profile&#39;);
    $this-&amp;gt;_action()-&amp;gt;config(&#39;scaffold.disable_extra_buttons&#39;, true);
    $this-&amp;gt;_action()-&amp;gt;config(&#39;scaffold.viewblocks&#39;, [
        &#39;actions&#39; =&amp;gt; [&#39;&#39; =&amp;gt; &#39;text&#39;],
    ]);
    $this-&amp;gt;_action()-&amp;gt;config(&#39;scaffold.fields&#39;, [
        &#39;email&#39;,
        &#39;password&#39; =&amp;gt; [
            &#39;required&#39; =&amp;gt; false,
        ],
        &#39;confirm_password&#39; =&amp;gt; [
            &#39;type&#39; =&amp;gt; &#39;password&#39;,
        ],
        &#39;avatar&#39; =&amp;gt; [
            &#39;type&#39; =&amp;gt; &#39;file&#39;
        ],
    ]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ou should be able to see a &lt;code&gt;/users/edit&lt;/code&gt; page with our normal CrudView styling now. One thing that is missing is the profile image embed. That’s unfortunately non-trivial to insert into CrudView at the moment, so we are skipping that.&lt;/p&gt;

&lt;p&gt;Commit!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;rm src/Template/Users/edit.ctp
git rm src/Template/Users/edit.ctp
git add src/Controller/UsersController.php src/Listener/UsersListener.php
git commit -m &quot;Use CrudView to template out the edit page&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;using-crudview-for-the-password-reset-flow&quot;&gt;Using CrudView for the Password Reset Flow&lt;/h2&gt;

&lt;p&gt;This is more or less a rehash of the above. Lets start by deleting the &lt;code&gt;src/Template/Users/forgot_password.ctp&lt;/code&gt; and &lt;code&gt;src/Template/Users/reset_password.ctp&lt;/code&gt; files. Next, update the &lt;code&gt;UsersController::$adminActions&lt;/code&gt; property to include these to actions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * A list of actions where the CrudView.View
 * listener should be enabled. If an action is
 * in this list but `isAdmin` is false, the
 * action will still be rendered via CrudView.View
 *
 * @var array
 */
protected $adminActions = [
    &#39;edit&#39;,
    &#39;login&#39;,
    &#39;forgotPassword&#39;,
    &#39;resetPassword&#39;,
];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As always, we’ll need to update &lt;code&gt;UsersController::beforeHandle()&lt;/code&gt; with new sections for our specific actions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;if ($event-&amp;gt;subject-&amp;gt;action === &#39;forgotPassword&#39;) {
    $this-&amp;gt;beforeHandleForgotPassword($event);

    return;
}
if ($event-&amp;gt;subject-&amp;gt;action === &#39;resetPassword&#39;) {
    $this-&amp;gt;beforeHandleResetPassword($event);

    return;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lastly, here is the code for the above two methods.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Before Handle ForgotPassword Action
 *
 * @param \Cake\Event\Event $event Event
 * @return void
 */
public function beforeHandleForgotPassword(Event $event)
{
    $this-&amp;gt;_controller()-&amp;gt;set([
        &#39;viewVar&#39; =&amp;gt; &#39;forgotPassword&#39;,
        &#39;forgotPassword&#39; =&amp;gt; null,
    ]);
    $this-&amp;gt;_controller()-&amp;gt;viewBuilder()-&amp;gt;template(&#39;add&#39;);
    $this-&amp;gt;_action()-&amp;gt;config(&#39;scaffold.page_title&#39;, &#39;Forgot Password?&#39;);
    $this-&amp;gt;_action()-&amp;gt;config(&#39;scaffold.fields&#39;, [
        &#39;email&#39;,
    ]);
    $this-&amp;gt;_action()-&amp;gt;config(&#39;scaffold.viewblocks&#39;, [
        &#39;actions&#39; =&amp;gt; [&#39;&#39; =&amp;gt; &#39;text&#39;],
    ]);
    $this-&amp;gt;_action()-&amp;gt;config(&#39;scaffold.sidebar_navigation&#39;, false);
    $this-&amp;gt;_action()-&amp;gt;config(&#39;scaffold.disable_extra_buttons&#39;, true);
    $this-&amp;gt;_action()-&amp;gt;config(&#39;scaffold.submit_button_text&#39;, &#39;Send Password Reset Email&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Before Handle ResetPassword Action
 *
 * @param \Cake\Event\Event $event Event
 * @return void
 */
public function beforeHandleResetPassword(Event $event)
{
    $this-&amp;gt;_controller()-&amp;gt;set([
        &#39;viewVar&#39; =&amp;gt; &#39;resetPassword&#39;,
        &#39;resetPassword&#39; =&amp;gt; null,
    ]);
    $this-&amp;gt;_controller()-&amp;gt;viewBuilder()-&amp;gt;template(&#39;add&#39;);
    $this-&amp;gt;_action()-&amp;gt;config(&#39;scaffold.page_title&#39;, &#39;Enter a new password to reset your account&#39;);
    $this-&amp;gt;_action()-&amp;gt;config(&#39;scaffold.fields&#39;, [
        &#39;password&#39;,
    ]);
    $this-&amp;gt;_action()-&amp;gt;config(&#39;scaffold.viewblocks&#39;, [
        &#39;actions&#39; =&amp;gt; [&#39;&#39; =&amp;gt; &#39;text&#39;],
    ]);
    $this-&amp;gt;_action()-&amp;gt;config(&#39;scaffold.sidebar_navigation&#39;, false);
    $this-&amp;gt;_action()-&amp;gt;config(&#39;scaffold.disable_extra_buttons&#39;, true);
    $this-&amp;gt;_action()-&amp;gt;config(&#39;scaffold.submit_button_text&#39;, &#39;Reset Password&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s commit, as we’re done with all our edits for today.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;rm src/Template/Users/forgot_password.ctp src/Template/Users/reset_password.ctp
git rm src/Template/Users/forgot_password.ctp src/Template/Users/reset_password.ctp
git add src/Controller/UsersController.php src/Listener/UsersListener.php
git commit -m &quot;Use CrudView for password reset flow&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;For those that may just want to ensure their codebase matches what has been done so far, the codebase is available on GitHub and tagged as &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016/tree/0.0.11&quot;&gt;0.0.11&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Our users controller is now fully under the control of CrudView! We’ll take care of some weird ux issues when creating posts tomorrow.&lt;/p&gt;

&lt;p&gt;Be sure to follow along via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2016 CakeAdvent Calendar. Come back tomorrow for more delicious content.&lt;/p&gt;
</description>
        <pubDate>Sun, 11 Dec 2016 10:51:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/12/11/unifying-our-admin-dashboard-views/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/12/11/unifying-our-admin-dashboard-views/</guid>
        
        <category>events</category>
        
        <category>crud-view</category>
        
        <category>cakeadvent-2016</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Making the UI usable</title>
        <description>&lt;p&gt;A friend of mine asked for a custom website, so here I am, writing a custom cms. I know, there are plenty of systems out there that would handle his needs, but it’s also a good excuse to play around with CakePHP 3, so here we are.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the lazy, the codebase we’ll be working on will be available on &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016&quot;&gt;GitHub&lt;/a&gt;. I will be pushing each set of changes on the date when each blog post in this series is published. No cheating!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;errata-from-previous-posts&quot;&gt;Errata from previous posts&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code&gt;AbstractPostType&lt;/code&gt; class had errors in how it retrieved templates for a &lt;code&gt;PostType&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The &lt;code&gt;Template&lt;/code&gt; directory for the &lt;code&gt;BlogPostType&lt;/code&gt; plugin was misnamed to &lt;code&gt;Templates&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;There was no way to pre-seed data in a post-type instance for &lt;code&gt;get()&lt;/code&gt; calls.&lt;/li&gt;
  &lt;li&gt;If the passed in &lt;code&gt;Post&lt;/code&gt; object for a &lt;code&gt;PostType&lt;/code&gt; was missing &lt;code&gt;post_attributes&lt;/code&gt;, an error would appear&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks to those who’ve pointed out my derps. These fixes are available as the first commit in the current release.&lt;/p&gt;

&lt;h2 id=&quot;fixing-incongruity&quot;&gt;Fixing Incongruity&lt;/h2&gt;

&lt;p&gt;While we have a semblance of working code, a lot of it is a bit all over the place.:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We broke rendering of the home page (&lt;code&gt;/&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;There isn’t a way to go directly to adding a blog post, and instead we have to type out the url.&lt;/li&gt;
  &lt;li&gt;The login screen looks different from the rest of the site.&lt;/li&gt;
  &lt;li&gt;The &lt;code&gt;/users/edit&lt;/code&gt; page has the wrong look and wrong sidebar.&lt;/li&gt;
  &lt;li&gt;We don’t error check when there is no &lt;code&gt;PostType&lt;/code&gt; set for adding a post.&lt;/li&gt;
  &lt;li&gt;Our default user-facing theme is, well, lame. No offense CakePHP team, it’s just not the best default theme.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Over the next few posts, let’s fix some of these ux issues.&lt;/p&gt;

&lt;h2 id=&quot;refactoring-posttype-retrieval&quot;&gt;Refactoring PostType retrieval&lt;/h2&gt;

&lt;p&gt;Before we can setup the home page properly, we’ll need to refactor how we retrieve the PostType. I’d really rather not have a bunch of duplicated logic in our template layer when it can very easily go in a helper or elsewhere. I’m going to centralize retrieving the &lt;code&gt;PostType&lt;/code&gt; for an entity&lt;/p&gt;

&lt;p&gt;Now, lets make sure we can retrieve the correct element to display our &lt;code&gt;PostType&lt;/code&gt;. I’ll do so via a Trait on the &lt;code&gt;Post&lt;/code&gt; entity.&lt;/p&gt;

&lt;h3 id=&quot;preparing-traits&quot;&gt;Preparing Traits&lt;/h3&gt;

&lt;p&gt;Looking back at my codebase, I noticed that the &lt;code&gt;Table&lt;/code&gt; directory has a subdirectory for traits, but &lt;code&gt;Entity&lt;/code&gt; does not. Let’s correct that.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;mkdir -p src/Model/Entity/Traits
git mv src/Model/Entity/PasswordHashingTrait.php src/Model/Entity/Traits/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, update the reference in your &lt;code&gt;User&lt;/code&gt; entity for using this trait:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;use \App\Model\Entity\Traits\PasswordHashingTrait;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And update the namespace on that trait, or you’re gonna have a bad time:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;namespace App\Model\Entity\Traits;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Committing!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Model/Entity/User.php
git commit -m &quot;Move PasswordHashingTrait to correct location&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;getting-the-posttype-from-a-post-entity&quot;&gt;Getting the &lt;code&gt;PostType&lt;/code&gt; from a Post Entity&lt;/h3&gt;

&lt;p&gt;This is going to be a bit of refactoring. First, we’re going to add the &lt;code&gt;PostTypesTrait&lt;/code&gt; to our &lt;code&gt;PostsTable&lt;/code&gt;. We’ll also move it into the correct directory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git mv src/Traits/PostTypesTrait.php src/Model/Table/Traits/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now add it to the table:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;use \App\Model\Table\Traits\PostTypesTrait;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And update the namespace on that trait, or you’re gonna have a bad time:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;namespace App\Model\Table\Traits;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we’ll remove it from the &lt;code&gt;PostsListener&lt;/code&gt;. This will temporarily break the application, but bear with me. Once that’s done, we can start working on making it so a &lt;code&gt;Post&lt;/code&gt; entity knows what &lt;code&gt;PostType&lt;/code&gt; it has, and can return it. I’ve created the following &lt;code&gt;PostTypeTrait&lt;/code&gt; at &lt;code&gt;src/Model/Entity/Traits/PostTypeTrait.php&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App\Model\Entity\Traits;

use App\Model\Entity\Post;
use App\Model\Table\PostsTable;
use Cake\Core\App;

trait PostTypeTrait
{
    public function getPostType()
    {
        $postTypeClassName = $this-&amp;gt;_postTypeAliasToClass($this-&amp;gt;type);
        $className = App::className($postTypeClassName, &#39;PostType&#39;);
        return new $className($this);
    }

    /**
     * Returns a class name for a given post type alias
     *
     * @param string $typeAlias the alias of a post type class
     * @return string
     */
    protected function _postTypeAliasToClass($typeAlias)
    {
        $className = null;
        $postTypes = PostsTable::postTypes();
        foreach ($postTypes as $class =&amp;gt; $alias) {
            if ($alias === $typeAlias) {
                $className = $class;
            }
        }
        return $className;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You’ll notice I took &lt;code&gt;_postTypeAliasToClass&lt;/code&gt; from &lt;code&gt;PostsListener&lt;/code&gt; and modified it to use the &lt;code&gt;PostsTable&lt;/code&gt; instead. I believe this a better place to put it, but feel free to argue with me. I’ll also remove &lt;code&gt;PostsListener::_postTypeAliasToClass()&lt;/code&gt;, as we’ll be refactoring the &lt;code&gt;PostsListener&lt;/code&gt; to use my new setup.&lt;/p&gt;

&lt;p&gt;Add the above trait &lt;em&gt;inside&lt;/em&gt; of your &lt;code&gt;Post&lt;/code&gt; entity class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;use \App\Model\Entity\Traits\PostTypeTrait;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lets commit our changes for now.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Listener/PostsListener.php src/Model/Entity/Post.php src/Model/Entity/Traits/PostTypeTrait.php src/Model/Table/PostsTable.php src/Traits/PostTypesTrait.php -&amp;gt; src/Model/Table/Traits/PostTypesTrait.php
git commit -m &quot;Move post type retrieval into the Post entity&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;refactoring-postslistener&quot;&gt;Refactoring PostsListener&lt;/h3&gt;

&lt;p&gt;Because we’ve basically kneecapped our &lt;code&gt;PostsListener&lt;/code&gt;, the whole admin is probably flipping a crap. I’ll begin by changing &lt;code&gt;PostsListener::_setPostType()&lt;/code&gt; to accept an &lt;code&gt;AbstractPostType&lt;/code&gt; instance. Add the following &lt;code&gt;use&lt;/code&gt; call to the top of the &lt;code&gt;PostsListener&lt;/code&gt; class declaration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;use App\PostType\AbstractPostType;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, change the &lt;code&gt;PostsListener::_setPostType()&lt;/code&gt; method to the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Set the post type for add/edit actions
 *
 * @param \Cake\Event\Event $event Event
 * @param string $postType the name of a post type class
 * @return void
 */
protected function _setPostType(Event $event, AbstractPostType $postType)
{
    $fields = [];
    foreach ($postType-&amp;gt;schema()-&amp;gt;fields() as $field) {
        $fields[$field] = [
            &#39;type&#39; =&amp;gt; $postType-&amp;gt;schema()-&amp;gt;fieldType($field)
        ];
    }

    $viewVars = $postType-&amp;gt;viewVars();
    $viewVars[&#39;fields&#39;] = $fields;
    $this-&amp;gt;_controller()-&amp;gt;set($viewVars);
    $event-&amp;gt;subject-&amp;gt;set([&#39;entity&#39; =&amp;gt; $postType]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we need to fix all references to this method. I’ve changed &lt;code&gt;PostsListener::beforeRenderAdd()&lt;/code&gt; almost completely, and it’s much smaller.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Before Render Add Action
 *
 * @param \Cake\Event\Event $event Event
 * @return void
 */
public function beforeRenderAdd(Event $event)
{
    $passedArgs = $this-&amp;gt;_request()-&amp;gt;param(&#39;pass&#39;);
    $event-&amp;gt;subject-&amp;gt;entity-&amp;gt;type = $passedArgs[0];
    $this-&amp;gt;_setPostType($event, $event-&amp;gt;subject-&amp;gt;entity-&amp;gt;getPostType());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;PostsListener::beforeRenderEdit()&lt;/code&gt; gets a similar facelift.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Before Render Edit Action
 *
 * @param \Cake\Event\Event $event Event
 * @return void
 */
public function beforeRenderEdit(Event $event)
{
    $entity = $event-&amp;gt;subject-&amp;gt;entity;
    $this-&amp;gt;_setPostType($event, $entity-&amp;gt;getPostType());
    if ($this-&amp;gt;_request()-&amp;gt;is(&#39;get&#39;)) {
        $this-&amp;gt;_request()-&amp;gt;data = $event-&amp;gt;subject-&amp;gt;entity-&amp;gt;data($entity);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, the &lt;code&gt;PostsListener::beforeSave()&lt;/code&gt; method needs a minor change. Right after we set the &lt;code&gt;type&lt;/code&gt; on the entity, we’ll remove the following three lines and replace them with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$postType = $event-&amp;gt;subject-&amp;gt;entity-&amp;gt;getPostType();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s it, our admin dashboard should be in working order again. Let’s save our work:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Listener/PostsListener.php
git commit -m &quot;Fix PostsListener&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;render--properly&quot;&gt;Render &lt;code&gt;/&lt;/code&gt; properly&lt;/h2&gt;

&lt;p&gt;Our user will rely heavily on themes, but the default state of the blog should be useful. First, lets remove the &lt;code&gt;PostsController::home()&lt;/code&gt; action and use the default template for the view layer. I’ve created &lt;code&gt;src/Templates/Posts/home.ctp&lt;/code&gt; with the following contents (feel free to replace what is already there):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;div class=&quot;posts index large-12 medium-12 columns content&quot;&amp;gt;
    &amp;lt;h3&amp;gt;&amp;lt;?= __(&#39;Posts&#39;) ?&amp;gt;&amp;lt;/h3&amp;gt;
    &amp;lt;?php
        foreach ($posts as $post) {
            $postType = $post-&amp;gt;getPostType();
            echo $this-&amp;gt;element($postType-&amp;gt;indexTemplate(), [&#39;post&#39; =&amp;gt; $postType]);
        }
    ?&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you go to the homepage, you’ll see a bunch of posts, but no actual content for each, even though the &lt;code&gt;BlogPostType&lt;/code&gt; index template displays the &lt;code&gt;body&lt;/code&gt;. What gives?&lt;/p&gt;

&lt;p&gt;Well, the default find for this view &lt;em&gt;does not&lt;/em&gt; include related data. This can be easily ameliorated by using a custom find. As I’ve done before, I’ll create a trait for it in &lt;code&gt;src/Model/Table/Traits/BlogFinderTrait.php&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App\Model\Table\Traits;

trait BlogFinderTrait
{
    /**
     * Find posts with related data
     *
     * @param \Cake\ORM\Query $query The query to find with
     * @param array $options The options to find with
     * @return \Cake\ORM\Query The query builder
     */
    public function findBlog($query, $options)
    {
        return $this-&amp;gt;find()-&amp;gt;contain(&#39;PostAttributes&#39;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Simple enough. Let’s add it &lt;em&gt;inside&lt;/em&gt; our &lt;code&gt;PostsTable&lt;/code&gt; class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;use \App\Model\Table\Traits\BlogFinderTrait;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we’ll need to ensure our finder is in use for the &lt;code&gt;PostsController::home()&lt;/code&gt; action. We’ll add a special case to our &lt;code&gt;PostsListener::beforeHandle()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;if ($this-&amp;gt;_controller()-&amp;gt;request-&amp;gt;action === &#39;home&#39;) {
    $this-&amp;gt;beforeHandleHome($event);

    return;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here is the &lt;code&gt;PostsListener::beforeHandleHome()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Before Handle Home Action
 *
 * @param \Cake\Event\Event $event Event
 * @return void
 */
public function beforeHandleHome(Event $event)
{
    $this-&amp;gt;_action()-&amp;gt;config(&#39;findMethod&#39;, &#39;blog&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now you can go to &lt;code&gt;/&lt;/code&gt; and you’ll see all of our blog posts! We’ll commit our changes for today as we’re done here.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Controller/PostsController.php src/Listener/PostsListener.php src/Model/Table/PostsTable.php src/Model/Table/Traits/BlogFinderTrait.php src/Template/Posts/home.ctp
git commit -m &quot;Finally working homepage&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;For those that may just want to ensure their codebase matches what has been done so far, the codebase is available on GitHub and tagged as &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016/tree/0.0.10&quot;&gt;0.0.10&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We’ve refactored quite a bit of code, but still have a few things to fix up before we can go back to building out more custom post types. Hopefully we can make quick work of the rest of our todo list.&lt;/p&gt;

&lt;p&gt;Be sure to follow along via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2016 CakeAdvent Calendar. Come back tomorrow for more delicious content.&lt;/p&gt;
</description>
        <pubDate>Sat, 10 Dec 2016 09:32:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/12/10/making-the-ui-usable/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/12/10/making-the-ui-usable/</guid>
        
        <category>custom-find</category>
        
        <category>crud-view</category>
        
        <category>refactoring</category>
        
        <category>templates</category>
        
        <category>cakeadvent-2016</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Saving Custom Post Types</title>
        <description>&lt;p&gt;A friend of mine asked for a custom website, so here I am, writing a custom cms. I know, there are plenty of systems out there that would handle his needs, but it’s also a good excuse to play around with CakePHP 3, so here we are.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the lazy, the codebase we’ll be working on will be available on &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016&quot;&gt;GitHub&lt;/a&gt;. I will be pushing each set of changes on the date when each blog post in this series is published. No cheating!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;errata-from-previous-post&quot;&gt;Errata from previous post&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code&gt;AbstractPostType&lt;/code&gt; class is missing the &lt;code&gt;use App\Model\Entity\Post;&lt;/code&gt; statement in the class declaration.&lt;/li&gt;
  &lt;li&gt;Added &lt;code&gt;unset($data[&#39;user&#39;]);&lt;/code&gt; to &lt;code&gt;AbstractPostType::data()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks to those who’ve pointed out my derps. These fixes are available as the first commit in the current release.&lt;/p&gt;

&lt;h2 id=&quot;updating-plugins&quot;&gt;Updating Plugins&lt;/h2&gt;

&lt;p&gt;Before we continue, lets be sure we’ve updated all our plugins. I like to do this each day so that I can get any bugfixes that come out for libraries my application depends upon. In this case, there are a few bugfixes for some CakePHP plugins, so we’ll grab those with the following &lt;code&gt;composer&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;composer update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Typically you would run tests at this stage, but since we have &lt;em&gt;yet&lt;/em&gt; to write any, that isn’t necessary.&lt;/p&gt;

&lt;p&gt;Let’s commit any updates:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add composer.lock
git commit -m &quot;Update unpinned dependencies&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;You should always verify your application still works after upgrading dependencies.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;handling-edits&quot;&gt;Handling Edits&lt;/h2&gt;

&lt;p&gt;Our previous post only handled the &lt;code&gt;add&lt;/code&gt; action, while we’ll need to also support the &lt;code&gt;edit&lt;/code&gt; action. I’ve extracted the logic necessary for both into the &lt;code&gt;PostsListener::_setPostType()&lt;/code&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Set the post type for add/edit actions
 *
 * @param \Cake\Event\Event $event Event
 * @param string $postType the name of a post type class
 * @return void
 */
protected function _setPostType(Event $event, $postType)
{
    $className = App::className($postType, &#39;PostType&#39;);
    $postType = new $className;
    $fields = [];
    foreach ($postType-&amp;gt;schema()-&amp;gt;fields() as $field) {
        $fields[$field] = [
            &#39;type&#39; =&amp;gt; $postType-&amp;gt;schema()-&amp;gt;fieldType($field)
        ];
    }

    $viewVars = $postType-&amp;gt;viewVars();
    $viewVars[&#39;fields&#39;] = $fields;
    $this-&amp;gt;_controller()-&amp;gt;set($viewVars);
    $event-&amp;gt;subject-&amp;gt;set([&#39;entity&#39; =&amp;gt; $postType]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As well, I moved the alias to class name mapping into it’s own function so that it can be used for the edit action:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Returns a class name for a given post type alias
 *
 * @param string $typeAlias the alias of a post type class
 * @return string
 */
public function _postTypeAliasToClass($typeAlias)
{
    $className = null;
    $postTypes = PostsListener::postTypes();
    foreach ($postTypes as $class =&amp;gt; $alias) {
        if ($alias === $typeAlias) {
            $className = $class;
        }
    }
    return $className;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’ve also added a new &lt;code&gt;PostsListener::beforeRenderEdit()&lt;/code&gt; method to perform all the logic necessary for setting the correct post type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Before Render Edit Action
 *
 * @param \Cake\Event\Event $event Event
 * @return void
 */
public function beforeRenderEdit(Event $event)
{
    $entity = $event-&amp;gt;subject-&amp;gt;entity;
    $className = $this-&amp;gt;_postTypeAliasToClass($entity-&amp;gt;type);
    $this-&amp;gt;_setPostType($event, $className);
    if ($this-&amp;gt;_request()-&amp;gt;is(&#39;get&#39;)) {
        $this-&amp;gt;request-&amp;gt;data = $event-&amp;gt;subject-&amp;gt;entity-&amp;gt;data($entity);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to set the post type for an edit action, we need ensure we invoke the &lt;code&gt;PostsListener::beforeRenderEdit()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Finally, we need to update &lt;code&gt;PostsListener::beforeRenderAdd()&lt;/code&gt; to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Before Render Add Action
 *
 * @param \Cake\Event\Event $event Event
 * @return void
 */
public function beforeRenderAdd(Event $event)
{
    $passedArgs = $this-&amp;gt;_request()-&amp;gt;param(&#39;pass&#39;);
    $className = null;
    if (!empty($passedArgs)) {
        $className = $this-&amp;gt;_postTypeAliasToClass($passedArgs[0]);
    }

    if ($className !== null) {
        $this-&amp;gt;_setPostType($event, $className);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time to commit our changes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Listener/PostsListener.php
git commit -m &quot;Handle both add and edit saves&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;associating-a-user-with-a-post&quot;&gt;Associating a User with a Post&lt;/h2&gt;

&lt;p&gt;When a post is created or edited, we’ll want to ensure that it is properly associated with the current user. This is pretty simple, as we can do this automatically in the &lt;code&gt;beforeSave&lt;/code&gt;. We’ll start by mapping the event handler in our &lt;code&gt;PostsListener::implementedEvents()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&#39;Crud.beforeSave&#39; =&amp;gt; &#39;beforeSave&#39;,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally, here is the event handler itself. It’s pretty straightforward:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Before Save
 *
 * @param \Cake\Event\Event $event Event
 * @return void
 */
public function beforeSave(Event $event)
{
    $event-&amp;gt;subject-&amp;gt;entity-&amp;gt;user_id = $this-&amp;gt;_controller()-&amp;gt;Auth-&amp;gt;user(&#39;id&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Commit!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Listener/PostsListener.php
git commit -m &quot;Set the user_id to the currently authenticated user&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;saving-extra-fields-in-the-postattributes-table&quot;&gt;Saving extra fields in the post_attributes table&lt;/h2&gt;

&lt;p&gt;Since we have a few extra fields, they all need to be saved as &lt;code&gt;post_attributes&lt;/code&gt;. The easiest way is to hook into our new &lt;code&gt;PostsListener::beforeSave()&lt;/code&gt; method and massage the entity. We’ll modify our &lt;code&gt;PostsListener::beforeSave()&lt;/code&gt; to look like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Before Save
 *
 * @param \Cake\Event\Event $event Event
 * @return void
 */
public function beforeSave(Event $event)
    $type = $event-&amp;gt;subject-&amp;gt;entity-&amp;gt;type;
    if (empty($type)) {
        $passedArgs = $this-&amp;gt;_request()-&amp;gt;param(&#39;pass&#39;);
        $type = $passedArgs[0];
    }

    $event-&amp;gt;subject-&amp;gt;entity-&amp;gt;type = $type;
    $postTypeClassName = $this-&amp;gt;_postTypeAliasToClass($type);
    $className = App::className($postTypeClassName, &#39;PostType&#39;);
    $postType = new $className;
    $validFields = $postType-&amp;gt;schema()-&amp;gt;fields();

    $postAttributes = [];
    $PostsTable = TableRegistry::get(&#39;Posts&#39;);
    $postColumns = $PostsTable-&amp;gt;schema()-&amp;gt;columns();
    foreach ($event-&amp;gt;subject-&amp;gt;entity-&amp;gt;toArray() as $field =&amp;gt; $value) {
        if (!in_array($field, $postColumns) &amp;amp;&amp;amp; in_array($field, $validFields)) {
            $postAttributes[] = [
                &#39;name&#39; =&amp;gt; $field,
                &#39;value&#39; =&amp;gt; $value,
            ];
        }
    }

    $data = [
        &#39;user_id&#39; =&amp;gt; $this-&amp;gt;_controller()-&amp;gt;Auth-&amp;gt;user(&#39;id&#39;),
        &#39;type&#39; =&amp;gt; $type,
        &#39;post_attributes&#39; =&amp;gt; $postAttributes,
    ] + $this-&amp;gt;_request()-&amp;gt;data;
    if (empty($data[&#39;published_date&#39;])) {
        $data[&#39;published_date&#39;] = Time::now();
    }

    $PostsTable-&amp;gt;patchEntity($event-&amp;gt;subject-&amp;gt;entity, $data);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lots of code there, so lets go over it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Still setting the &lt;code&gt;user_id&lt;/code&gt; to the currently logged in user, just later, and via &lt;code&gt;PostsTable::patchEntity()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;We need to retrieve all valid fields for the current post type. Users should &lt;em&gt;never&lt;/em&gt; be able to save data that we don’t expect as extra attributes.&lt;/li&gt;
  &lt;li&gt;I’m building an array of &lt;code&gt;postAttributes&lt;/code&gt; from the set post fields where:
    &lt;ul&gt;
      &lt;li&gt;the field isn’t a column of the &lt;code&gt;post&lt;/code&gt; entity&lt;/li&gt;
      &lt;li&gt;the field is allowed to be saved for the &lt;code&gt;PostType&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;I’m setting the default &lt;code&gt;published_date&lt;/code&gt; to the current time if it isn’t already set. We’ll come back to this at a later date (pun intended).&lt;/li&gt;
  &lt;li&gt;We are patching our &lt;code&gt;post&lt;/code&gt; entity with the list of postAttributes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Remember to add the following &lt;code&gt;use&lt;/code&gt; call to your &lt;code&gt;PostsListener&lt;/code&gt; class declaration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;use Cake\I18n\Time;
use Cake\ORM\TableRegistry;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dope. You can try going to &lt;code&gt;/posts/add/blog&lt;/code&gt; to add a blog post, and then edits should also work fine. It’s a bit nasty looking, but it’ll do for now.&lt;/p&gt;

&lt;p&gt;Lets save our work for now.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Listener/PostsListener.php
git commit -m &quot;Implement post saving&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;For those that may just want to ensure their codebase matches what has been done so far, the codebase is available on GitHub and tagged as &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016/tree/0.0.9&quot;&gt;0.0.9&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Posts can be added and saved hurray! We’ll definitely use this as a good base for building out our CMS, and while we don’t yet have a way to select a post-type, that should come Real Soon™.&lt;/p&gt;

&lt;p&gt;Be sure to follow along via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2016 CakeAdvent Calendar. Come back tomorrow for more delicious content.&lt;/p&gt;
</description>
        <pubDate>Fri, 09 Dec 2016 10:40:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/12/09/saving-custom-post-types/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/12/09/saving-custom-post-types/</guid>
        
        <category>crud</category>
        
        <category>events</category>
        
        <category>forms</category>
        
        <category>cakeadvent-2016</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Displaying Custom Post Type Forms</title>
        <description>&lt;p&gt;A friend of mine asked for a custom website, so here I am, writing a custom cms. I know, there are plenty of systems out there that would handle his needs, but it’s also a good excuse to play around with CakePHP 3, so here we are.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the lazy, the codebase we’ll be working on will be available on &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016&quot;&gt;GitHub&lt;/a&gt;. I will be pushing each set of changes on the date when each blog post in this series is published. No cheating!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;baking-a-plugin&quot;&gt;Baking a Plugin&lt;/h2&gt;

&lt;p&gt;Last post, we described what a blog post plugin would look like. Let’s actually build it now. We’ll start by using &lt;code&gt;bake&lt;/code&gt; to generate the skeleton, which should also update our &lt;code&gt;composer.json&lt;/code&gt; to update code load paths.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake bake plugin BlogPostType -f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we’ll create a &lt;code&gt;plugins/BlogPostType/config/bootstrap.php&lt;/code&gt; to load our plugin post type.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
use Cake\Event\Event;
use Cake\Event\EventManager;

EventManager::instance()-&amp;gt;on(&#39;Posts.PostTypes.get&#39;, function (Event $event) {
  // The key is the Plugin name and the class
  // The value is what you want to display in the ui
  $event-&amp;gt;subject-&amp;gt;postTypes[&#39;BlogPostType.BlogPostType&#39;] = &#39;blog&#39;;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can remove the &lt;code&gt;plugins/BlogPostType/config/routes.php&lt;/code&gt; file as we wont need it&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We’ll want to ensure that the bootstrap file is loaded for this plugin, so check to ensure that your &lt;code&gt;config/bootstrap.php&lt;/code&gt; has the following &lt;code&gt;Plugin::load&lt;/code&gt; line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;Plugin::load(&#39;BlogPostType&#39;, [&#39;bootstrap&#39; =&amp;gt; true, &#39;routes&#39; =&amp;gt; false]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will now need the &lt;code&gt;PostType&lt;/code&gt; class that contains the code for our form. Here are the contents of &lt;code&gt;plugins/BlogPostType/PostType/BlogPostType.php&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace BlogPostType\PostType;

use App\PostType\AbstractPostType;
use Cake\Form\Schema;
use Cake\Validation\Validator;

class BlogPostType extends AbstractPostType
{
    protected function _buildSchema(Schema $schema)
    {
        $schema = parent::_buildSchema($schema);
        $schema-&amp;gt;addField(&#39;body&#39;, [&#39;type&#39; =&amp;gt; &#39;text&#39;]);
        return $schema
    }

    protected function _buildValidator(Validator $validator)
    {
        $validator = parent::_buildValidator($validator);
        $validator-&amp;gt;notEmpty(&#39;body&#39;, &#39;Please fill this field&#39;);
        return $validator;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reflecting upon what I’ll need to show on the view, I think I’ll want to make sure we always have &lt;em&gt;some&lt;/em&gt; defaults for the schema and validator, particularly around common fields. As well, I will need a way to extract viewVars that should be set by the post type for the view - for things like dropdown selects, for instance. I’ll take care of that now by adding the following methods to my &lt;code&gt;AbstractPostType&lt;/code&gt; class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;protected function _buildSchema(Schema $schema)
{
    $schema-&amp;gt;addField(&#39;user_id&#39;, [&#39;type&#39; =&amp;gt; &#39;hidden&#39;]);
    $schema-&amp;gt;addField(&#39;title&#39;, [&#39;type&#39; =&amp;gt; &#39;string&#39;]);
    $schema-&amp;gt;addField(&#39;url&#39;, [&#39;type&#39; =&amp;gt; &#39;string&#39;]);
    $schema-&amp;gt;addField(&#39;status&#39;, [&#39;type&#39; =&amp;gt; &#39;select&#39;]);
    return $schema
}

protected function _buildValidator(Validator $validator)
{
    $validator-&amp;gt;notEmpty(&#39;user_id&#39;, &#39;Please fill this field&#39;);
    $validator-&amp;gt;notEmpty(&#39;title&#39;, &#39;Please fill this field&#39;);
    $validator-&amp;gt;notEmpty(&#39;url&#39;, &#39;Please fill this field&#39;);
    $validator-&amp;gt;add(&#39;status&#39;, &#39;inList&#39;, [
        &#39;rule&#39; =&amp;gt; [&#39;inList&#39;, [&#39;active&#39;, &#39;inactive&#39;]],
        &#39;message&#39; =&amp;gt; &#39;Status must be either active or inactive&#39;
    ]);
    return $validator;
}

public function viewVars()
{
    $statuses = [&#39;active&#39; =&amp;gt; &#39;active&#39;, &#39;inactive&#39; =&amp;gt; &#39;inactive&#39;];
    return compact(&#39;statuses&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I noticed that we’re hard-coding the whitelisted fields in &lt;code&gt;AbstractPostType::_execute()&lt;/code&gt;, and that this whitelist is missing a few things. I’ve changed it to the following (which isn’t tested but should work):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$postFields = $postsTable-&amp;gt;schema()-&amp;gt;columns();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Getting back to our blog plugin, we’ll need two templates for displaying on the page. I’m actually going to use the same thing for both.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;h3&amp;gt;&amp;lt;?= $post-&amp;gt;get(&#39;title&#39;) ?&amp;gt;&amp;lt;/h3&amp;gt;
&amp;lt;div&amp;gt;
    &amp;lt;?= $post-&amp;gt;get(&#39;body&#39;) ?&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ve made a bit of progress, so lets save it :)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add composer.json config/bootstrap.php plugins/ src/PostType/AbstractPostType.php
git commit -m &quot;New BlogPostType&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;displaying-the-form&quot;&gt;Displaying the form&lt;/h2&gt;

&lt;p&gt;First, lets create a method of retrieving all PostTypes. I made the following trait at &lt;code&gt;src/Traits/PostTypesTrait.php&lt;/code&gt; to contain this logic:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App\Traits;

use Cake\Event\Event;
use Cake\Event\EventManager;
use Crud\Event\Subject;

trait PostTypesTrait
{
    static $postTypes = null;

    public static function postTypes()
    {
        if (static::$postTypes !== null) {
            return static::$postTypes;
        }

        $event = new Event(&#39;Posts.PostTypes.get&#39;);
        $event-&amp;gt;subject = new Subject([
            &#39;postTypes&#39; =&amp;gt; [],
        ]);

        EventManager::instance()-&amp;gt;dispatch($event);
        if (!empty($event-&amp;gt;subject-&amp;gt;postTypes)) {
            static::$postTypes = $event-&amp;gt;subject-&amp;gt;postTypes;
        } else {
            static::$postTypes = [];
        }
        return static::$postTypes;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, add this trait to the PostsListener class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;use App\Traits\PostTypesTrait;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ll need to add a &lt;code&gt;beforeRender&lt;/code&gt; event handler to our &lt;code&gt;PostsListener&lt;/code&gt; so we can properly populate the form. Start by adding the handler to our &lt;code&gt;PostsListener::implementedEvents()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&#39;Crud.beforeRender&#39; =&amp;gt; &#39;beforeRender&#39;,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The handler should:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;get the post type from the url - mapping &lt;code&gt;/posts/add/blog&lt;/code&gt; to our &lt;code&gt;BlogPostType&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;load the correct class&lt;/li&gt;
  &lt;li&gt;set any view variables&lt;/li&gt;
  &lt;li&gt;ensure the schema is specified correctly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is the logic for that method (and others):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Before Render
 *
 * @param \Cake\Event\Event $event Event
 * @return void
 */
public function beforeRender(Event $event)
{
    if ($this-&amp;gt;_controller()-&amp;gt;request-&amp;gt;action === &#39;add&#39;) {
        $this-&amp;gt;beforeRenderAdd($event);

        return;
    }
}

/**
 * Before Render Add Action
 *
 * @param \Cake\Event\Event $event Event
 * @return void
 */
public function beforeRenderAdd(Event $event)
{
    $postTypes = PostsListener::postTypes();
    $request = $this-&amp;gt;_request();
    $passedArgs = $request-&amp;gt;param(&#39;pass&#39;);

    $postType = null;
    if (!empty($passedArgs)) {
        $type = $passedArgs[0];
        foreach ($postTypes as $class =&amp;gt; $alias) {
            if ($alias === $type) {
                $postType = $class;
            }
        }
    }

    if ($postType !== null) {
        $className = App::className($postType, &#39;PostType&#39;);
        $postType = new $className;
        $fields = [];
        foreach ($postType-&amp;gt;schema()-&amp;gt;fields() as $field) {
            $fields[$field] = [
                &#39;type&#39; =&amp;gt; $postType-&amp;gt;schema()-&amp;gt;fieldType($field)
            ];
        }

        $viewVars = $postType-&amp;gt;viewVars();
        $viewVars[&#39;fields&#39;] = $fields;
        $this-&amp;gt;_controller()-&amp;gt;set($viewVars);
        $event-&amp;gt;subject-&amp;gt;set([&#39;entity&#39; =&amp;gt; $postType]);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Woot! If you go to &lt;code&gt;/posts/add/blog&lt;/code&gt;, you’ll see that our form is properly rendered by the CrudView. Neat!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Listener/PostsListener.php src/Traits/PostTypesTrait.php
git commit -m &quot;Properly display the post type form&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;For those that may just want to ensure their codebase matches what has been done so far, the codebase is available on GitHub and tagged as &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016/tree/0.0.8&quot;&gt;0.0.8&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It may not seem like much, but we’ve laid the groundwork for actually using custom post types. In our next segment, we’ll look at how to actually save the above data, persisting data for editing, and a ui for selecting the post type to add.&lt;/p&gt;

&lt;p&gt;Be sure to follow along via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2016 CakeAdvent Calendar. Come back tomorrow for more delicious content.&lt;/p&gt;
</description>
        <pubDate>Thu, 08 Dec 2016 08:04:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/12/08/displaying-custom-post-type-forms/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/12/08/displaying-custom-post-type-forms/</guid>
        
        <category>events</category>
        
        <category>forms</category>
        
        <category>plugins</category>
        
        <category>cakeadvent-2016</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Custom Post Types</title>
        <description>&lt;p&gt;A friend of mine asked for a custom website, so here I am, writing a custom cms. I know, there are plenty of systems out there that would handle his needs, but it’s also a good excuse to play around with CakePHP 3, so here we are.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the lazy, the codebase we’ll be working on will be available on &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016&quot;&gt;GitHub&lt;/a&gt;. I will be pushing each set of changes on the date when each blog post in this series is published. No cheating!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;errata-from-last-post&quot;&gt;Errata from last post&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;I was missing a few semicolons in the &lt;code&gt;AbstractPostType&lt;/code&gt;. Oops?.&lt;/li&gt;
  &lt;li&gt;I added some missing class &lt;code&gt;use&lt;/code&gt; statements to &lt;code&gt;AbstractPostType&lt;/code&gt; to properly scope the used classes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks to those who’ve pointed out my derps. These fixes are available as the first commit in the current release.&lt;/p&gt;

&lt;h2 id=&quot;custom-post-types&quot;&gt;Custom Post Types&lt;/h2&gt;

&lt;p&gt;For our cms, the following post types are things my client wants to have on their site:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;General Blog Posts&lt;/li&gt;
  &lt;li&gt;Photos&lt;/li&gt;
  &lt;li&gt;Photos with text attached&lt;/li&gt;
  &lt;li&gt;Photos with an optional price tag - for purchasing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A bit across the board, but lets see if we can make this a bit generic:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;title&lt;/li&gt;
  &lt;li&gt;content (optional)&lt;/li&gt;
  &lt;li&gt;image (optional)&lt;/li&gt;
  &lt;li&gt;price (optional)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Above is a list of fields that we’ll need to provide. The &lt;code&gt;title&lt;/code&gt; is required, and will be used to interpolate a url, assuming one isn’t specified by the user. All others are “optional” for every type, but can be mandatory depending upon the post type. It seems that each post type would need to be able to set it’s own validation rules at least. As each post type varies in it’s fields, we’ll also want to be able to specify a schema for use on the edit page itself.&lt;/p&gt;

&lt;p&gt;If any of the above sounds familiar, its because I’ve described a &lt;code&gt;Form&lt;/code&gt; class. Here is an example Form class for my app:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class BlogPostType extends Form
{
    protected function _buildSchema(Schema $schema)
    {
        $schema-&amp;gt;addField(&#39;title&#39;, &#39;string&#39;);
        $schema-&amp;gt;addField(&#39;url&#39;, [&#39;type&#39; =&amp;gt; &#39;text&#39;]);
        $schema-&amp;gt;addField(&#39;body&#39;, [&#39;type&#39; =&amp;gt; &#39;text&#39;]);
        return $schema
    }

    protected function _buildValidator(Validator $validator)
    {
        $validator-&amp;gt;notEmpty(&#39;title&#39;, &#39;Please fill this field&#39;);
        $validator-&amp;gt;notEmpty(&#39;url&#39;, &#39;Please fill this field&#39;);
        $validator-&amp;gt;notEmpty(&#39;body&#39;, &#39;Please fill this field&#39;);
        return $validator;
    }

    protected function _execute(array $data)
    {
        // Logic here to save the thing.
        return true;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty neat. One thing is that the optional fields cannot be saved into the &lt;code&gt;posts&lt;/code&gt; table, as there is no place for them there. Our &lt;code&gt;_execute&lt;/code&gt; method will need to turn them into &lt;code&gt;PostAttributes&lt;/code&gt; for the purposes of using it in the ui. As well, we’ll need a method for turning the &lt;code&gt;PostAttributes&lt;/code&gt; data into something our form template will be able to understand. As such, extracting that logic into a new class seems reasonable. Here is the skeleton for that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App\PostType;

use Cake\Form\Form;
use Cake\Form\Schema;
use Cake\ORM\TableRegistry;
use Cake\Validation\Validator;
use Cake\Utility\Inflector;

abstract class AbstractPostType extends Form
{
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First, lets get the generic &lt;code&gt;AbstractPostType::_execute()&lt;/code&gt; method out of the way. This method needs to massage the data into a &lt;code&gt;Post&lt;/code&gt; entity and it’s related &lt;code&gt;PostAttributes&lt;/code&gt; entities.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;protected function _execute(array $data)
{
    $postsTable = TableRegistry::get(&#39;Posts&#39;);
    $attributesTable = TableRegistry::get(&#39;PostAttributes&#39;);
    $postAttributes = [];

    $postFields = [&#39;id&#39;, &#39;user_id&#39;, &#39;title&#39;, &#39;url&#39;];
    foreach ($data as $key =&amp;gt; $value)
    {
        if (in_array($key, $postFields)) {
            continue;
        }
        $postAttributes[] = $attributesTable-&amp;gt;newEntity([
            &#39;name&#39; =&amp;gt; $key,
            &#39;value&#39; =&amp;gt; $value,
        ]);
        unset($data[$key]);
    }

    $post = $postsTable-&amp;gt;newEntity($data);
    $post-&amp;gt;post_attributes = $postAttributes;
    return $postsTable-&amp;gt;save($post);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also need to make a method that returns an array of data based on an incoming &lt;code&gt;Post&lt;/code&gt; entity and it’s related &lt;code&gt;PostAttribute&lt;/code&gt; entities.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function data(Post $post)
{
    $data = $post-&amp;gt;toArray();
    unset($data[&#39;post_attributes&#39;]);
    foreach ($post-&amp;gt;post_attributes as $postAttribute) {
        $data[$postAttribute-&amp;gt;name] = $postAttribute-&amp;gt;value;
    }
    return $data;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For templating purposes, I will also create a &lt;code&gt;get&lt;/code&gt; method that can be used to get an individual attribute.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function get($key, $default = null)
{
    if (empty($this-&amp;gt;_data)) {
        $this-&amp;gt;_data = $this-&amp;gt;data();
    }

    if (isset($this-&amp;gt;_data[$key])) {
        return $this-&amp;gt;_data[$key];
    }
    return $default;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally, a few methods for deciding what template to use for &lt;code&gt;index&lt;/code&gt; and &lt;code&gt;view&lt;/code&gt; actions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function indexTemplate()
{
    return $this-&amp;gt;templatePrefix() . &#39;-index.ctp&#39;;
}

public function viewTemplate()
{
    return $this-&amp;gt;templatePrefix() . &#39;-view.ctp&#39;;
}

protected function templatePrefix()
{
    $template = get_class($this);
    if ($pos = strrpos($template, &#39;\\&#39;)) {
        return substr($template, $pos + 1);
    }

    $template = preg_replace(&#39;/PostType$/&#39;, &#39;&#39;, $template);
    return &#39;post_type/&#39; . Inflector::underscore($template);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;You’ll want to change the class that &lt;code&gt;BlogPostType&lt;/code&gt; extends to &lt;code&gt;App\PostType\AbstractPostType&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;distributing-post-types&quot;&gt;Distributing Post Types&lt;/h2&gt;

&lt;p&gt;One thing that would be cool is if I could add a new post type without adding code to the main app. This would allow me to decouple building post types, and potentially make them shareable across CMS installations. This requirement would mean that we should lean on plugins. Here is a theoretical &lt;code&gt;BlogPostTypePlugin&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;plugins/BlogPostTypePlugin/config/bootstrap.php
plugins/BlogPostTypePlugin/src/PostType/BlogPostType.php
plugins/BlogPostTypePlugin/src/Template/Element/post_type/blog-index.ctp
plugins/BlogPostTypePlugin/src/Template/Element/post_type/blog-view.ctp
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;It would also be cute if we could inject css/js into our cms, but I think that might be pushing it. For now we should instead rely on the cms theme or whatever to set what that looks like.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Other than our &lt;code&gt;BlogPostTypePlugin&lt;/code&gt; class - which extends the core &lt;code&gt;PostType&lt;/code&gt; - we will need to use &lt;code&gt;config/bootstrap.php&lt;/code&gt; to register post types. We can do so via the event system. Here is what that might look like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
use Cake\Event\Event;
use Cake\Event\EventManager;

EventManager::instance()-&amp;gt;on(&#39;Posts.PostTypes.get&#39;, function (Event $event) {
  // The key is the Plugin name and the class
  // The value is what you want to display in the ui
  $event-&amp;gt;subject-&amp;gt;postTypes[&#39;BlogPostType.BlogPostType&#39;] = &#39;blog&#39;;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ll need an element to render the post type on the screen.&lt;/p&gt;

&lt;p&gt;Our view template might look like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;h3&amp;gt;&amp;lt;?= $post-&amp;gt;get(&#39;title&#39;) ?&amp;gt;&amp;lt;/h3&amp;gt;
&amp;lt;div&amp;gt;
  &amp;lt;?= $post-&amp;gt;get(&#39;body&#39;) ?&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above setup should allow us to create custom plugins that contain one or post types. While the parsing bit isn’t shown here, it’s simply a matter of dispatching the event and then collecting the &lt;code&gt;postTypes&lt;/code&gt; attribute on the subject.&lt;/p&gt;

&lt;p&gt;Lets add the &lt;code&gt;PostType&lt;/code&gt; class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/PostType/AbstractPostType.php
git commit -m &quot;Lay out infrastructure for custom post types&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;For those that may just want to ensure their codebase matches what has been done so far, the codebase is available on GitHub and tagged as &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016/tree/0.0.7&quot;&gt;0.0.7&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We now have an - unproven - post type system. We still have yet to have a way to display this on the site, nor have we started on what it looks like to edit the page, but we’ll get there. I’m pretty happy with what we have so far, and hopefully we can figure out any specific issues as we start using this system.&lt;/p&gt;

&lt;p&gt;Be sure to follow along via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2016 CakeAdvent Calendar. Come back tomorrow for more delicious content.&lt;/p&gt;
</description>
        <pubDate>Wed, 07 Dec 2016 06:04:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/12/07/custom-post-types/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/12/07/custom-post-types/</guid>
        
        <category>events</category>
        
        <category>forms</category>
        
        <category>cakeadvent-2016</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Customizing the Posts Dashboard with CrudView</title>
        <description>&lt;p&gt;A friend of mine asked for a custom website, so here I am, writing a custom cms. I know, there are plenty of systems out there that would handle his needs, but it’s also a good excuse to play around with CakePHP 3, so here we are.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the lazy, the codebase we’ll be working on will be available on &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016&quot;&gt;GitHub&lt;/a&gt;. I will be pushing each set of changes on the date when each blog post in this series is published. No cheating!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;updating-plugins&quot;&gt;Updating Plugins&lt;/h2&gt;

&lt;p&gt;Before we continue, lets be sure we’ve updated all our plugins. I like to do this each day so that I can get any bugfixes that come out for libraries my application depends upon. In this case, there are a few bugfixes for some CakePHP plugins, so we’ll grab those with the following &lt;code&gt;composer&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;composer update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Typically you would run tests at this stage, but since we have &lt;em&gt;yet&lt;/em&gt; to write any, that isn’t necessary.&lt;/p&gt;

&lt;p&gt;Let’s commit any updates:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add composer.lock
git commit -m &quot;Update unpinned dependencies&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;You should always verify your application still works after upgrading dependencies.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;modifying-the-utility-navigation-bar&quot;&gt;Modifying the Utility Navigation Bar&lt;/h2&gt;

&lt;p&gt;The new version of CrudView that we just upgraded to has support for managing the navigation in the upper-right. I’m going to use this to add a logout button. Add the following to your &lt;code&gt;AppController::beforeFilter()&lt;/code&gt; method in the &lt;code&gt;if ($this-&amp;gt;Crud-&amp;gt;isActionMapped()) {&lt;/code&gt; section:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;Crud-&amp;gt;action()-&amp;gt;config(&#39;scaffold.utility_navigation&#39;, [
    new \CrudView\Menu\MenuItem(
        &#39;Log Out&#39;,
        [&#39;controller&#39; =&amp;gt; &#39;Users&#39;, &#39;action&#39; =&amp;gt; &#39;logout&#39;]
    )
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can use the following classes for defining a utility navigation bar:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;\CrudView\Menu\MenuDropdown&lt;/code&gt;: Can be used to setup dropdown menus&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;\CrudView\Menu\MenuDivider&lt;/code&gt;: Can be used as a separator in dropdown menus&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;\CrudView\Menu\MenuItem&lt;/code&gt;: A menu item link. Takes the same options as &lt;code&gt;HtmlHelper::link()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pretty easy way for us to customize what is being shown, and as the &lt;code&gt;MenuItem&lt;/code&gt; takes all the same options as &lt;code&gt;HtmlHelper::link()&lt;/code&gt;, it should be quite useful.&lt;/p&gt;

&lt;h2 id=&quot;modifying-the-sidebar-navigation&quot;&gt;Modifying the Sidebar Navigation&lt;/h2&gt;

&lt;p&gt;The new version of CrudView that we just upgraded to has support for managing the navigation on the sidebar. We can disable it, blacklist tables, or control the exact contents. We previously used the table blacklist, but I’m going to replace this with a completely controled sidebar. Add the following to your &lt;code&gt;AppController::beforeFilter()&lt;/code&gt; method in the &lt;code&gt;if ($this-&amp;gt;Crud-&amp;gt;isActionMapped()) {&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;Crud-&amp;gt;action()-&amp;gt;config(&#39;scaffold.sidebar_navigation&#39;, [
    new \CrudView\Menu\MenuItem(
        &#39;Posts&#39;,
        [&#39;controller&#39; =&amp;gt; &#39;Posts&#39;, &#39;action&#39; =&amp;gt; &#39;index&#39;]
    ),
    new \CrudView\Menu\MenuItem(
        &#39;Profile&#39;,
        [&#39;controller&#39; =&amp;gt; &#39;Users&#39;, &#39;action&#39; =&amp;gt; &#39;edit&#39;]
    ),
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can use the following classes for defining a utility navigation bar:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;\CrudView\Menu\MenuDivider&lt;/code&gt;: Can be used as a separator in dropdown menus&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;\CrudView\Menu\MenuItem&lt;/code&gt;: A menu item link. Takes the same options as &lt;code&gt;HtmlHelper::link()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A useful addition would be a &lt;code&gt;MenuList&lt;/code&gt;, so we can have groups of sidebar items, though for now this is good enough.&lt;/p&gt;

&lt;h2 id=&quot;customizing-posts-fields&quot;&gt;Customizing &lt;code&gt;/posts&lt;/code&gt; fields&lt;/h2&gt;

&lt;p&gt;If you look at the existing &lt;code&gt;/posts&lt;/code&gt; page, you’ll see there are quite a few fields there that we might not want. Ideally, the following is shown:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;id&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;title&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;status&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;published_date&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;actions list&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Looking at the list, we’re missing the following fields from our &lt;code&gt;posts&lt;/code&gt; table:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;title&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;published_date&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can add those pretty easily via the migrations plugin. I ran the following to add the fields:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake bake migration add_admin_field_to_posts title:string published_date:datetime
bin/cake migrations migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Simple enough. Now we’ll scope the fields being shown to just those that we want. Rather than adding a bunch of custom callbacks directly to our &lt;code&gt;PostsController&lt;/code&gt;, lets create a &lt;code&gt;PostsListener&lt;/code&gt; in &lt;code&gt;src/Listener/PostsListener.php&lt;/code&gt;. Here is mine, with the changes needed to scope our &lt;code&gt;/posts&lt;/code&gt; page:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App\Listener;

use Cake\Event\Event;
use Crud\Listener\BaseListener;

/**
 * Posts Listener
 */
class PostsListener extends BaseListener
{
    /**
     * Callbacks definition
     *
     * @return array
     */
    public function implementedEvents()
    {
        return [
            &#39;Crud.beforeHandle&#39; =&amp;gt; &#39;beforeHandle&#39;,
        ];
    }

    /**
     * Before Handle
     *
     * @param \Cake\Event\Event $event Event
     * @return void
     */
    public function beforeHandle(Event $event)
    {
        if ($this-&amp;gt;_controller()-&amp;gt;request-&amp;gt;action === &#39;index&#39;) {
            $this-&amp;gt;beforeHandleIndex($event);

            return;
        }
    }

    /**
     * Before Handle Index Action
     *
     * @param \Cake\Event\Event $event Event
     * @return void
     */
    public function beforeHandleIndex(Event $event)
    {
        $this-&amp;gt;_action()-&amp;gt;config(&#39;scaffold.fields&#39;, [
            &#39;id&#39;,
            &#39;title&#39;,
            &#39;status&#39;,
            &#39;published_date&#39;,
        ]);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we need to load it in our &lt;code&gt;PostsController::initialize()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;Crud-&amp;gt;addListener(&#39;Users&#39;, &#39;App\Listener\PostsListener&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty neat.&lt;/p&gt;

&lt;h2 id=&quot;modifying-field-output-using-formatters&quot;&gt;Modifying field output using formatters&lt;/h2&gt;

&lt;p&gt;One cool thing about CrudView is that we can specify how we want fields to look like on templates by using custom formatters. Rather than show the status as just text, I’m going to switch it to use a bootstrap label depending upon the content of the text.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;_action()-&amp;gt;config(&#39;scaffold.fields&#39;, [
    &#39;id&#39;,
    &#39;title&#39;,
    &#39;status&#39; =&amp;gt; [
      &#39;formatter&#39; =&amp;gt; function ($name, $value, $entity) {
          $type = $value == &#39;active&#39; ? &#39;success&#39; : &#39;default&#39;;
          return sprintf(&#39;&amp;lt;span class=&quot;label label-%s&quot;&amp;gt;%s&amp;lt;/span&amp;gt;&#39;, $type, $value);
      },
    ],
    &#39;published_date&#39;,
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/12/06/dope-admin-customizations.png&quot; alt=&quot;dope admin panel&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can also use an element as a &lt;code&gt;formatter&lt;/code&gt;, though please refer to the documentation on CrudView for further details.&lt;/p&gt;

&lt;p&gt;Lets save where we are for now.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add config/Migrations/20161206204729_AddAdminFieldToPosts.php config/Migrations/schema-dump-default.lock src/Controller/AppController.php src/Controller/PostsController.php src/Listener/PostsListener.php
git commit -m &quot;Updated /posts dashboard&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;For those that may just want to ensure their codebase matches what has been done so far, the codebase is available on GitHub and tagged as &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016/tree/0.0.6&quot;&gt;0.0.6&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We now have a reasonable looking &lt;code&gt;/posts&lt;/code&gt; page with a few lines of code. Super Dope! Our next job is to work on the possibility of having different post types, how to model them in code, and how they relate to our database structure.&lt;/p&gt;

&lt;p&gt;Be sure to follow along via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2016 CakeAdvent Calendar. Come back tomorrow for more delicious content.&lt;/p&gt;

</description>
        <pubDate>Tue, 06 Dec 2016 11:28:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/12/06/customizing-the-posts-crudview-dashboard/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/12/06/customizing-the-posts-crudview-dashboard/</guid>
        
        <category>crud</category>
        
        <category>navigation</category>
        
        <category>cakeadvent-2016</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Preparing our Posts Admin</title>
        <description>&lt;p&gt;A friend of mine asked for a custom website, so here I am, writing a custom cms. I know, there are plenty of systems out there that would handle his needs, but it’s also a good excuse to play around with CakePHP 3, so here we are.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the lazy, the codebase we’ll be working on will be available on &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016&quot;&gt;GitHub&lt;/a&gt;. I will be pushing each set of changes on the date when each blog post in this series is published. No cheating!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;aliasing--to-postscontrollerhome&quot;&gt;Aliasing / to &lt;code&gt;PostsController::home&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;In the previous blog post, we decided to alias the &lt;code&gt;/&lt;/code&gt; route to the &lt;code&gt;PostsController::index()&lt;/code&gt; action. Since we still need that action for the admin dashboard, lets make a new action called &lt;code&gt;home&lt;/code&gt; and use &lt;em&gt;that&lt;/em&gt; as the alias. We’ll start by modifying the &lt;code&gt;config/routes.php&lt;/code&gt; file, and setting the default route to the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$routes-&amp;gt;connect(&#39;/&#39;, [&#39;controller&#39; =&amp;gt; &#39;Posts&#39;, &#39;action&#39; =&amp;gt; &#39;home&#39;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we need to map that action in our controller to something real. Instead of defining a &lt;code&gt;home&lt;/code&gt; action, for now I’m just going to add an extra mapping of &lt;code&gt;home&lt;/code&gt; to the &lt;code&gt;Crud.Index&lt;/code&gt; action. We’ll use a new &lt;code&gt;PostsController::initialize()&lt;/code&gt; method to handle this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    /**
     * Initialization hook method.
     *
     * Use this method to add common initialization code like loading components.
     *
     * e.g. `$this-&amp;gt;loadComponent(&#39;Security&#39;);`
     *
     * @return void
     */
    public function initialize()
    {
        parent::initialize();
        $this-&amp;gt;Crud-&amp;gt;mapAction(&#39;home&#39;, &#39;Crud.Index&#39;);
        $this-&amp;gt;Auth-&amp;gt;allow([&#39;home&#39;]);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we’ll want to set the proper template for the action. Copy the file &lt;code&gt;src/Template/Posts/index.ctp&lt;/code&gt; to &lt;code&gt;src/Template/Posts/home.ctp&lt;/code&gt;. We can decide what to display here later.&lt;/p&gt;

&lt;p&gt;Once thats done, commit your changes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git config/routes.php src/Controller/PostsController.php src/Template/Posts/home.ctp
git commit -m &quot;Move / route to /posts/home&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;crudview&quot;&gt;CrudView&lt;/h2&gt;

&lt;p&gt;This entire time, we’ve been leaning on the generated bake templates to decide what we want to show users. A powerful alternative to this is the &lt;code&gt;CrudView&lt;/code&gt; plugin. &lt;code&gt;CrudView&lt;/code&gt; is a counterpart to the &lt;code&gt;Crud&lt;/code&gt; plugin in that it allows you to autogenerate views for actions contained in that plugin. It’s pretty radical.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;While we &lt;em&gt;have&lt;/em&gt; edited our &lt;code&gt;Users/edit.ctp&lt;/code&gt; template, we haven’t spent too much time there, so I think we can afford to drop our existing work.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To start off, lets enable &lt;code&gt;CrudView&lt;/code&gt; for our PostsController. We’ll do so by modifying our &lt;code&gt;AppController&lt;/code&gt; to enable &lt;code&gt;CrudView&lt;/code&gt; whenever we are in a current admin action. Start by adding the following property to your &lt;code&gt;AppController&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    /**
     * A list of actions where the CrudView.View
     * listener should be enabled. If an action is
     * in this list but `isAdmin` is false, the
     * action will still be rendered via CrudView.View
     *
     * @var array
     */
    protected $adminActions = [];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In &lt;code&gt;AppController::initialize()&lt;/code&gt;, there is a check on &lt;code&gt;$this-&amp;gt;isAdmin&lt;/code&gt; when states whether or not we can enable the &lt;code&gt;CrudView&lt;/code&gt; listener. We’ll modify that to take our &lt;code&gt;adminActions&lt;/code&gt; property into account.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;if ($this-&amp;gt;isAdmin || in_array($this-&amp;gt;request-&amp;gt;action, $this-&amp;gt;adminActions)) {
    $this-&amp;gt;Crud-&amp;gt;addListener(&#39;CrudView.View&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ll also need to modify the &lt;code&gt;$isAdmin&lt;/code&gt; variable in our &lt;code&gt;AppController::beforeFilter()&lt;/code&gt; to take this into account.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$isAdmin = $this-&amp;gt;isAdmin || in_array($this-&amp;gt;request-&amp;gt;action, $this-&amp;gt;adminActions);
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;The above changes aren’t necessary in later versions of josegonzalez/app - certainly not after 1.4.8. They are here in case you have an older version of the app skeleton.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now that we have some of the groundwork laid out, we need to actually specify the &lt;code&gt;adminActions&lt;/code&gt; property in our &lt;code&gt;PostsController&lt;/code&gt;. I’ve set it to allow almost all crud-actions, except for the &lt;code&gt;view&lt;/code&gt; action, which doesn’t make sense for my admin panel.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    /**
     * A list of actions where the CrudView.View
     * listener should be enabled. If an action is
     * in this list but `isAdmin` is false, the
     * action will still be rendered via CrudView.View
     *
     * @var array
     */
    protected $adminActions = [&#39;index&#39;, &#39;add&#39;, &#39;edit&#39;, &#39;delete&#39;];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we’ll need to allow access to these actions. Our admin panel won’t be very useful if we can’t see whats going on. I’ve also helpfully added the &lt;code&gt;delete&lt;/code&gt; action, because we’ll probably want to delete posts. Add the following to your &lt;code&gt;PostsController&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    /**
     * Check if the provided user is authorized for the request.
     *
     * @param array|\ArrayAccess|null $user The user to check the authorization of.
     *   If empty the user fetched from storage will be used.
     * @return bool True if $user is authorized, otherwise false
     */
    public function isAuthorized($user = null)
    {
        $action = $this-&amp;gt;request-&amp;gt;param(&#39;action&#39;);
        if (in_array($action, $this-&amp;gt;adminActions) || $action == &#39;delete&#39;) {
            return true;
        }
        return parent::isAuthorized($user);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And last but not least, lets remove all the baked &lt;code&gt;Posts&lt;/code&gt; templates.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;rm src/Template/Posts/index.ctp src/Template/Posts/add.ctp src/Template/Posts/edit.ctp src/Template/Posts/view.ctp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you go to the &lt;code&gt;/posts&lt;/code&gt; url now, you’ll get a view similar to the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/12/05/generated-posts-admin.png&quot; alt=&quot;workinggenerated posts admin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pretty sweet. It doesn’t match our &lt;code&gt;/users/edit&lt;/code&gt; page - or really anything else - but we’ll work on that later. For now, lets clean up that sidebar. We’ll add the following logic to our &lt;code&gt;AppController::beforeFilter()&lt;/code&gt; method, in the block that checks on whether the crud action is mapped or not.:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;Crud-&amp;gt;action()-&amp;gt;config(&#39;scaffold.tables_blacklist&#39;, [
    &#39;phinxlog&#39;,
    &#39;muffin_tokenize_phinxlog&#39;,
    &#39;post_attributes&#39;,
    &#39;tokenize_tokens&#39;,
    &#39;users&#39;,
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;For now, we won’t have a link to the &lt;code&gt;/users/edit&lt;/code&gt; page, but in the near future, it’ll hopefully be possible to both add arbitary links to the sidebar as well as arbitrary links to the top navigation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We have the beginnings of our admin dashboard, using CrudView. Let’s save that up:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Controller/AppController.php src/Controller/PostsController.php src/Template/Posts/add.ctp src/Template/Posts/edit.ctp src/Template/Posts/index.ctp src/Template/Posts/view.ctp
git commit -m &quot;CrudView now handles /posts admin panels&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;For those that may just want to ensure their codebase matches what has been done so far, the codebase is available on GitHub and tagged as &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016/tree/0.0.5&quot;&gt;0.0.5&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This was a short post, but we actually did quite a bit of work. We now have a programmatic admin dashboard that can be melded to our use case in future posts. It’s been a long week, and our CMS is starting to take shape. Tomorrow we’ll look at modifying what exactly is shown on our &lt;code&gt;/posts&lt;/code&gt; dashboard, and make sure our database tables line up with our needs.&lt;/p&gt;

&lt;p&gt;Be sure to follow along via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2016 CakeAdvent Calendar. Come back tomorrow for more delicious content.&lt;/p&gt;

</description>
        <pubDate>Mon, 05 Dec 2016 02:00:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/12/05/preparing-our-posts-admin/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/12/05/preparing-our-posts-admin/</guid>
        
        <category>admin</category>
        
        <category>crud</category>
        
        <category>routing</category>
        
        <category>cakeadvent-2016</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>File Uploading and Account Management</title>
        <description>&lt;p&gt;A friend of mine asked for a custom website, so here I am, writing a custom cms. I know, there are plenty of systems out there that would handle his needs, but it’s also a good excuse to play around with CakePHP 3, so here we are.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the lazy, the codebase we’ll be working on will be available on &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016&quot;&gt;GitHub&lt;/a&gt;. I will be pushing each set of changes on the date when each blog post in this series is published. No cheating!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;managing-a-users-account&quot;&gt;Managing a User’s account&lt;/h2&gt;

&lt;p&gt;Now that we can login, we’ll probably want to be able to update our profile &lt;em&gt;without&lt;/em&gt; needing to go through the reset password flow. For that, we’ll need a account page. I’d also love to be able to personalize the account so that the user will feel at home in his CMS, so we’ll allow them to upload a custom image as well. We’ll start on account management first. First, lets start by making the &lt;code&gt;UsersController::edit()&lt;/code&gt; action open to all authenticated users by modifying our &lt;code&gt;UsersController::isAuthorized()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    /**
     * Check if the provided user is authorized for the request.
     *
     * @param array|\ArrayAccess|null $user The user to check the authorization of.
     *   If empty the user fetched from storage will be used.
     * @return bool True if $user is authorized, otherwise false
     */
    public function isAuthorized($user = null)
    {
        if (in_array($this-&amp;gt;request-&amp;gt;param(&#39;action&#39;), [&#39;edit&#39;, &#39;logout&#39;])) {
            return true;
        }
        return parent::isAuthorized($user);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, lets go to the &lt;code&gt;/users/edit&lt;/code&gt; page in our browser. You should get a &lt;code&gt;NotFoundException&lt;/code&gt;. This is because the &lt;code&gt;UsersController::edit()&lt;/code&gt; action is currently mapped to the &lt;code&gt;Crud.Edit&lt;/code&gt; action class in your &lt;code&gt;AppController::initialize()&lt;/code&gt;, and that action class expects a user id to be passed in. We can fix that and force the edit page to &lt;em&gt;always&lt;/em&gt; map to the currently logged in user by handling the &lt;code&gt;beforeHandle&lt;/code&gt; Crud event in our &lt;code&gt;UsersListener&lt;/code&gt;. First, lets add the following to the list of events handled in our &lt;code&gt;UsersListener::implementedEvents()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&#39;Crud.beforeHandle&#39; =&amp;gt; &#39;beforeHandle&#39;,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we’ll need to implement the &lt;code&gt;UsersListener::beforeHandle()&lt;/code&gt; method. As the &lt;code&gt;beforeHandle&lt;/code&gt; event occurs for &lt;em&gt;all&lt;/em&gt; executed Crud actions, we’ll need to take extra care to only set the action arguments when the current action is the &lt;code&gt;edit&lt;/code&gt; action.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    /**
     * Before Handle
     *
     * @param \Cake\Event\Event $event Event
     * @return void
     */
    public function beforeHandle(Event $event)
    {
        if ($event-&amp;gt;subject-&amp;gt;action === &#39;edit&#39;) {
            $this-&amp;gt;beforeHandleEdit($event);

            return;
        }
    }

    /**
     * Before Handle Edit Action
     *
     * @param \Cake\Event\Event $event Event
     * @return void
     */
    public function beforeHandleEdit(Event $event)
    {
        $userId = $this-&amp;gt;_controller()-&amp;gt;Auth-&amp;gt;user(&#39;id&#39;);
        $event-&amp;gt;subject-&amp;gt;args = [$userId];
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Browse to the &lt;code&gt;/users/edit&lt;/code&gt; page now and you’ll see a lovely form with our current user’s information filled out. Yay! Unfortunately, it leaks the existing password, which isn’t great. Honestly, I think we should clean up this form a bit:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The password field should not have the pre-hashed password set&lt;/li&gt;
  &lt;li&gt;The password field should only be changed when the password is confirmed&lt;/li&gt;
  &lt;li&gt;The &lt;code&gt;avatar_dir&lt;/code&gt; field shouldn’t be shown on the form&lt;/li&gt;
  &lt;li&gt;The &lt;code&gt;avatar&lt;/code&gt; field is actually a form upload.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s take care of the first three tasks. We’ll start by adding an event handler to remove the hashed &lt;code&gt;password&lt;/code&gt; during the &lt;code&gt;Crud.beforeRender&lt;/code&gt; event. Add the following to your &lt;code&gt;UsersListener::implementedEvents()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&#39;Crud.beforeRender&#39; =&amp;gt; &#39;beforeRender&#39;,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we’ll handle the event in the same &lt;code&gt;UsersListener&lt;/code&gt; class and unset the &lt;code&gt;password&lt;/code&gt; property on the Crud-produced entity:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    /**
     * Before Render
     *
     * @param \Cake\Event\Event $event Event
     * @return void
     */
    public function beforeRender(Event $event)
    {
        if ($this-&amp;gt;_controller()-&amp;gt;request-&amp;gt;action === &#39;edit&#39;) {
            $this-&amp;gt;beforeRenderEdit($event);

            return;
        }
    }

    /**
     * Before Render Edit Action
     *
     * @param \Cake\Event\Event $event Event
     * @return void
     */
    public function beforeRenderEdit(Event $event)
    {
        $event-&amp;gt;subject-&amp;gt;entity-&amp;gt;unsetProperty(&#39;password&#39;);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you refresh the &lt;code&gt;/users/edit&lt;/code&gt; page, you should see that the hashed password was removed. Now that this is set, we’ll need tomodify the edit form. We previously baked this on the first day of development, so you should have a &lt;code&gt;src/Template/Users/edit.ctp&lt;/code&gt; file. We’ll edit the form section to show the following for now (ignore the sidebar section!):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;div class=&quot;users form large-9 medium-8 columns content&quot;&amp;gt;
    &amp;lt;?= $this-&amp;gt;Form-&amp;gt;create($user) ?&amp;gt;
    &amp;lt;fieldset&amp;gt;
        &amp;lt;legend&amp;gt;&amp;lt;?= __(&#39;Edit User&#39;) ?&amp;gt;&amp;lt;/legend&amp;gt;
        &amp;lt;?php
            echo $this-&amp;gt;Form-&amp;gt;input(&#39;email&#39;);
            echo $this-&amp;gt;Form-&amp;gt;input(&#39;password&#39;, [&#39;required&#39; =&amp;gt; false]);
            echo $this-&amp;gt;Form-&amp;gt;input(&#39;confirm_password&#39;);
            echo $this-&amp;gt;Form-&amp;gt;input(&#39;avatar&#39;);
        ?&amp;gt;
    &amp;lt;/fieldset&amp;gt;
    &amp;lt;?= $this-&amp;gt;Form-&amp;gt;button(__(&#39;Submit&#39;)) ?&amp;gt;
    &amp;lt;?= $this-&amp;gt;Form-&amp;gt;end() ?&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above adds a &lt;code&gt;confirm_password&lt;/code&gt; field and also removes the &lt;code&gt;avatar_dir&lt;/code&gt; field. Finally, add password confirmation, and only save the updated password if it matches the &lt;code&gt;confirm_password&lt;/code&gt; field &lt;em&gt;and&lt;/em&gt; both have a value. We’ll create a custom validation method - validationAccount - to handle this. Place the following within a trait at &lt;code&gt;src/Model/Table/Traits/AccountValidationTrait.php&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App\Model\Table\Traits;

use Cake\Validation\Validator;

trait AccountValidationTrait
{
    /**
     * Account validation rules.
     *
     * @param \Cake\Validation\Validator $validator Validator instance.
     * @return \Cake\Validation\Validator
     */
    public function validationAccount(Validator $validator)
    {
        $validator = $this-&amp;gt;validationDefault($validator);
        $validator-&amp;gt;remove(&#39;password&#39;);
        $validator-&amp;gt;allowEmpty(&#39;confirm_password&#39;);
        $validator-&amp;gt;add(&#39;confirm_password&#39;, &#39;no-misspelling&#39;, [
            &#39;rule&#39; =&amp;gt; [&#39;compareWith&#39;, &#39;password&#39;],
            &#39;message&#39; =&amp;gt; &#39;Passwords are not equal&#39;,
        ]);
        return $validator;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;I really love traits. Sorry not sorry?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this custom validation rule, we inherit from the default rules - defined in the &lt;code&gt;UsersTable::validationDefault()&lt;/code&gt; method - remove the rules that require a &lt;code&gt;password&lt;/code&gt; to be set, and add a rule that requires the &lt;code&gt;password&lt;/code&gt; and &lt;code&gt;confirm_password&lt;/code&gt; fields to match.&lt;/p&gt;

&lt;p&gt;Next, we’ll need to add the proper &lt;code&gt;use&lt;/code&gt; statement to the &lt;em&gt;inside&lt;/em&gt; of our &lt;code&gt;UsersTable&lt;/code&gt; class.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;use \App\Model\Table\Traits\AccountValidationTrait;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To ensure that our custom validation method is actually invoked, we’ll need to modify the &lt;code&gt;UsersListener::beforeHandleEdit()&lt;/code&gt; to tell the &lt;code&gt;Edit&lt;/code&gt; action class to use it. Here is what I added to that method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;_controller()-&amp;gt;Crud-&amp;gt;action()-&amp;gt;saveOptions([&#39;validate&#39; =&amp;gt; &#39;account&#39;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One thing to note is that we never want to update the password when no password has been set. The &lt;code&gt;Edit&lt;/code&gt; action class doesn’t currently provide an event to directly edit event data, but we still have two options:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If no &lt;code&gt;password&lt;/code&gt;/&lt;code&gt;confirm_password&lt;/code&gt; is set at the time of the &lt;code&gt;beforeHandle&lt;/code&gt; event, we can just unset it from the request.&lt;/li&gt;
  &lt;li&gt;If no &lt;code&gt;password&lt;/code&gt;/&lt;code&gt;confirm_password&lt;/code&gt; is set at the time of the &lt;code&gt;beforeSave&lt;/code&gt; event, we can mark the &lt;code&gt;password&lt;/code&gt; field as not dirty, and it won’t be overwritten.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I prefer the latter, because I don’t like screwing around with the incoming request data. Where you perform the scrubbing is up to you. If you do as I do, you’ll have to check if &lt;code&gt;confirm_password&lt;/code&gt; is empty instead of &lt;code&gt;password&lt;/code&gt;. This is because at the &lt;code&gt;beforeSave&lt;/code&gt; event, the data has already been set upon the entity, and an empty string has been hashed by the &lt;code&gt;User::_setPassword()&lt;/code&gt; method. The &lt;code&gt;confirm_password&lt;/code&gt; field will only be empty if both are empty, otherwise we wouldn’t even have gotten to the save phase.&lt;/p&gt;

&lt;p&gt;I’ll add the following to handle my event to &lt;code&gt;UsersListener::implementedEvents()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&#39;Crud.beforeSave&#39; =&amp;gt; &#39;beforeSave&#39;,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here are the methods to add to the &lt;code&gt;UsersListener&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    /**
     * Before Save
     *
     * @param \Cake\Event\Event $event Event
     * @return void
     */
    public function beforeSave(Event $event)
    {
        if ($this-&amp;gt;_controller()-&amp;gt;request-&amp;gt;action === &#39;edit&#39;) {
            $this-&amp;gt;beforeSaveEdit($event);

            return;
        }
    }

    /**
     * Before Render Edit Action
     *
     * @param \Cake\Event\Event $event Event
     * @return void
     */
    public function beforeSaveEdit(Event $event)
    {
        if ($event-&amp;gt;subject-&amp;gt;entity-&amp;gt;confirm_password === &#39;&#39;) {
            $event-&amp;gt;subject-&amp;gt;entity-&amp;gt;unsetProperty(&#39;password&#39;);
            $event-&amp;gt;subject-&amp;gt;entity-&amp;gt;dirty(&#39;password&#39;, false);
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Woot! Very close. If you try to submit the form now, you will probably get a validation error - if your browser even lets you submit. Why? The &lt;code&gt;avatar&lt;/code&gt; field is empty. Even though we’ve set it to allow &lt;code&gt;null&lt;/code&gt; values, we need to remove the validation rules surrounding them in our &lt;code&gt;UsersTable::validationDefault()&lt;/code&gt; method. Remove the rules regarding &lt;code&gt;avatar&lt;/code&gt; and &lt;code&gt;avatar_dir&lt;/code&gt;, and you should be off to the races.&lt;/p&gt;

&lt;p&gt;Let’s save our position now.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Controller/UsersController.php src/Listener/UsersListener.php src/Model/Table/Traits/AccountValidationTrait.php src/Model/Table/UsersTable.php src/Template/Users/edit.ctp
git commit -m &quot;Implement initial account management, including password changing&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;setting-an-image-avatar&quot;&gt;Setting an image avatar&lt;/h2&gt;

&lt;p&gt;While image uploading isn’t baked into cake - &lt;em&gt;lol&lt;/em&gt; - by default, I’ve included my Upload plugin with the composer app skeleton we used to create the &lt;code&gt;calico&lt;/code&gt; app. If you don’t have it installed, you’ll want to install it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# install the plugin
composer require josegonzalez/cakephp-upload

# load it in your app
bin/cake plugin load Josegonzalez/Upload
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;You are welcome and encouraged to try other plugins that might better suit your needs. I wrote mine and like mine, but maybe you prefer a different one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next, we’ll need to modify our &lt;code&gt;UsersTable::initialize()&lt;/code&gt; method to add the behavior for our &lt;code&gt;avatar&lt;/code&gt; and &lt;code&gt;avatar_dir&lt;/code&gt; fields:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;addBehavior(&#39;Josegonzalez/Upload.Upload&#39;, [
    &#39;avatar&#39; =&amp;gt; [
        &#39;fields&#39; =&amp;gt; [
            &#39;dir&#39; =&amp;gt; &#39;avatar_dir&#39;,
        ],
    ],
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we’ll need to modify our form to show the correct input type for the &lt;code&gt;avatar&lt;/code&gt; field. I’m also going to conditionally show the avatar on the page so we know what it looks like when it has been uploaded. This is what the form section of the &lt;code&gt;edit.ctp&lt;/code&gt; should look like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;div class=&quot;users form large-9 medium-8 columns content&quot;&amp;gt;
    &amp;lt;?= $this-&amp;gt;Form-&amp;gt;create($user, [&#39;type&#39; =&amp;gt; &#39;file&#39;]) ?&amp;gt;
    &amp;lt;fieldset&amp;gt;
        &amp;lt;legend&amp;gt;&amp;lt;?= __(&#39;Edit User&#39;) ?&amp;gt;&amp;lt;/legend&amp;gt;
        &amp;lt;?php
            echo $this-&amp;gt;Form-&amp;gt;input(&#39;email&#39;);
            echo $this-&amp;gt;Form-&amp;gt;input(&#39;password&#39;, [&#39;required&#39; =&amp;gt; false]);
            echo $this-&amp;gt;Form-&amp;gt;input(&#39;confirm_password&#39;);
            echo $this-&amp;gt;Form-&amp;gt;input(&#39;avatar&#39;, [&#39;type&#39; =&amp;gt; &#39;file&#39;]);
            if (!empty($user-&amp;gt;avatar)) {
                $imageUrl = &#39;../&#39; . preg_replace(&quot;/^webroot/&quot;, &quot;&quot;, $user-&amp;gt;avatar_dir) . &#39;/&#39; . $user-&amp;gt;avatar;
                echo $this-&amp;gt;Html-&amp;gt;image($imageUrl, [
                    &#39;height&#39; =&amp;gt; &#39;100&#39;,
                    &#39;width&#39; =&amp;gt; &#39;100&#39;,
                ]);
            }
        ?&amp;gt;
    &amp;lt;/fieldset&amp;gt;
    &amp;lt;?= $this-&amp;gt;Form-&amp;gt;button(__(&#39;Submit&#39;)) ?&amp;gt;
    &amp;lt;?= $this-&amp;gt;Form-&amp;gt;end() ?&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you try it out now, you should get a working image upload. Here is what the form looks like for me after an avatar upload:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/12/04/working-image-upload.png&quot; alt=&quot;working image upload&quot; /&gt;&lt;/p&gt;

&lt;p&gt;My cat looks handsome, doesn’t she?&lt;/p&gt;

&lt;p&gt;Before closing out image uploads, we’ll want to ignore the &lt;code&gt;webroot/files&lt;/code&gt; directory in our &lt;code&gt;.gitignore&lt;/code&gt;. If we do not, we’ll end up accidentally committing uploaded files. Please ensure the following line is in your &lt;code&gt;.gitignore&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/webroot/files
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lets commit all our changes as well.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add .gitignore src/Model/Table/UsersTable.php src/Template/Users/edit.ctp
git commit -m &quot;Enable avatar uploads&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;validating-image-uploads&quot;&gt;Validating image uploads&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;The following are only &lt;em&gt;some&lt;/em&gt; of the things you can do to validate that images uploaded are, in fact, images. I would recommend you also:&lt;br /&gt;
- resize the images to remove extra metadata that you may not wish to show&lt;br /&gt;
- only display images that have been sanitized&lt;br /&gt;
- use the &lt;a href=&quot;http://cloudinary.com/blog/how_to_detect_and_prevent_malware_infected_user_uploads&quot;&gt;metascan&lt;/a&gt; tool to verify the validity of uploads before referencing them on your site.&lt;br /&gt;
This list is also by no means exhaustive, and as security is an important subject, I defer to the experts. Please keep this in mind!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before allowing just &lt;em&gt;any&lt;/em&gt; file uploads, lets be sure that they are indeed images. I’d also like to ensure we’re not allowing a save to occur when the image upload fails for whatever reason. This will ensure we surface the errors to the users before the UploadBehavior gets to it. The following should be added to your &lt;code&gt;AccountValidationTrait::validationAccount()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$validator-&amp;gt;allowEmpty(&#39;avatar&#39;);
$validator-&amp;gt;add(&#39;avatar&#39;, &#39;valid-image&#39;, [
    &#39;rule&#39; =&amp;gt; [&#39;uploadedFile&#39;, [
        &#39;types&#39; =&amp;gt; [
            &#39;image/bmp&#39;,
            &#39;image/gif&#39;,
            &#39;image/jpeg&#39;,
            &#39;image/pjpeg&#39;,
            &#39;image/png&#39;,
            &#39;image/vnd.microsoft.icon&#39;,
            &#39;image/x-windows-bmp&#39;,
            &#39;image/x-icon&#39;,
            &#39;image/x-png&#39;,
        ],
        &#39;optional&#39; =&amp;gt; true,
    ]],
    &#39;message&#39; =&amp;gt; &#39;The uploaded avatar was not a valid image&#39;
]);
$validator-&amp;gt;add(&#39;avatar&#39;, &#39;not-upload-error&#39;, [
    &#39;rule&#39; =&amp;gt; [&#39;uploadError&#39;, true],
    &#39;message&#39; =&amp;gt; &#39;There was an error uploading your avatar&#39;,
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;We’re allowing the avatar field to be empty. If you don’t do this, you’re going to see errors when saving the form without an uploaded avatar.&lt;/li&gt;
  &lt;li&gt;We’re only allowing valid images to be uploaded. Hell, our user can even upload an icon as his avatar if they want.&lt;/li&gt;
  &lt;li&gt;We want to make sure that there are no upload errors. Note that &lt;em&gt;not&lt;/em&gt; uploading a file should not be considered an error. PHP will report it as such, and if we want to allow no files to be uploaded, we have to pass &lt;code&gt;true&lt;/code&gt; as the first option to the &lt;code&gt;uploadError&lt;/code&gt; rule.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The above validation rules are included with CakePHP, but you can &lt;em&gt;also&lt;/em&gt; use custom rules - such as file and image size limiting - that are available from the Upload plugin. Documentation for that is available &lt;a href=&quot;https://cakephp-upload.readthedocs.io/en/latest/validation.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now that we’ve validated our image uploads, lets save our changes to the git repository.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Model/Table/Traits/AccountValidationTrait.php
git commit -m &quot;Ensure avatar uploads are actually images&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;For those that may just want to ensure their codebase matches what has been done so far, the codebase is available on GitHub and tagged as &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016/tree/0.0.4&quot;&gt;0.0.4&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Our app now has proper image uploading and account management. We’ve learned a few new tricks regarding the Crud plugin event system, added advanced validation rules for managing our account, and even showed off our avatar on the form. I think we’re more or less done with account management for now. Tomorrow, we’ll get into the nitty-gritty of our blog internals, beginning with the initial stages of our posts admin panel.&lt;/p&gt;

&lt;p&gt;Be sure to follow along via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2016 CakeAdvent Calendar. Come back tomorrow for more delicious content.&lt;/p&gt;
</description>
        <pubDate>Sun, 04 Dec 2016 01:35:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/12/04/file-uploading-and-account-management/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/12/04/file-uploading-and-account-management/</guid>
        
        <category>files</category>
        
        <category>user-accounts</category>
        
        <category>upload</category>
        
        <category>cakeadvent-2016</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Password Resets and Email</title>
        <description>&lt;p&gt;A friend of mine asked for a custom website, so here I am, writing a custom cms. I know, there are plenty of systems out there that would handle his needs, but it’s also a good excuse to play around with CakePHP 3, so here we are.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the lazy, the codebase we’ll be working on will be available on &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016&quot;&gt;GitHub&lt;/a&gt;. I will be pushing each set of changes on the date when each blog post in this series is published. No cheating!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;errata-from-last-post&quot;&gt;Errata from last post&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;I fixed a few typos in executing the &lt;code&gt;users&lt;/code&gt; shell. Specifically, the &lt;code&gt;username-field&lt;/code&gt; flag should have a value of &lt;code&gt;email&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;In CakePHP 3.x, you no longer specify &lt;code&gt;admin =&amp;gt; true|false&lt;/code&gt; when configuring the &lt;code&gt;AuthComponent&lt;/code&gt;. It should be &lt;code&gt;prefix =&amp;gt; false|PREFIX_NAME&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The preferred method of retrieving values from the request object is not &lt;code&gt;ArrayAccess&lt;/code&gt;, but via a method. You should use &lt;code&gt;$this-&amp;gt;request-&amp;gt;param(&#39;field&#39;)&lt;/code&gt; instead of the array-method.&lt;/li&gt;
  &lt;li&gt;I’ve removed the type-hint on &lt;code&gt;AppController::isAuthorized()&lt;/code&gt; and &lt;code&gt;UsersController::isAuthorized()&lt;/code&gt;. The docblock states that they can also accept &lt;code&gt;ArrayAccess&lt;/code&gt;, so &lt;code&gt;array&lt;/code&gt; as a type-hint was inappropriate. In the recently released PHP 7.1, you can instead use &lt;code&gt;iterable&lt;/code&gt; as a type-hint.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code&gt;config/bootstrap.php&lt;/code&gt; file is missing the &lt;code&gt;Plugin::load(&#39;CrudUsers&#39;);&lt;/code&gt; statement. You can add it manually or using the cli tool as follows:&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake plugin load CrudUsers
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks to those who’ve pointed out my derps. These fixes are available as the first commit in the current release.&lt;/p&gt;

&lt;h2 id=&quot;updating-plugins&quot;&gt;Updating Plugins&lt;/h2&gt;

&lt;p&gt;Before we continue, lets be sure we’ve updated all our plugins. I like to do this each day so that I can get any bugfixes that come out for libraries my application depends upon. In this case, there are a few bugfixes for some CakePHP plugins, so we’ll grab those with the following &lt;code&gt;composer&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;composer update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Typically you would run tests at this stage, but since we have &lt;em&gt;yet&lt;/em&gt; to write any, that isn’t necessary.&lt;/p&gt;

&lt;p&gt;Let’s commit any updates:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add composer.lock
git commit -m &quot;Update patch-level for all plugins&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;You should always verify your application still works after upgrading dependencies.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;reset-password-flow&quot;&gt;Reset Password Flow&lt;/h2&gt;

&lt;p&gt;First, we need a reset password flow.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This workflow is vulnerable to email enumeration. Keep this in mind when implementing this in your application. You might want to look into some sort of rate-limiting for the &lt;code&gt;/users/forgot-password&lt;/code&gt; endpoint…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images/ditaa/ditaa-923bcc9bcd42f601ba22a85fc9f3d7ea.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Seems pretty reasonable. We will start be hooking up the appropriate crud actions for this.&lt;/p&gt;

&lt;h2 id=&quot;enabling-the-crud-actions&quot;&gt;Enabling the Crud Actions&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Using Crud actions is going to become more or less second nature in this app. Get used to it?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Add the following three lines to your &lt;code&gt;UsersController::initialize()&lt;/code&gt; method. This will map the &lt;code&gt;forgotPassword&lt;/code&gt;, &lt;code&gt;resetPassword&lt;/code&gt;, and &lt;code&gt;verify&lt;/code&gt; actions, as well as allow anonymous access to each.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;Crud-&amp;gt;mapAction(&#39;forgotPassword&#39;, &#39;CrudUsers.ForgotPassword&#39;);
$this-&amp;gt;Crud-&amp;gt;mapAction(&#39;resetPassword&#39;, [
    &#39;className&#39; =&amp;gt; &#39;CrudUsers.ResetPassword&#39;,
    &#39;findMethod&#39; =&amp;gt; &#39;token&#39;,
]);
$this-&amp;gt;Crud-&amp;gt;mapAction(&#39;verify&#39;, [
    &#39;className&#39; =&amp;gt; &#39;CrudUsers.Verify&#39;,
    &#39;findMethod&#39; =&amp;gt; &#39;token&#39;,
]);
$this-&amp;gt;Auth-&amp;gt;allow([&#39;forgotPassword&#39;, &#39;resetPassword&#39;, &#39;verify&#39;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These three actions require the following fields for usage:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;token&lt;/code&gt;: A string field storing a reset token.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;verified&lt;/code&gt;: A boolean database field.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;adding-the-verified-field&quot;&gt;Adding the &lt;code&gt;verified&lt;/code&gt; field&lt;/h3&gt;

&lt;p&gt;To get the verified field, we’ll create a migration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake bake migration add_verified_field_to_users verified:boolean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once generated, you’ll want to set the &lt;code&gt;verified&lt;/code&gt; field default to either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. I set mine to &lt;code&gt;true&lt;/code&gt;, because we’ll only ever have a single verified user in this blog.&lt;/p&gt;

&lt;p&gt;And now we can run it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake migrations migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;adding-the-token-field&quot;&gt;Adding the &lt;code&gt;token&lt;/code&gt; field&lt;/h3&gt;

&lt;p&gt;To add the token field, we &lt;em&gt;could&lt;/em&gt; generate a migration and run it, but then we’d have to worry about generating tokens themselves. The &lt;code&gt;CrudUsers.ForgotPassword&lt;/code&gt; action class &lt;em&gt;does not generate tokens&lt;/em&gt;. I’d rather not have to deal with that logic, so we’ll lean on &lt;em&gt;yet another plugin&lt;/em&gt;, the &lt;code&gt;Muffin/Tokenize&lt;/code&gt; plugin.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Doesn’t it seem like I love plugins? In truth, I just am very lazy, so I lean on them heavily. Write once, use forever.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Lets install it first:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;composer require muffin/tokenize
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we’ll need to enable it and run it’s migrations:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# enable the plugin (with routes and bootstrapping)
bin/cake plugin load Muffin/Tokenize --bootstrap --routes

# run migrations
bin/cake migrations migrate --plugin Muffin/Tokenize
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Muffin/Tokenize&lt;/code&gt; plugin doesn’t actually store tokens in the &lt;code&gt;users&lt;/code&gt; table. It creates a separate table and stores them there. For our next act, we’ll be actually sending the email and properly verifying that the user exists. Let’s save our progress for now.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add composer.json composer.lock config/Migrations/* config/bootstrap.php src/Controller/UsersController.php
git commit -m &quot;Initial setup for password reset flow&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;event-listeners-and-mailers&quot;&gt;Event Listeners and Mailers&lt;/h2&gt;

&lt;p&gt;In order to actually trigger email sending, we’re going to create a few classes and traits. Specifically, we need to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Be able to properly retrieve tokens from our related table&lt;/li&gt;
  &lt;li&gt;Ensure we send emails&lt;/li&gt;
  &lt;li&gt;Verify tokens correctly&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;finding-muffin-tokens&quot;&gt;Finding muffin tokens&lt;/h3&gt;

&lt;p&gt;First things first, we’ll need to be able to lookup a token. To do so, we’ll need to add the &lt;code&gt;Muffin/Tokenize.Tokenize&lt;/code&gt; behavior to our &lt;code&gt;UsersTable::initialize()&lt;/code&gt; method, located in &lt;code&gt;src/Model/Table/UsersTable.php&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;addBehavior(&#39;Muffin/Tokenize.Tokenize&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that the behavior is loaded, we have setup a relation from the &lt;code&gt;UsersTable&lt;/code&gt; to the &lt;code&gt;TokensTable&lt;/code&gt; from the &lt;code&gt;Muffin/Tokenize&lt;/code&gt; plugin. We’ll also need a custom &lt;code&gt;find&lt;/code&gt; method to bind that in.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Find methods are functions that describe how to query a table for entities. You can chain multiple find methods together to create new, more powerful finds. The built-in finds are &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, and &lt;code&gt;threaded&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I personally like placing finds in traits, so that on the off-chance I need to use them elsewhere, I can. It also allows me to test the finds in isolation of any customizations performed in &lt;code&gt;Table&lt;/code&gt; classes. The following should go in &lt;code&gt;src/Table/Traits/TokenFinderTrait.php&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App\Model\Table\Traits;

trait TokenFinderTrait
{
    /**
     * Find user based on token
     *
     * @param \Cake\ORM\Query $query The query to find with
     * @param array $options The options to find with
     * @return \Cake\ORM\Query The query builder
     */
    public function findToken($query, $options)
    {
        return $this-&amp;gt;find()-&amp;gt;matching(&#39;Tokens&#39;, function ($q) use ($options) {
            return $q-&amp;gt;where([&#39;Tokens.token&#39; =&amp;gt; $options[&#39;token&#39;]]);
        });
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will retrieve a user that is associated with a given token. In order to use this trait, you’ll need to add the following &lt;em&gt;inside&lt;/em&gt; the &lt;code&gt;UsersTable&lt;/code&gt; class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;use \App\Model\Table\Traits\TokenFinderTrait;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can commit this small change now:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Model/Table/UsersTable.php src/Model/Table/Traits/TokenFinderTrait.php
git commit -m &quot;Enable finding reset tokens&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;event-listeners&quot;&gt;Event Listeners&lt;/h3&gt;

&lt;p&gt;Halfway there. The &lt;code&gt;CrudUsers.ForgotPassword&lt;/code&gt; action class uses the &lt;code&gt;afterForgotPassword&lt;/code&gt; event to do the heavy lifting of notifying users of a password reset. We’ll need to handle it in our own event listener. You can do this via either a callable class - boo, hiss, hard to test - or via a nice Listener class. I’m going to do the latter, because it is cleaner. Add the following to &lt;code&gt;src/Listener/UsersListener.php&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App\Listener;

use Cake\Event\Event;
use Cake\Mailer\MailerAwareTrait;
use Cake\ORM\TableRegistry;
use Crud\Listener\BaseListener;

/**
 * Users Listener
 */
class UsersListener extends BaseListener
{
    use MailerAwareTrait;

    /**
     * Default config for this object.
     *
     * @var array
     */
    protected $_defaultConfig = [
        &#39;mailer&#39; =&amp;gt; &#39;Users.User&#39;,
    ];

    /**
     * Callbacks definition
     *
     * @return array
     */
    public function implementedEvents()
    {
        return [
            &#39;Crud.afterForgotPassword&#39; =&amp;gt; &#39;afterForgotPassword&#39;,
        ];
    }

    /**
     * After Forgot Password
     *
     * @param \Cake\Event\Event $event Event
     * @return void
     */
    public function afterForgotPassword(Event $event)
    {
        if (!$event-&amp;gt;subject-&amp;gt;success) {
            return;
        }

        $table = TableRegistry::get($this-&amp;gt;_controller()-&amp;gt;modelClass);
        $token = $table-&amp;gt;tokenize($event-&amp;gt;subject-&amp;gt;entity-&amp;gt;id);

        if ($this-&amp;gt;config(&#39;mailer&#39;)) {
            $this-&amp;gt;getMailer($this-&amp;gt;config(&#39;mailer&#39;))-&amp;gt;send(&#39;forgotPassword&#39;, [
                $event-&amp;gt;subject-&amp;gt;entity-&amp;gt;toArray(),
                $token,
            ]);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a basic &lt;a href=&quot;http://book.cakephp.org/3.0/en/core-libraries/events.html#registering-listeners&quot;&gt;event listener&lt;/a&gt;. We define a list of &lt;code&gt;implementedEvents&lt;/code&gt;, map them to functions, and have our event logic in those functions. In this case, we’re using Crud internals to automatically get stuff like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The current controller’s model&lt;/li&gt;
  &lt;li&gt;Ensure we implement a listener in the form that Crud wants (which is merely a bit of sugar on top of a regular CakePHP event listener)&lt;/li&gt;
  &lt;li&gt;Get and set custom configuration.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One thing you’ll notice is that we’ve added the &lt;code&gt;MailerAwareTrait&lt;/code&gt;. This trait is used to enable usage of CakePHP &lt;code&gt;Mailers&lt;/code&gt;, which are classes that store reusable email configuration. They are new in CakePHP 3.1, and while it’s certainly not how I used to write emails, I’ve come to appreciate them.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It’s classes and traits all the way down! How do I keep track of all of these things? It’s mostly practice, as you can certainly do without most of this, but the separation allows us to cleanly refactor bits and pieces of code, as well as test individual pieces of logic.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In our listener, we’ve specified the &lt;code&gt;UserMailer&lt;/code&gt;, which lives in &lt;code&gt;src/Mailer/UserMailer.php&lt;/code&gt;. We are using &lt;code&gt;forgotPassword&lt;/code&gt; method of that mailer to send our email. If you’ve ever sent an email in CakePHP, you’ll be right at home. If not, it’s a pretty easy read. Below is the contents of that class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App\Mailer;

use Cake\Mailer\Mailer;

class UserMailer extends Mailer
{
    /**
     * Email sent on password recovery requests
     *
     * @param array $user User information, must includer email and username
     * @param string $token Token used for validation
     * @return \Cake\Mailer\Mailer
     */
    public function forgotPassword($user, $token)
    {
        return $this-&amp;gt;to($user[&#39;email&#39;])
            -&amp;gt;subject(&#39;Reset your password&#39;)
            -&amp;gt;template(&#39;forgot_password&#39;)
            -&amp;gt;layout(false)
            -&amp;gt;set([
                &#39;token&#39; =&amp;gt; $token,
            ])
            -&amp;gt;emailFormat(&#39;html&#39;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have our listener and mailer setup, so now all we have to do is attach it to Crud and test it out. To begin, add the following line to your &lt;code&gt;UsersController&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;Crud-&amp;gt;addListener(&#39;Users&#39;, &#39;App\Listener\UsersListener&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we’ll need &lt;code&gt;html&lt;/code&gt; and &lt;code&gt;text&lt;/code&gt; templates for sending out these emails. The following are what I use in &lt;code&gt;src/Template/Email/html/forgot_password.ctp&lt;/code&gt; and &lt;code&gt;src/Template/Email/text/forgot_password.ctp&lt;/code&gt; (in that order):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
use Cake\Routing\Router;
$url = Router::url(
    [
        &#39;controller&#39; =&amp;gt; &#39;users&#39;,
        &#39;action&#39; =&amp;gt; &#39;verify&#39;,
        $token
    ],
    true
);
?&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;?= $this-&amp;gt;fetch(&#39;title&#39;) ?&amp;gt;&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;?= $this-&amp;gt;fetch(&#39;content&#39;) ?&amp;gt;
    &amp;lt;h1&amp;gt;Set your password...&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;
        A password recovery link has been requested for your account. If you
        haven&#39;t requested this, please ignore this email.
    &amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;
        &amp;lt;?= $this-&amp;gt;Html-&amp;gt;link(&#39;Click here to reset your password&#39;, $url) ?&amp;gt;
    &amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
use Cake\Routing\Router;
$url = Router::url(
    [
        &#39;controller&#39; =&amp;gt; &#39;users&#39;,
        &#39;action&#39; =&amp;gt; &#39;verify&#39;,
        $token
    ],
    true
);
?&amp;gt;

A password recovery link has been requested for your account. If you haven&#39;t requested this, please ignore this email.

Click here to reset your password: &amp;lt;?= $url ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we’ll need a &lt;code&gt;forgotPassword&lt;/code&gt; template, which should go in &lt;code&gt;src/Template/Users/forgot_password.ctp&lt;/code&gt;. This will be used to present the forgot password form to our users.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;div class=&quot;users form&quot;&amp;gt;
&amp;lt;?= $this-&amp;gt;Flash-&amp;gt;render(&#39;auth&#39;) ?&amp;gt;
    &amp;lt;?= $this-&amp;gt;Form-&amp;gt;create() ?&amp;gt;
    &amp;lt;fieldset&amp;gt;
        &amp;lt;legend&amp;gt;&amp;lt;?= __(&#39;Please enter your email to send a reset email&#39;) ?&amp;gt;&amp;lt;/legend&amp;gt;
        &amp;lt;?= $this-&amp;gt;Form-&amp;gt;input(&#39;email&#39;) ?&amp;gt;
    &amp;lt;/fieldset&amp;gt;
    &amp;lt;?= $this-&amp;gt;Form-&amp;gt;button(__(&#39;Reset password&#39;)); ?&amp;gt;
    &amp;lt;?= $this-&amp;gt;Form-&amp;gt;end() ?&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since we’re in a good place regarding the “forgot password” step, lets save our progress.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Controller/UsersController.php src/Listener/UsersListener.php src/Mailer/UserMailer.php src/Template/Email/html/forgot_password.ctp src/Template/Email/text/forgot_password.ctp src/Template/Users/forgot_password.ctp
git commit -m &quot;Implement forgot-password phase&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;verifying-tokens&quot;&gt;Verifying Tokens&lt;/h3&gt;

&lt;p&gt;Once we are capable of sending emails, we’ll want to verify that the token being sent in the email is both a token we know about and is valid. The &lt;code&gt;ResetPassword&lt;/code&gt; action class does this by emitting a &lt;code&gt;verifyToken&lt;/code&gt; event, which we can listen to in our &lt;code&gt;UsersListener&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tokens are a one-time use deal, and the &lt;code&gt;Muffin/Tokenize&lt;/code&gt; plugin expires them in three days (configurable!).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We’ll need to first tell the listener that we have an implementation of the event handler by adding the following entry to the array our &lt;code&gt;UsersListener::implementedEvents()&lt;/code&gt; returns:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&#39;Crud.verifyToken&#39; =&amp;gt; &#39;verifyToken&#39;,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now for the implementation, we’ll want to call into the &lt;code&gt;Muffin/Tokenize&lt;/code&gt; plugin and just call &lt;code&gt;verify()&lt;/code&gt; on the token like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    /**
     * Before Verify
     *
     * @param \Cake\Event\Event $event Event
     * @return void
     */
    public function verifyToken(Event $event)
    {
        $event-&amp;gt;subject-&amp;gt;verified = TableRegistry::get(&#39;Muffin/Tokenize.Tokens&#39;)
            -&amp;gt;verify($event-&amp;gt;subject-&amp;gt;token);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also need the &lt;code&gt;reset_password&lt;/code&gt; template. Place the following in &lt;code&gt;src/Template/Users/reset_password.ctp&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;div class=&quot;users form&quot;&amp;gt;
&amp;lt;?= $this-&amp;gt;Flash-&amp;gt;render(&#39;auth&#39;) ?&amp;gt;
    &amp;lt;?= $this-&amp;gt;Form-&amp;gt;create() ?&amp;gt;
    &amp;lt;fieldset&amp;gt;
        &amp;lt;legend&amp;gt;&amp;lt;?= __(&#39;Enter a new password to reset your account&#39;) ?&amp;gt;&amp;lt;/legend&amp;gt;
        &amp;lt;?= $this-&amp;gt;Form-&amp;gt;input(&#39;password&#39;) ?&amp;gt;
    &amp;lt;/fieldset&amp;gt;
    &amp;lt;?= $this-&amp;gt;Form-&amp;gt;button(__(&#39;Signin&#39;)) ?&amp;gt;
    &amp;lt;?= $this-&amp;gt;Form-&amp;gt;end() ?&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s it, that’s all! Lets commit it!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Listener/UsersListener.php src/Template/Users/reset_password.ctp
git commit -m &quot;Verify user tokens&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;testing-the-whole-flow&quot;&gt;Testing the Whole Flow&lt;/h3&gt;

&lt;p&gt;In order to send email, we’ll need to configure a transport properly. You can do this in your &lt;code&gt;config/.env&lt;/code&gt; file, by changing the &lt;code&gt;EMAIL_TRANSPORT_DEFAULT_URL&lt;/code&gt; value to the desired configuration. I personally set mine to match my gmail credentials for now, though you’ll likely want to use something a bit more bulletproof. I’m not sure yet what we’ll use once we get to deploying this, but we’ll cross that bridge when we need to. Here is what I set mine to (minus a valid &lt;code&gt;username:password&lt;/code&gt; combination):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;export EMAIL_TRANSPORT_DEFAULT_URL=&quot;smtp://username:password@smtp.gmail.com:587/?client=null&amp;amp;timeout=30&amp;amp;tls=true&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, lets test sending this email. Browse to &lt;code&gt;/users/forgot-password&lt;/code&gt;, enter in the email address you set for your user earlier, submit the form, and check your email. If everything was configured properly - it was for me! - you’ll see an email like the following in your inbox:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/12/03/reset-password-email.png&quot; alt=&quot;reset password email&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Yes, my email avatar is a cat with a kermit hat. Deal with it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This seems good so far. Click on the link to be taken to the following page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/12/03/reset-password-page.png&quot; alt=&quot;reset password page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And fill in your new password to reset your account.&lt;/p&gt;

&lt;p&gt;Seems legit!&lt;/p&gt;

&lt;h2 id=&quot;default-landing-page&quot;&gt;Default landing page&lt;/h2&gt;

&lt;p&gt;You’ll notice that once you reset your password, you were redirected to the login page. If you try and login, you’ll land right back on the login page with two messages, one saying you are logged in, and one saying you do not have access. This is because we have made the app such that all controller/action pairs &lt;em&gt;must&lt;/em&gt; be individually allowed. Lets fix that and at least allow a landing page.&lt;/p&gt;

&lt;p&gt;For now, our landing page will be the list of blog posts. We’ll need to first ensure that &lt;code&gt;/&lt;/code&gt; points at &lt;code&gt;PostsController::index()&lt;/code&gt;. This is done by editing our application’s routes in &lt;code&gt;config/routes.php&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Routes are how CakePHP knows what an incoming url points to in the application. A common use for changing routing is to add vanity urls. You can do all sorts of funny stuff with routes, as well see in later posts. CakePHP has some sane defaults that make it easy for developers to get started, which is why our &lt;code&gt;/users/login&lt;/code&gt;, &lt;code&gt;/users/forgot-password&lt;/code&gt;, etc. urls all worked out of the box.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The default route should currently be as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$routes-&amp;gt;connect(&#39;/&#39;, [&#39;controller&#39; =&amp;gt; &#39;Pages&#39;, &#39;action&#39; =&amp;gt; &#39;display&#39;, &#39;home&#39;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’re going to update it to the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$routes-&amp;gt;connect(&#39;/&#39;, [&#39;controller&#39; =&amp;gt; &#39;Posts&#39;, &#39;action&#39; =&amp;gt; &#39;index&#39;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, lets allow access to this action in our &lt;code&gt;PostsController&lt;/code&gt;. We’ll need a custom &lt;code&gt;PostsController::initialize()&lt;/code&gt;. Here is what you should add to the &lt;code&gt;PostsController&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    /**
     * Initialization hook method.
     *
     * Use this method to add common initialization code like loading components.
     *
     * e.g. `$this-&amp;gt;loadComponent(&#39;Security&#39;);`
     *
     * @return void
     */
    public function initialize()
    {
        parent::initialize();
        $this-&amp;gt;Auth-&amp;gt;allow([&#39;index&#39;]);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Why wouldn’t we have an &lt;code&gt;PostsController::isAuthorized()&lt;/code&gt;? That method applies only to already logged in users. Anonymous users would never be able to access the page, regardless of what you return from &lt;code&gt;isAuthorized()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You should now be able to access &lt;code&gt;/&lt;/code&gt;, both before and after logging in. Let’s commit what we have and end for today.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add config/routes.php src/Controller/PostsController.php
git commit -m &quot;Allow logged in and anonymous access to an initial / route&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;For those that may just want to ensure their codebase matches what has been done so far, the codebase is available on GitHub and tagged as &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016/tree/0.0.3&quot;&gt;0.0.3&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hurray, we have some authentication configured for our application, are sending emails, have figured out how to customize Crud for our usage, and even have a landing page. Tomorrow we’ll work on allowing the blog user to edit their account, and potentially even get to image uploading.&lt;/p&gt;

&lt;p&gt;Be sure to follow along via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2016 CakeAdvent Calendar. Come back tomorrow for more delicious content.&lt;/p&gt;
</description>
        <pubDate>Sat, 03 Dec 2016 01:40:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/12/03/password-resets-and-email/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/12/03/password-resets-and-email/</guid>
        
        <category>passwords</category>
        
        <category>email</category>
        
        <category>cakeadvent-2016</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
  </channel>
</rss>
