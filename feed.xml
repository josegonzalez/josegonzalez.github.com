<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jose Diaz-Gonzalez</title>
    <description>CakePHP Core Developer, Accidental Ops Guy, and Occasional Blogger</description>
    <link>http://josediazgonzalez.com/</link>
    <atom:link href="http://josediazgonzalez.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 22 Dec 2016 02:17:24 +0000</pubDate>
    <lastBuildDate>Thu, 22 Dec 2016 02:17:24 +0000</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Selling Photos</title>
        <description>&lt;p&gt;A friend of mine asked for a custom website, so here I am, writing a custom cms. I know, there are plenty of systems out there that would handle his needs, but it’s also a good excuse to play around with CakePHP 3, so here we are.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the lazy, the codebase we’ll be working on will be available on &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016&quot;&gt;GitHub&lt;/a&gt;. I will be pushing each set of changes on the date when each blog post in this series is published. No cheating!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;errata-from-previous-post&quot;&gt;Errata from previous post&lt;/h2&gt;

&lt;p&gt;There is a missing commit which removed the &lt;code&gt;-&amp;gt;layout(false)&lt;/code&gt; call in our &lt;code&gt;UserMailer&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;Thanks to those who’ve pointed out my derp. These fixes are available as the first commit in the current release.&lt;/p&gt;

&lt;h2 id=&quot;allowing-paid-photos&quot;&gt;Allowing Paid Photos&lt;/h2&gt;

&lt;p&gt;Rather than making a whole new post type, we’re going to repurpose the existing Photo Post Type. First, lets add a &lt;code&gt;price&lt;/code&gt; field to our &lt;code&gt;PhotoPostType::_buildSchema()&lt;/code&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$schema-&amp;gt;addField(&#39;price&#39;, [&#39;type&#39; =&amp;gt; &#39;text&#39;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also want to validate that any prices are positive numbers (we’re only allowing whole dollar amounts). I added the following to my &lt;code&gt;PhotoPostType::_buildValidator()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$validator-&amp;gt;allowEmpty(&#39;price&#39;);
$validator-&amp;gt;add(&#39;price&#39;, &#39;numeric&#39;, [
    &#39;rule&#39; =&amp;gt; [&#39;naturalNumber&#39;, true]
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Simple enough. We can now add pricing to our photos :)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add plugins/PhotoPostType/src/PostType/PhotoPostType.php
git commit -m &quot;Enable photo pricing&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;displaying-checkout-buttons-via-stripe&quot;&gt;Displaying Checkout Buttons via Stripe&lt;/h2&gt;

&lt;p&gt;We’ll be using Stripe to process payments. Install it via composer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;composer require stripe/stripe-php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to simplify our integration, we’ll be using their &lt;code&gt;checkout&lt;/code&gt; product. I created the element &lt;code&gt;src/Template/Element/stripe.ctp&lt;/code&gt; in order to contain the client-side portion of the integration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
if (empty($post-&amp;gt;get(&#39;price&#39;))) {
    return;
}
?&amp;gt;

&amp;lt;div style=&quot;text-align:center;&quot;&amp;gt;
    &amp;lt;?= $this-&amp;gt;Form-&amp;gt;create(null, [&#39;class&#39; =&amp;gt; &#39;payment-form&#39;, &#39;url&#39; =&amp;gt; [&#39;plugin&#39; =&amp;gt; &#39;PhotoPostType&#39;, &#39;controller&#39; =&amp;gt; &#39;Orders&#39;, &#39;action&#39; =&amp;gt; &#39;order&#39;, &#39;id&#39; =&amp;gt; $post-&amp;gt;get(&#39;id&#39;)]]); ?&amp;gt;
        &amp;lt;script
            src=&quot;https://checkout.stripe.com/checkout.js&quot; class=&quot;stripe-button&quot;
            data-key=&quot;&amp;lt;?= \Cake\Core\Configure::read(&#39;Stripe.publishablekey&#39;) ?&amp;gt;&quot;
            data-amount=&quot;&amp;lt;?= $post-&amp;gt;getPriceInCents() ?&amp;gt;&quot;
            data-name=&quot;&amp;lt;?= \Cake\Core\Configure::read(&#39;App.name&#39;) ?&amp;gt;&quot;
            data-description=&quot;&amp;lt;?= $post-&amp;gt;get(&#39;title&#39;) ?&amp;gt;&quot;
            data-image=&quot;https://stripe.com/img/documentation/checkout/marketplace.png&quot;
            data-locale=&quot;auto&quot;
            data-zip-code=&quot;true&quot;
            data-billing-address=&quot;true&quot;
            data-shipping-address=&quot;true&quot;
            data-label=&quot;Buy this photo&quot;&amp;gt;
          &amp;lt;/script&amp;gt;
    &amp;lt;?= $this-&amp;gt;Form-&amp;gt;end(); ?&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above form uses the converted &lt;code&gt;PostType&lt;/code&gt; object to configure the button. We’ll need two new environment variables though, which you can retrieve from your stripe dashboard:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;export STRIPE_PUBLISHABLEKEY=pk_test_1234
export STRIPE_SECRETKEY=sk_test_abcd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can include this element in your &lt;code&gt;photo-view.ctp&lt;/code&gt; files like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?= $this-&amp;gt;element(&#39;stripe&#39;, [&#39;post&#39; =&amp;gt; $post]); ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One tricky thing about stripe is that the amount it accepts is a number in cents, not whole dollars, so we need to add the following to our &lt;code&gt;PhotoPostType&lt;/code&gt; class to make the conversion:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function getPriceInCents()
{
    $price = $this-&amp;gt;get(&#39;price&#39;);
    if (empty($price)) {
        return 0;
    }

    return $price * 100;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This takes care of most of the user-facing integration, so we’ll save our work for now:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add composer.json composer.lock config/.env.default plugins/DefaultTheme/src/Template/Element/post_type/photo-view.ctp plugins/PhotoPostType/src/PostType/PhotoPostType.php plugins/PhotoPostType/src/Template/Element/post_type/photo-view.ctp src/Template/Element/stripe.ctp
git commit -m &quot;Implement user-facing portion of stripe integration&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;processing-payments&quot;&gt;Processing Payments&lt;/h2&gt;

&lt;p&gt;We’ll be storing order information in a new table. This is the migration I generated:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake bake migration --plugin PhotoPostType create_orders charge_id email shipping_name shipping_address_line_1 shipping_address_zip shipping_address_state shipping_address_city shipping_address_country shipped:boolean created modified
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I had to modify the default for &lt;code&gt;shipped&lt;/code&gt; to be &lt;code&gt;false&lt;/code&gt; in the generated migration file. We can now run it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake migrations migrate --plugin PhotoPostType
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since I want composer to run this automatically when the application is “compiled”, I added the following to &lt;code&gt;scripts.compile&lt;/code&gt; in my &lt;code&gt;composer.json&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;&quot;bin/cake migrations migrate -p PhotoPostType&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can generate tables for this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake bake model Orders --plugin PhotoPostType
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On the server-side, we’ll need an &lt;code&gt;OrdersController::order()&lt;/code&gt; action to handle the actual payments. Here is the initial scaffolding for that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace PhotoPostType\Controller;

use Cake\Core\Configure;
use PhotoPostType\Controller\AppController;
use Stripe\Error\Card as CardError;
use Stripe\Charge;
use Stripe\Customer;
use Stripe\Stripe;

class OrdersController extends AppController
{
    /**
     * Initialization hook method.
     *
     * Use this method to add common initialization code like loading components.
     *
     * e.g. `$this-&amp;gt;loadComponent(&#39;Security&#39;);`
     *
     * @return void
     */
    public function initialize()
    {
        parent::initialize();
        $this-&amp;gt;Auth-&amp;gt;allow(&#39;order&#39;);
    }

    /**
     * Order action
     *
     * @return void
     */
    public function order()
    {
        $this-&amp;gt;loadModel(&#39;Posts&#39;);
        $post = $this-&amp;gt;Posts-&amp;gt;find()
                           -&amp;gt;where([&#39;id&#39; =&amp;gt; $this-&amp;gt;request-&amp;gt;query(&#39;id&#39;)])
                           -&amp;gt;contain(&#39;PostAttributes&#39;)
                           -&amp;gt;first()
                           -&amp;gt;getPostType();

        $charge = $this-&amp;gt;chargeCard($post-&amp;gt;getPriceInCents());
        if (empty($charge)) {
            $this-&amp;gt;Flash-&amp;gt;error(__(&#39;Your card was declined&#39;));
            return $this-&amp;gt;redirect($this-&amp;gt;referer(&#39;/&#39;, true));
        }

        $this-&amp;gt;createOrder($charge);
        $this-&amp;gt;Flash-&amp;gt;success(__(&#39;Order placed! Check your email for more details :)&#39;));
        return $this-&amp;gt;redirect($this-&amp;gt;referer(&#39;/&#39;, true));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A few notes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I’m allowing the &lt;code&gt;order&lt;/code&gt; action. This is necessary as we have default denied requests to all actions in our &lt;code&gt;AppController&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;We need to retrieve the post being requested as a post-type, hence the find at the beginning.&lt;/li&gt;
  &lt;li&gt;There isn’t too much error handling, but you can expand this to suit your needs.&lt;/li&gt;
  &lt;li&gt;This should be refactored as a custom Form class, but it’s here because I am lazy.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is the contents of my &lt;code&gt;OrdersController::chargeCard()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Order action
 *
 * @return null|\Stripe\Charge
 */
protected function chargeCard($amount)
{
    Stripe::setApiKey(Configure::read(&#39;Stripe.secretkey&#39;));
    try {
        $customer = Customer::create(array(
            &#39;email&#39; =&amp;gt; $this-&amp;gt;request-&amp;gt;data(&#39;stripeEmail&#39;),
            &#39;card&#39;  =&amp;gt; $this-&amp;gt;request-&amp;gt;data(&#39;stripeToken&#39;)
        ));
        return Charge::create(array(
            &#39;customer&#39; =&amp;gt; $customer-&amp;gt;id,
            &#39;amount&#39;   =&amp;gt; $amount,
            &#39;currency&#39; =&amp;gt; &#39;usd&#39;
        ));
    } catch (CardError $e) {
        $this-&amp;gt;log($e);
        return null;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty straightforward. We need to create a customer in stripe and then charge the card. If we get any card authentication errors, we log it for inspection and don’t return the charge. My &lt;code&gt;OrdersController::createOrder()&lt;/code&gt; method is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Order action
 *
 * @return null|\Stripe\Charge
 */
protected function createOrder($charge)
{
    $data = [
        &#39;chargeid&#39; =&amp;gt; $charge-&amp;gt;id,
        &#39;email&#39; =&amp;gt; $this-&amp;gt;request-&amp;gt;data(&#39;stripeEmail&#39;),
        &#39;shipping_name&#39; =&amp;gt; $this-&amp;gt;request-&amp;gt;data(&#39;stripeShippingName&#39;),
        &#39;shipping_address_line_1&#39; =&amp;gt; $this-&amp;gt;request-&amp;gt;data(&#39;stripeShippingAddressLine1&#39;),
        &#39;shipping_address_zip&#39; =&amp;gt; $this-&amp;gt;request-&amp;gt;data(&#39;stripeShippingAddressZip&#39;),
        &#39;shipping_address_state&#39; =&amp;gt; $this-&amp;gt;request-&amp;gt;data(&#39;stripeShippingAddressState&#39;),
        &#39;shipping_address_city&#39; =&amp;gt; $this-&amp;gt;request-&amp;gt;data(&#39;stripeShippingAddressCity&#39;),
        &#39;shipping_address_country&#39; =&amp;gt; $this-&amp;gt;request-&amp;gt;data(&#39;stripeShippingAddressCountry&#39;),
        &#39;shipped&#39; =&amp;gt; false,
    ];

    $order = $this-&amp;gt;Orders-&amp;gt;newEntity($data);
    if (!$this-&amp;gt;Orders-&amp;gt;save($order)) {
        $this-&amp;gt;log($order-&amp;gt;errors());
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’re just taking the charge and the submitted data and saving it as an order.&lt;/p&gt;

&lt;p&gt;Now we need to enable routing for this controller action. I created the &lt;code&gt;plugins/PhotoPostType/config/routes.php&lt;/code&gt; with the following contents:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
use Cake\Core\Configure;
use Cake\Routing\Router;
use Cake\Routing\Route\DashedRoute;

$routeClass = Configure::read(&#39;PhotoPostType.Routes.routeClass&#39;);
$routeClass = $routeClass ?: DashedRoute::class;

$photoPostTypePrefix = Configure::read(&#39;PhotoPostType.Routes.prefix&#39;);
$photoPostTypePrefix = $photoPostTypePrefix ?: &#39;/order&#39;;
$photoPostTypePrefix = &#39;/&#39; . trim($photoPostTypePrefix, &quot;\t\n\r\0\x0B/&quot;);
Router::plugin(&#39;PhotoPostType&#39;, [&#39;path&#39; =&amp;gt; $photoPostTypePrefix], function ($routes) use ($routeClass) {
    $routes-&amp;gt;connect(
        &#39;/&#39;,
        [&#39;controller&#39; =&amp;gt; &#39;Orders&#39;, &#39;action&#39; =&amp;gt; &#39;order&#39;],
        [&#39;id&#39; =&amp;gt; &#39;\d+&#39;, &#39;pass&#39; =&amp;gt; [&#39;id&#39;], &#39;routeClass&#39; =&amp;gt; $routeClass]
    );
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also need to load the routes for this plugin in our &lt;code&gt;config/bootstrap.php&lt;/code&gt;. Replace the line loading the &lt;code&gt;PhotoPostType&lt;/code&gt; plugin with the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;Plugin::load(&#39;PhotoPostType&#39;, [&#39;bootstrap&#39; =&amp;gt; true, &#39;routes&#39; =&amp;gt; true]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lastly, I added a bit of css to &lt;code&gt;plugins/DefaultTheme/webroot/css/style.css&lt;/code&gt; to show off our flash styling.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.message {
    text-align: center;
}
.message.success {
    background-color: lightgreen;
}
.message.error {
    background-color: #D33C44;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can try it out on any user-facing post page. You should get a message like the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/12/21/sold.png&quot; alt=&quot;awh yis&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Commit your changes :)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add composer.json config/bootstrap.php plugins/DefaultTheme/webroot/css/style.css plugins/PhotoPostType/config/Migrations/20161222013607_CreateOrders.php plugins/PhotoPostType/config/routes.php plugins/PhotoPostType/src/Controller/OrdersController.php plugins/PhotoPostType/src/Model/Entity/Order.php plugins/PhotoPostType/src/Model/Table/OrdersTable.php plugins/PhotoPostType/tests/Fixture/OrdersFixture.php plugins/PhotoPostType/tests/TestCase/Model/Table/OrdersTableTest.php
git commit -m &quot;Implement payment processing&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;For those that may just want to ensure their codebase matches what has been done so far, the codebase is available on GitHub and tagged as &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016/tree/0.0.21&quot;&gt;0.0.21&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Our CMS is pretty complete. We’ve got a few odds and ends to tie up - like showing off orders in the admin and notifying users of their order and when it’s shipped - but we’re done for today.&lt;/p&gt;

&lt;p&gt;Be sure to follow along via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2016 CakeAdvent Calendar. Come back tomorrow for more delicious content.&lt;/p&gt;
</description>
        <pubDate>Wed, 21 Dec 2016 17:19:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/12/21/selling-photos/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/12/21/selling-photos/</guid>
        
        <category>payments</category>
        
        <category>stripe</category>
        
        <category>cakeadvent-2016</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Sending Responsive Emails</title>
        <description>&lt;p&gt;A friend of mine asked for a custom website, so here I am, writing a custom cms. I know, there are plenty of systems out there that would handle his needs, but it’s also a good excuse to play around with CakePHP 3, so here we are.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the lazy, the codebase we’ll be working on will be available on &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016&quot;&gt;GitHub&lt;/a&gt;. I will be pushing each set of changes on the date when each blog post in this series is published. No cheating!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;email-previewing&quot;&gt;Email Previewing&lt;/h2&gt;

&lt;p&gt;One thing that has always annoyed me about developing emails within an application is that the preview step is pretty manual. I do agree that all emails should be seen in the actual email clients - all clients render at least slightly differently - but I personally hate the following workflow:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Update email&lt;/li&gt;
  &lt;li&gt;Send test email to client&lt;/li&gt;
  &lt;li&gt;Wait until client has received the email&lt;/li&gt;
  &lt;li&gt;Check email&lt;/li&gt;
  &lt;li&gt;Repeat until done&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s sort of annoying to go through, and not very nice for rapid application development. Fortunately, there is a solution! We’ll use my &lt;a href=&quot;https://github.com/josegonzalez/cakephp-mail-preview&quot;&gt;MailPreview&lt;/a&gt; plugin to shorten the development cycle significantly. Start off my installing it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;composer require josegonzalez/cakephp-mail-preview
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we’ll want to load the plugin (and it’s routes):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake plugin load Josegonzalez/MailPreview --routes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;MailPreview&lt;/code&gt; plugin integrates with the CakePHP &lt;code&gt;Mailer&lt;/code&gt; class, but currently requires a single addition to get previews going. We’ll need to add the following &lt;code&gt;use&lt;/code&gt; statement to &lt;code&gt;UserMailer&lt;/code&gt; class declaration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;use Josegonzalez\MailPreview\Mailer\PreviewTrait;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we’ll need to add the trait usage &lt;em&gt;inside&lt;/em&gt; of the class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;use PreviewTrait;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can create a &lt;code&gt;MailPreview&lt;/code&gt; class for our &lt;code&gt;UserMailer&lt;/code&gt;. Think of the &lt;code&gt;MailPreview&lt;/code&gt; class as a type of fixture, except it provides testing data for emails instead of databases. I’ll create a &lt;code&gt;UserMailPreview&lt;/code&gt; in &lt;code&gt;src/Mailer/Preview/UserMailPreview.php&lt;/code&gt; with the following contents:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App\Mailer\Preview;

use Josegonzalez\MailPreview\Mailer\Preview\MailPreview;

class UserMailPreview extends MailPreview
{
    public function forgotPassword()
    {
        return $this-&amp;gt;getMailer(&#39;User&#39;)
                    -&amp;gt;preview(&#39;forgotPassword&#39;, [
                        &#39;example@example.com&#39;,
                        &#39;some-test-token&#39;
                    ]);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The usage is pretty straightforward. The &lt;code&gt;PreviewTrait&lt;/code&gt; adds a &lt;code&gt;preview()&lt;/code&gt; method to the Mailer, which takes in the name of the email and the arguments to send that email. The return is then used to show what the email looks like on screen.&lt;/p&gt;

&lt;p&gt;In order to display the previews, we’ll need to allow the actions if the controller is the &lt;code&gt;MailPreviewController&lt;/code&gt;. I added the following to my &lt;code&gt;AppController::initialize()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;if ($this-&amp;gt;request-&amp;gt;params[&#39;controller&#39;] == &#39;MailPreview&#39;) {
    $this-&amp;gt;Auth-&amp;gt;allow();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you browse to &lt;code&gt;/mail-preview&lt;/code&gt;, you will see a list of your mailers and the emails they contain. If you click on one, you’ll get a weird routing error. Why? Because we are in a plugin, all urls are scoped to this plugin, and since the urls in question are not mapped, boom goes the email. Fix that by adding &lt;code&gt;&#39;plugin&#39; =&amp;gt; null&lt;/code&gt; to the urls in your &lt;code&gt;forgot_password.ctp&lt;/code&gt; templates, and you should see the following in your browser:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/12/20/email-preview.png&quot; alt=&quot;email preview&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Always be explicit about your urls!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Pretty good, right? Now we can work on our email to our hearts content! We’ll save our progress here.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add composer.json composer.lock config/bootstrap.php src/Controller/AppController.php src/Mailer/UserMailer.php src/Template/Email/html/forgot_password.ctp src/Template/Email/text/forgot_password.ctp src/Mailer/Preview/
git commit -m &quot;Setup email previews&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;displaying-a-responsive-email&quot;&gt;Displaying a Responsive Email&lt;/h2&gt;

&lt;p&gt;I more or less am going to grab the layout template from &lt;a href=&quot;https://github.com/leemunroe/responsive-html-email-template&quot;&gt;leemunroe/responsive-html-email-template&lt;/a&gt; with a few minor tweaks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Replaced the &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; element contents with &lt;code&gt;&amp;lt;?= $this-&amp;gt;fetch(&#39;title&#39;) ?&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Replaced the body with &lt;code&gt;&amp;lt;?= $this-&amp;gt;fetch(&#39;content&#39;) ?&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can modify the email otherwise however you see fit. I placed mine in &lt;code&gt;src/Template/Layout/Email/html/default.ctp&lt;/code&gt;. In order to load this layout, I removed &lt;code&gt;-&amp;gt;layout(false)&lt;/code&gt; from my &lt;code&gt;UserMailer::forgotPassword()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;With a few minor changes, my email now looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/12/20/better-email-preview.png&quot; alt=&quot;better email preview&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ll save my work for now, but here are a few ideas to try:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Setup some sort of email unsubscribe flow.&lt;/li&gt;
  &lt;li&gt;Add images or backgrounds to your emails.&lt;/li&gt;
  &lt;li&gt;Create an &lt;code&gt;EmailHelper&lt;/code&gt; to make adding buttons etc. easier.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Mailer/UserMailer.php src/Template/Email/html/forgot_password.ctp src/Template/Layout/Email/html/default.ctp
git commit -m &quot;Nicer html email layout&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;For those that may just want to ensure their codebase matches what has been done so far, the codebase is available on GitHub and tagged as &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016/tree/0.0.20&quot;&gt;0.0.20&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Looks like I lied about what we were going to work on today, but I wanted to go back and show off a neat development feature I’d been working on. I think the results speak for themselves, and hope it was a worthwhile trip. Tomorrow we’ll &lt;em&gt;actually&lt;/em&gt; work on selling photos.&lt;/p&gt;

&lt;p&gt;Be sure to follow along via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2016 CakeAdvent Calendar. Come back tomorrow for more delicious content.&lt;/p&gt;
</description>
        <pubDate>Tue, 20 Dec 2016 07:02:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/12/20/sending-responsive-emails/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/12/20/sending-responsive-emails/</guid>
        
        <category>emails</category>
        
        <category>email-preview</category>
        
        <category>cakeadvent-2016</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Cosmetic Admin Cleanup</title>
        <description>&lt;p&gt;A friend of mine asked for a custom website, so here I am, writing a custom cms. I know, there are plenty of systems out there that would handle his needs, but it’s also a good excuse to play around with CakePHP 3, so here we are.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the lazy, the codebase we’ll be working on will be available on &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016&quot;&gt;GitHub&lt;/a&gt;. I will be pushing each set of changes on the date when each blog post in this series is published. No cheating!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;errata-from-previous-post&quot;&gt;Errata from previous post&lt;/h2&gt;

&lt;p&gt;The connected routes in &lt;code&gt;config/routes.php&lt;/code&gt; for &lt;code&gt;/forgot-password&lt;/code&gt; and &lt;code&gt;/reset-password&lt;/code&gt; were incorrect and should be as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$routes-&amp;gt;connect(&#39;/forgot-password&#39;, [&#39;controller&#39; =&amp;gt; &#39;Users&#39;, &#39;action&#39; =&amp;gt; &#39;forgotPassword&#39;]);
$routes-&amp;gt;connect(&#39;/reset-password/*&#39;, [&#39;controller&#39; =&amp;gt; &#39;Users&#39;, &#39;action&#39; =&amp;gt; &#39;resetPassword&#39;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks to those who’ve pointed out my derps. These fixes are available as the first commit in the current release.&lt;/p&gt;

&lt;h2 id=&quot;cosmetic-cleanup&quot;&gt;Cosmetic Cleanup&lt;/h2&gt;

&lt;p&gt;There are a few things that currently irk me about the admin panel:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We are duplicating navigation in the header and sidebar&lt;/li&gt;
  &lt;li&gt;The default header link on the top-right when logged out is the &lt;code&gt;logout&lt;/code&gt; link.&lt;/li&gt;
  &lt;li&gt;The login redirect goes to &lt;code&gt;/&lt;/code&gt;, when it should go to the &lt;code&gt;/admin/posts&lt;/code&gt; page. The logout redirect should just go to the logout page.&lt;/li&gt;
  &lt;li&gt;We’re showing a link to the &lt;code&gt;view&lt;/code&gt; action on the &lt;code&gt;/admin/posts&lt;/code&gt; page but we should not.&lt;/li&gt;
  &lt;li&gt;We’re showing a link to the &lt;code&gt;home&lt;/code&gt; action on the &lt;code&gt;/admin/posts/edit&lt;/code&gt; page but we should not.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s fix that.&lt;/p&gt;

&lt;h3 id=&quot;de-duplicating-navigation-links&quot;&gt;De-duplicating Navigation Links&lt;/h3&gt;

&lt;p&gt;We can very easily combine our navigation by modifying the &lt;code&gt;scaffold.utility_navigation&lt;/code&gt; crud config option to include the &lt;code&gt;scaffold.sidebar_navigation&lt;/code&gt; elements. I’m going to refactor this into a helper method in our &lt;code&gt;AppController&lt;/code&gt; class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Retrieves the navigation elements for the page
 *
 * @return array
 */
protected function getUtilityNavigation()
{
    return [
        new \CrudView\Menu\MenuItem(
            &#39;Posts&#39;,
            [&#39;controller&#39; =&amp;gt; &#39;Posts&#39;, &#39;action&#39; =&amp;gt; &#39;index&#39;]
        ),
        new \CrudView\Menu\MenuItem(
            &#39;Profile&#39;,
            [&#39;controller&#39; =&amp;gt; &#39;Users&#39;, &#39;action&#39; =&amp;gt; &#39;edit&#39;]
        ),
        new \CrudView\Menu\MenuItem(
            &#39;Log Out&#39;,
            [&#39;controller&#39; =&amp;gt; &#39;Users&#39;, &#39;action&#39; =&amp;gt; &#39;logout&#39;]
        )
    ];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we can update our &lt;code&gt;AppController::beforeFilter()&lt;/code&gt; to remove the &lt;code&gt;scaffold.sidebar_navigation&lt;/code&gt; and &lt;code&gt;scaffold.tables_blacklist&lt;/code&gt; configuration, replacing it with&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;Crud-&amp;gt;action()-&amp;gt;config(&#39;scaffold.utility_navigation&#39;, $this-&amp;gt;getUtilityNavigation());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will move our navigation to the top, but will also re-enable the default sidebar. Let’s fix that next. For now, commit our changes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Controller/AppController.php
git commit -m &quot;Move sidebar navigation to header&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;disabling-the-sidebar&quot;&gt;Disabling the Sidebar&lt;/h3&gt;

&lt;p&gt;This is pretty simple. We’ve already done this for a few actions in the &lt;code&gt;UsersController&lt;/code&gt;, but we’ll want to do this more globally. Add the following line to your &lt;code&gt;AppController::beforeFilter()&lt;/code&gt;, in the block checking if &lt;code&gt;Crud::isActionMapped()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;Crud-&amp;gt;action()-&amp;gt;config(&#39;scaffold.sidebar_navigation&#39;, false);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now your entire page layout should be taken up by the contents of the view, sans sidebar.&lt;/p&gt;

&lt;p&gt;You can also remove this setting from your &lt;code&gt;UsersListener&lt;/code&gt;, as we are handling it globally now. The following methods will be updated:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;UsersListener::beforeHandleLogin()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;UsersListener::beforeHandleResetPassword()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;UsersListener::beforeHandleForgotPassword()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Time to commit:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Controller/AppController.php src/Listener/UsersListener.php
git commit -m &quot;Disable the sidebar navigation completely&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;switching-header-links-for-logged-out-users&quot;&gt;Switching header links for logged out users&lt;/h3&gt;

&lt;p&gt;We should almost certainly not be showing the “Posts”, “Profile”, and “Log Out” utility navigation links to logged out users. Instead, lets show a link to login and start the forgot password flow to logged out users. I added the following to the beginning of my &lt;code&gt;AppController::getUtilityNavigation()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;if ($this-&amp;gt;Auth-&amp;gt;user(&#39;id&#39;) === null) {
    return [
        new \CrudView\Menu\MenuItem(
            &#39;Forgot Password?&#39;,
            [&#39;controller&#39; =&amp;gt; &#39;Users&#39;, &#39;action&#39; =&amp;gt; &#39;forgotPassword&#39;]
        ),
        new \CrudView\Menu\MenuItem(
            &#39;Login&#39;,
            [&#39;controller&#39; =&amp;gt; &#39;Users&#39;, &#39;action&#39; =&amp;gt; &#39;login&#39;]
        ),
    ];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nothing obtuse here, it’s all pretty straightforward. We’ll commit our changes&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Controller/AppController.php
git commit -m &quot;Show alternative utility navigation to logged out users&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;fixing-the-loginlogout-redirects&quot;&gt;Fixing the login/logout redirects&lt;/h3&gt;

&lt;p&gt;This is just a matter of changing configuration in our &lt;code&gt;AppController::loadAuthComponent()&lt;/code&gt;, and very specifically the &lt;code&gt;loginRedirect&lt;/code&gt; and &lt;code&gt;logoutRedirect&lt;/code&gt; configuration options. Here is the full method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Configures the AuthComponent
 *
 * @return void
 */
protected function loadAuthComponent()
{
    $this-&amp;gt;loadComponent(&#39;Auth&#39;, [
        &#39;authorize&#39; =&amp;gt; [&#39;Controller&#39;],
        &#39;loginAction&#39; =&amp;gt; [
            &#39;plugin&#39; =&amp;gt; null,
            &#39;prefix&#39; =&amp;gt; false,
            &#39;controller&#39; =&amp;gt; &#39;Users&#39;,
            &#39;action&#39; =&amp;gt; &#39;login&#39;
        ],
        &#39;loginRedirect&#39; =&amp;gt; [
            &#39;plugin&#39; =&amp;gt; null,
            &#39;prefix&#39; =&amp;gt; false,
            &#39;controller&#39; =&amp;gt; &#39;Posts&#39;,
            &#39;action&#39; =&amp;gt; &#39;index&#39;,
        ],
        &#39;logoutRedirect&#39; =&amp;gt; [
            &#39;plugin&#39; =&amp;gt; null,
            &#39;prefix&#39; =&amp;gt; false,
            &#39;controller&#39; =&amp;gt; &#39;Users&#39;,
            &#39;action&#39; =&amp;gt; &#39;login&#39;,
        ],
        &#39;authenticate&#39; =&amp;gt; [
            &#39;all&#39; =&amp;gt; [
                &#39;fields&#39; =&amp;gt; [&#39;username&#39; =&amp;gt; &#39;email&#39;, &#39;password&#39; =&amp;gt; &#39;password&#39;],
            ],
            &#39;Form&#39;,
        ]
    ]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You know the drill, save your changes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Controller/AppController.php
git commit -m &quot;Properly redirect users on login/logout&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;removing-the-view-link-from-our-post-action-list&quot;&gt;Removing the &lt;code&gt;view&lt;/code&gt; link from our post action list&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;scaffold.actions_blacklist&lt;/code&gt; Crud config option can be used to remove an action from being linked to. We’ll add the following to our &lt;code&gt;PostsListener::beforeHandleIndex()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;_action()-&amp;gt;config(&#39;scaffold.actions_blacklist&#39;, [
    &#39;view&#39;,
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yay commit!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Listener/PostsListener.php
git commit -m &quot;Disable the view action link&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;removing-the-home-link-from-our-post-action-list&quot;&gt;Removing the &lt;code&gt;home&lt;/code&gt; link from our post action list&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;scaffold.actions_blacklist&lt;/code&gt; Crud config option can be used to remove an action from being linked to. Add the following to our &lt;code&gt;PostsListener::beforeHandleEdit()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Before Handle Edit Action
 *
 * @param \Cake\Event\Event $event Event
 * @return void
 */
public function beforeHandleEdit(Event $event)
{
    $this-&amp;gt;_action()-&amp;gt;config(&#39;scaffold.actions_blacklist&#39;, [
        &#39;home&#39;,
    ]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ll need to add the following to &lt;code&gt;PostsListener::beforeHandle()&lt;/code&gt; in order to trigger this as well:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;if ($this-&amp;gt;_request()-&amp;gt;action === &#39;edit&#39;) {
    $this-&amp;gt;beforeHandleEdit($event);

    return;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Be sure to save your changes&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Listener/PostsListener.php
git commit -m &quot;Disable the home action link&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;For those that may just want to ensure their codebase matches what has been done so far, the codebase is available on GitHub and tagged as &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016/tree/0.0.19&quot;&gt;0.0.19&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Our admin panel is in pretty good shape now - we could certainly try and spruce up the edit page for photo posts, but we’ll leave that for another day. Tomorrow, we’ll try add “sellable” photos to our CMS.&lt;/p&gt;

&lt;p&gt;Be sure to follow along via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2016 CakeAdvent Calendar. Come back tomorrow for more delicious content.&lt;/p&gt;
</description>
        <pubDate>Mon, 19 Dec 2016 11:31:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/12/19/admin-cleanup/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/12/19/admin-cleanup/</guid>
        
        <category>crud-view</category>
        
        <category>cakeadvent-2016</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Queuing up emails</title>
        <description>&lt;p&gt;A friend of mine asked for a custom website, so here I am, writing a custom cms. I know, there are plenty of systems out there that would handle his needs, but it’s also a good excuse to play around with CakePHP 3, so here we are.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the lazy, the codebase we’ll be working on will be available on &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016&quot;&gt;GitHub&lt;/a&gt;. I will be pushing each set of changes on the date when each blog post in this series is published. No cheating!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;emailing-in-the-background&quot;&gt;Emailing in the Background&lt;/h2&gt;

&lt;p&gt;One thing you may notice is that sending the “forgot password” email causes the site to slow down. There are a few things to think about here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Users will get upset if their requests don’t complete “instantly”.&lt;/li&gt;
  &lt;li&gt;Google will actually penalize slower sites in their rankings&lt;/li&gt;
  &lt;li&gt;If you perform more work in a web request, those requests can build up, potentially allowing users to DDoS you.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Overall, it’s pretty jank to send emails in the foreground. We’ll instead queue the messages to be sent in the background using the &lt;a href=&quot;https://github.com/josegonzalez/cakephp-queuesadilla&quot;&gt;&lt;code&gt;josegonzalez/cakephp-queuesadilla&lt;/code&gt;&lt;/a&gt; plugin which is included with the &lt;code&gt;josegonzalez/app&lt;/code&gt; skeleton we are using.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;CakePHP does not yet have an official queueing library, though we hope to have one soon. My hope is that it will be a slightly repackaged Queuesadilla.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;creating-a-job-class&quot;&gt;Creating a Job class&lt;/h3&gt;

&lt;p&gt;We’ll start by creating a generic &lt;code&gt;MailerJob&lt;/code&gt; class in &lt;code&gt;src/Job/MailerJob.php&lt;/code&gt;. Here is the contents of that file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App\Job;

use Cake\Log\LogTrait;
use Cake\Mailer\MailerAwareTrait;
use josegonzalez\Queuesadilla\Job\Base as JobContainer;

class MailerJob
{
    use LogTrait;
    use MailerAwareTrait;

    public function execute(JobContainer $job)
    {
        $mailer = $job-&amp;gt;data(&#39;mailer&#39;);
        $action = $job-&amp;gt;data(&#39;action&#39;);
        $data = $job-&amp;gt;data(&#39;data&#39;, []);

        if (empty($mailer)) {
            $this-&amp;gt;log(&#39;Missing mailer in job config&#39;);
            return;
        }

        if (empty($action)) {
            $this-&amp;gt;log(&#39;Missing action in job config&#39;);
            return;
        }

        $this-&amp;gt;getMailer($mailer)-&amp;gt;send($action, $data);
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Briefly, we’ll go over this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Jobs can be either functions, static methods in classes, or instances with a method that we execute. We are going for the instance methodology.&lt;/li&gt;
  &lt;li&gt;When a job method is executed, we pass in a &lt;code&gt;JobContainer&lt;/code&gt; which has access to the relevant job data.&lt;/li&gt;
  &lt;li&gt;We still use the &lt;code&gt;MailerAwareTrait&lt;/code&gt; so that we can reuse our &lt;code&gt;Mailer&lt;/code&gt; classes.&lt;/li&gt;
  &lt;li&gt;The &lt;code&gt;MailerJob::execute()&lt;/code&gt; method has been made generic so that we might be able to reuse this job for other cases where we’ll send email.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;queuing-the-mailerjob&quot;&gt;Queuing the &lt;code&gt;MailerJob&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;This is relatively simple. We’ll start by removing all &lt;code&gt;MailerAwareTrait&lt;/code&gt; code from our &lt;code&gt;UsersListener&lt;/code&gt;. In particular, remove the following &lt;code&gt;use&lt;/code&gt; statement:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;use Cake\Mailer\MailerAwareTrait;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As well as the following from within the class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;use MailerAwareTrait;

/**
 * Default config for this object.
 *
 * @var array
 */
protected $_defaultConfig = [
    &#39;mailer&#39; =&amp;gt; &#39;User&#39;,
];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, you should add the following &lt;code&gt;use&lt;/code&gt; statement to the top of the class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;use Josegonzalez\CakeQueuesadilla\Queue\Queue;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we’ll update &lt;code&gt;UsersListener::afterForgotPassword()&lt;/code&gt; to actually enqueue the job:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * After Forgot Password
 *
 * @param \Cake\Event\Event $event Event
 * @return void
 */
public function afterForgotPassword(Event $event)
{
    if (!$event-&amp;gt;subject-&amp;gt;success) {
        return;
    }

    $table = TableRegistry::get($this-&amp;gt;_controller()-&amp;gt;modelClass);
    $token = $table-&amp;gt;tokenize($event-&amp;gt;subject-&amp;gt;entity-&amp;gt;id);

    Queue::push([&#39;\App\Job\MailerJob&#39;, &#39;execute&#39;], [
        &#39;action&#39; =&amp;gt; &#39;forgotPassword&#39;,
        &#39;mailer&#39; =&amp;gt; &#39;User&#39;,
        &#39;data&#39; =&amp;gt; [
            &#39;email&#39; =&amp;gt; $event-&amp;gt;subject-&amp;gt;entity-&amp;gt;email,
            &#39;token&#39; =&amp;gt; $token,
        ]
    ]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A few things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Queue::push()&lt;/code&gt; takes two arguments, a callable and data for the job.&lt;/li&gt;
  &lt;li&gt;Our callable should include the fully-namespaced class name and the function being invoked, so &lt;code&gt;[&#39;\App\Job\MailerJob&#39;, &#39;execute&#39;]&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Our &lt;code&gt;MailerJob&lt;/code&gt; requires an &lt;code&gt;action&lt;/code&gt; and a &lt;code&gt;mailer&lt;/code&gt; to be specified, so we pass those in as data, and also send in the user’s email&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, we need to update our &lt;code&gt;UserMailer::forgotPassword()&lt;/code&gt; signature so that we only need the &lt;code&gt;email&lt;/code&gt; and not an entire &lt;code&gt;user&lt;/code&gt; object.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Email sent on password recovery requests
 *
 * @param array $email User email
 * @param string $token Token used for validation
 * @return \Cake\Mailer\Mailer
 */
public function forgotPassword($email, $token)
{
    return $this-&amp;gt;to($email)
        -&amp;gt;subject(&#39;Reset your password&#39;)
        -&amp;gt;template(&#39;forgot_password&#39;)
        -&amp;gt;layout(false)
        -&amp;gt;set([
            &#39;token&#39; =&amp;gt; $token,
        ])
        -&amp;gt;emailFormat(&#39;html&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before testing this, one thing that we’ll need to do is make sure that we have specified a full base url for all environments. CakePHP will normally retrieve this from the current request, but cannot do so in a CLI environment. As such, we’ll need to add the following to &lt;code&gt;line 17&lt;/code&gt; of our &lt;code&gt;config/env.php&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&#39;App.fullbaseurl&#39; =&amp;gt; &#39;App.fullBaseUrl&#39;,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can set the &lt;code&gt;APP_FULLBASEURL&lt;/code&gt; environment variable and have it properly scope all of our urls.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Newer installs of the &lt;code&gt;josegonzalez/app&lt;/code&gt; skeleton will not need the above change to your &lt;code&gt;config/env.php&lt;/code&gt; file.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Lets save our changes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add config/env.php src/Job/MailerJob.php src/Listener/UsersListener.php src/Mailer/UserMailer.php
git commit -m &quot;Send emails via a background job&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;running-jobs&quot;&gt;Running Jobs&lt;/h3&gt;

&lt;p&gt;To run a job, we’ll need to first create the requisite tables. Queusadilla can use a variety of backends, though we are defaulting to the PDO backend for ease of use. Let’s run the migration for that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake migrations migrate --plugin Josegonzalez/CakeQueuesadilla
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can just run the default queue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake queuesadilla
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we’re done!&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;For those that may just want to ensure their codebase matches what has been done so far, the codebase is available on GitHub and tagged as &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016/tree/0.0.18&quot;&gt;0.0.18&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We have no sped up our slowest endpoint by over 9000, which is great because I’m pretty sure the scouter is broken. For our next post, we’ll do a bit more minor cleanup of our admin panels.&lt;/p&gt;

&lt;p&gt;Be sure to follow along via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2016 CakeAdvent Calendar. Come back tomorrow for more delicious content.&lt;/p&gt;
</description>
        <pubDate>Sun, 18 Dec 2016 06:26:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/12/18/queuing-up-emails/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/12/18/queuing-up-emails/</guid>
        
        <category>queuing</category>
        
        <category>cakeadvent-2016</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Routing Blog Posts to custom urls</title>
        <description>&lt;p&gt;A friend of mine asked for a custom website, so here I am, writing a custom cms. I know, there are plenty of systems out there that would handle his needs, but it’s also a good excuse to play around with CakePHP 3, so here we are.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the lazy, the codebase we’ll be working on will be available on &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016&quot;&gt;GitHub&lt;/a&gt;. I will be pushing each set of changes on the date when each blog post in this series is published. No cheating!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;routing-built-in-urls&quot;&gt;Routing built-in urls&lt;/h2&gt;

&lt;p&gt;One thing you may have noticed is that we haven’t really touched our routing files. Up till now, we’ve relied on the default CakePHP routes to handle where our requests are sent. Because we have allowed users to specify arbitrary urls, we’ll need to create custom routes to handle both our existing urls &lt;em&gt;as well as&lt;/em&gt; the custom routes we’ve specified for each post.&lt;/p&gt;

&lt;p&gt;I’ve updated my &lt;code&gt;config/routes.php&lt;/code&gt; to the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
use Cake\Core\Plugin;
use Cake\Routing\RouteBuilder;
use Cake\Routing\Router;
use Cake\Routing\Route\DashedRoute;

Router::defaultRouteClass(DashedRoute::class);

Router::scope(&#39;/&#39;, function (RouteBuilder $routes) {
    $routes-&amp;gt;connect(&#39;/&#39;, [&#39;controller&#39; =&amp;gt; &#39;Posts&#39;, &#39;action&#39; =&amp;gt; &#39;home&#39;]);
    $routes-&amp;gt;connect(&#39;/login&#39;, [&#39;controller&#39; =&amp;gt; &#39;Users&#39;, &#39;action&#39; =&amp;gt; &#39;login&#39;]);
    $routes-&amp;gt;connect(&#39;/logout&#39;, [&#39;controller&#39; =&amp;gt; &#39;Users&#39;, &#39;action&#39; =&amp;gt; &#39;logout&#39;]);
    $routes-&amp;gt;connect(&#39;/forgot-password&#39;, [&#39;controller&#39; =&amp;gt; &#39;Users&#39;, &#39;action&#39; =&amp;gt; &#39;forgot-password&#39;]);
    $routes-&amp;gt;connect(&#39;/reset-password/*&#39;, [&#39;controller&#39; =&amp;gt; &#39;Users&#39;, &#39;action&#39; =&amp;gt; &#39;forgot-password&#39;]);
});

Router::scope(&#39;/admin&#39;, function (RouteBuilder $routes) {
    $routes-&amp;gt;scope(&#39;/posts&#39;, [&#39;controller&#39; =&amp;gt; &#39;Posts&#39;], function (RouteBuilder $routes) {
        $routes-&amp;gt;connect(&#39;/&#39;, [&#39;action&#39; =&amp;gt; &#39;index&#39;]);
        $routes-&amp;gt;fallbacks();
    });
    $routes-&amp;gt;connect(&#39;/profile&#39;, [&#39;controller&#39; =&amp;gt; &#39;Users&#39;, &#39;action&#39; =&amp;gt; &#39;edit&#39;]);
});

Plugin::routes();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A few notes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You can specify a “default route class”. This is used for inflecting urls correctly, and I’m using the CakePHP default of &lt;code&gt;DashedRoute&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;You can specify one or more route “scopes”, which are kinda like route prefixes. Routes specified within a scope have that scope prefixed onto any matching urls.&lt;/li&gt;
  &lt;li&gt;Route scopes can have default values specified, as we do for anything in &lt;code&gt;/admin/posts&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Route scopes can be embedded.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now you can use the new url patterns for any of the existing pages.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add config/routes.php
git commit -m &quot;Specify all hardcoded app routes&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;routing-custom-urls&quot;&gt;Routing Custom Urls&lt;/h2&gt;

&lt;p&gt;This part is a bit more complex. We need to do the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Match a custom &lt;code&gt;/:url&lt;/code&gt; catch-all pattern &lt;em&gt;only&lt;/em&gt; when there is a matching url in the &lt;code&gt;posts&lt;/code&gt; table.&lt;/li&gt;
  &lt;li&gt;Allow access to &lt;code&gt;PostsController::view()&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Ensure the correct variables are set for the &lt;code&gt;PostsController::view()&lt;/code&gt; template layer.&lt;/li&gt;
  &lt;li&gt;Add templates for &lt;code&gt;PostsController::view()&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Set default views for the &lt;code&gt;PostsController::view()&lt;/code&gt; action.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’ll do this piecemeal.&lt;/p&gt;

&lt;h3 id=&quot;custom-route-classes&quot;&gt;Custom Route Classes&lt;/h3&gt;

&lt;p&gt;In order to match our catch-all route, we’ll need a &lt;code&gt;PostRoute&lt;/code&gt;. Lets first connect the route in our &lt;code&gt;config/routes.php&lt;/code&gt; under the &lt;code&gt;/&lt;/code&gt; scope:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$routes-&amp;gt;connect(
    &#39;/:url&#39;,
    [&#39;controller&#39; =&amp;gt; &#39;Posts&#39;, &#39;action&#39; =&amp;gt; &#39;view&#39;],
    [&#39;routeClass&#39; =&amp;gt; &#39;PostRoute&#39;]
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we’ll add the following to our &lt;code&gt;PostRoute&lt;/code&gt; class, located in &lt;code&gt;src/Routing/Route/PostRoute.php&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App\Routing\Route;

use Cake\ORM\TableRegistry;
use Cake\Routing\Route\Route;

class PostRoute extends Route
{
    public function parse($url, $method = &#39;&#39;)
    {
        $params = parent::parse($url, $method);
        if (empty($params)) {
            return false;
        }

        $PostsTable = TableRegistry::get(&#39;Posts&#39;);
        $post = $PostsTable-&amp;gt;find()-&amp;gt;where([&#39;url&#39; =&amp;gt; &#39;/&#39; . $params[&#39;url&#39;]])-&amp;gt;first();
        if (empty($post)) {
            return false;
        }

        $params[&#39;pass&#39;] = [$post-&amp;gt;id];
        return $params;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will perform a lookup for all urls that do not match another route. If the url doesn’t exist in our table, we simply don’t parse that request. If it does, we set the post id as the first passed argument.&lt;/p&gt;

&lt;p&gt;Next, we need to modify our &lt;code&gt;PostsController::initialize()&lt;/code&gt; method to allow access to the &lt;code&gt;PostsController::view()&lt;/code&gt; action:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;Auth-&amp;gt;allow([&#39;home&#39;, &#39;view&#39;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that this is set, we can use the &lt;code&gt;Crud.beforeFind&lt;/code&gt; event to modify the finder to return related post data from the &lt;code&gt;post_attributes&lt;/code&gt; database table. Add the following to your &lt;code&gt;PostsListener::implementedEvents()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&#39;Crud.beforeFind&#39; =&amp;gt; &#39;beforeFind&#39;,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here is the logic for the new &lt;code&gt;PostsListener::beforeFind()&lt;/code&gt; and friends:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Before Find
 *
 * @param \Cake\Event\Event $event Event
 * @return void
 */
public function beforeFind(Event $event)
{
    if ($this-&amp;gt;_request()-&amp;gt;action === &#39;view&#39;) {
        $this-&amp;gt;beforeFindView($event);

        return;
    }
}

/**
 * Before Find View Action
 *
 * @param \Cake\Event\Event $event Event
 * @return void
 */
public function beforeFindView(Event $event)
{
    $event-&amp;gt;subject-&amp;gt;query-&amp;gt;contain([&#39;PostAttributes&#39;]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty straightforward. I also created a &lt;code&gt;src/Template/Posts/view.ctp&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;div class=&quot;posts index large-12 medium-12 columns content&quot;&amp;gt;
    &amp;lt;?php $postType = $post-&amp;gt;getPostType(); ?&amp;gt;
    &amp;lt;?= $this-&amp;gt;element($postType-&amp;gt;viewTemplate(), [&#39;post&#39; =&amp;gt; $postType]); ?&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And one for the &lt;code&gt;DefaultTheme&lt;/code&gt; plugin in &lt;code&gt;plugins/DefaultTheme/src/Template/Posts/view.ctp&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;div class=&quot;wrapper&quot;&amp;gt;
    &amp;lt;ul class=&quot;post-list&quot;&amp;gt;
        &amp;lt;li&amp;gt;
            &amp;lt;?php $postType = $post-&amp;gt;getPostType(); ?&amp;gt;
            &amp;lt;?= $this-&amp;gt;element($postType-&amp;gt;viewTemplate(), [&#39;post&#39; =&amp;gt; $postType]); ?&amp;gt;
        &amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you browse to the homepage of the CMS and click any of the URLs, you should now see content :)&lt;/p&gt;

&lt;p&gt;Let’s stop here for today.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add config/routes.php plugins/DefaultTheme/src/Template/Posts/view.ctp src/Controller/PostsController.php src/Listener/PostsListener.php src/Routing/Route/PostRoute.php src/Template/Posts/view.ctp
git commit -m &quot;Implement custom routing for blog posts&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;For those that may just want to ensure their codebase matches what has been done so far, the codebase is available on GitHub and tagged as &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016/tree/0.0.17&quot;&gt;0.0.17&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Awh yis, our custom application routing layer is complete, and our blog is looking a bit sharper now. We still have a few more features to fill in, but for our next post, we’ll take a look optimizing email sends for password resets.&lt;/p&gt;

&lt;p&gt;Be sure to follow along via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2016 CakeAdvent Calendar. Come back tomorrow for more delicious content.&lt;/p&gt;
</description>
        <pubDate>Sat, 17 Dec 2016 05:21:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/12/17/routing-blog-posts-to-custom-urls/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/12/17/routing-blog-posts-to-custom-urls/</guid>
        
        <category>routing</category>
        
        <category>cakeadvent-2016</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Ensuring Posts properly handle custom urls</title>
        <description>&lt;p&gt;A friend of mine asked for a custom website, so here I am, writing a custom cms. I know, there are plenty of systems out there that would handle his needs, but it’s also a good excuse to play around with CakePHP 3, so here we are.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the lazy, the codebase we’ll be working on will be available on &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016&quot;&gt;GitHub&lt;/a&gt;. I will be pushing each set of changes on the date when each blog post in this series is published. No cheating!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;validating-custom-urls&quot;&gt;Validating custom urls&lt;/h2&gt;

&lt;p&gt;Each one of our posts can be assigned a url. Previously, this could be any non-empty string. Let’s put in some ground rules:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It should be unique in our database.&lt;/li&gt;
  &lt;li&gt;The url will be automatically generated from the &lt;code&gt;title&lt;/code&gt; field if not otherwise specified&lt;/li&gt;
  &lt;li&gt;It should start with a forward slash.&lt;/li&gt;
  &lt;li&gt;It should not end with a forward slash.&lt;/li&gt;
  &lt;li&gt;All special characters should be replaced with dashes.&lt;/li&gt;
  &lt;li&gt;It must be lowercase.&lt;/li&gt;
  &lt;li&gt;It cannot be within a specific set of whitelisted urls.&lt;/li&gt;
  &lt;li&gt;It cannot be prefixed with a specific set of strings.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lets start with the first item:&lt;/p&gt;

&lt;h3 id=&quot;application-rules&quot;&gt;Application Rules&lt;/h3&gt;

&lt;p&gt;Application Rules differ from Validation rules. Validation rules should be stateless - that is, they are not affected by datastore lookups or similar. You can use them to check types or values. Application Rules &lt;em&gt;are&lt;/em&gt; stateful, and are typically used for stuff like “this field must be unique” or “the state change of this field is invalid”. We’re going to use the former and modify our &lt;code&gt;PostsTable::buildRules()&lt;/code&gt; method to be the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Returns a rules checker object that will be used for validating
 * application integrity.
 *
 * @param \Cake\ORM\RulesChecker $rules The rules object to be modified.
 * @return \Cake\ORM\RulesChecker
 */
public function buildRules(RulesChecker $rules)
{
    $rules-&amp;gt;add($rules-&amp;gt;existsIn([&#39;user_id&#39;], &#39;Users&#39;));
    $rules-&amp;gt;add($rules-&amp;gt;isUnique([&#39;url&#39;]));

    return $rules;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’ll commit here:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Model/Table/PostsTable.php
git commit -m &quot;Force the url field to be unique&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;auto-generating-urls&quot;&gt;Auto-generating urls&lt;/h3&gt;

&lt;p&gt;First, we’ll need to allow fields to be “empty” in the form. Remove the following from &lt;code&gt;AbstractPostType::_buildValidator()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$validator-&amp;gt;notEmpty(&#39;url&#39;, &#39;Please fill this field&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, lets generate the url when empty! I’ve added the following class to our use statements at the top of my &lt;code&gt;AbstractPostType&lt;/code&gt; class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;use Cake\Utility\Hash;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Right after we call &lt;code&gt;AbstractPostType::transformData()&lt;/code&gt; inside of &lt;code&gt;AbstractPostType::_execute()&lt;/code&gt;, I call the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$data[&#39;url&#39;] = $this-&amp;gt;ensureUrl($data);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here is the body of &lt;code&gt;AbstractPostType::ensureUrl()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;protected function ensureUrl(array $data)
{
    $url = trim(Hash::get($data, &#39;url&#39;, &#39;&#39;), &#39;/&#39;);
    if (strlen($url) !== 0) {
        return $url;
    }

    return Hash::get($data, &#39;title&#39;, &#39;&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We leave the url alone if the user has specified one, and otherwise return the contents of the &lt;code&gt;title&lt;/code&gt; field.&lt;/p&gt;

&lt;p&gt;Finally, we can strip values from the url by adding a &lt;code&gt;_setUrl()&lt;/code&gt; method to our Post entity. This ensures that it is properly massaged whenever that value is set, without requiring extra work at other layers. I’ve created a &lt;code&gt;UrlSettingTrait&lt;/code&gt; in &lt;code&gt;src/Model/Entity/Traits/UrlSettingTrait.php&lt;/code&gt; that contains the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App\Model\Entity\Traits;

use Cake\Utility\Text;

trait UrlSettingTrait
{
    /**
     * Trims slashes and prepends the url with a slash
     * If the input is invalid - such as an empty string - the url will become null.
     *
     * @param string $url The url that is to be set
     * @return string
     */
    public function _setUrl($url)
    {
        if (strlen($url) === 0) {
            return &#39;&#39;;
        }

        $url = Text::slug($url, [
            &#39;lowercase&#39; =&amp;gt; true,
            &#39;replacement&#39; =&amp;gt; &#39;-&#39;,
        ]);
        $url = &#39;/&#39; . trim($url, &#39;/&#39;);
        if ($url === &#39;/&#39;) {
            $url = null;
        }

        return $url;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You’ll need to &lt;code&gt;use&lt;/code&gt; this class within your &lt;code&gt;Post&lt;/code&gt; entity as well.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;use \App\Model\Entity\Traits\UrlSettingTrait;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’ll save our progress now:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Model/Entity/Post.php src/Model/Entity/Traits/UrlSettingTrait.php src/PostType/AbstractPostType.php
git commit -m &quot;Automatically generate urls from the title field&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;validating-the-url-field&quot;&gt;Validating the &lt;code&gt;url&lt;/code&gt; field&lt;/h3&gt;

&lt;p&gt;We’ll want to ensure we don’t set invalid urls. For instance, shadowing an existing route would potentially break stuff like the admin or similar. In our next post, I’ll cover how to use admin routing for our dashboard, as well as custom routes for all other pages, but just assuming that the following urls are to be whitelisted:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;/about&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;/home&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;/contact&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;/login&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;/logout&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;/forgot-password&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ll add the following to my &lt;code&gt;PostsTable::validationDefault()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$validator-&amp;gt;add(&#39;url&#39;, &#39;notInList&#39;, [
    &#39;rule&#39; =&amp;gt; function ($value, $context) {
        $list = [&#39;/&#39;, &#39;/about&#39;, &#39;/home&#39;, &#39;/contact&#39;, &#39;/login&#39;, &#39;/logout&#39;, &#39;/forgot-password&#39;];
        $list = array_map(&#39;strval&#39;, $list);
        return !in_array((string)$value, $list, true);
    },
    &#39;message&#39; =&amp;gt; &#39;Reserved urls cannot be specified&#39;,
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;We may want to expand this list later, but for now this seems adequate.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We have to use a custom rule here because the built-in CakePHP rules cannot be negated, otherwise we would use `inList.&lt;/p&gt;

&lt;p&gt;Urls must also not be prefixed with any of the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;/admin&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;/reset-password&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;/verify&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’ll use another custom validation rule for this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$validator-&amp;gt;add(&#39;url&#39;, &#39;withoutPrefix&#39;, [
    &#39;rule&#39; =&amp;gt; function ($value, $context) {
        if (preg_match(&quot;/^\/(admin|reset-password|verify)/&quot;, $value)) {
            return false;
        }
        if (preg_match(&quot;/^(admin|reset-password|verify)/&quot;, $value)) {
            return false;
        }
        return true;
    },
    &#39;message&#39; =&amp;gt; &#39;Urls cannot start with &quot;/admin&quot;, &quot;/reset-password&quot;, or &quot;/verify&quot;&#39;,
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’ve used two regex matches because urls can be set with a starting forward slash or not, and the &lt;code&gt;Post&lt;/code&gt; entity setter will ensure they start with one. Allowing both makes it easier for users to reason about what the url will look like, as we’ll handle it correctly on our end.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Validation rules can contain inline functions, which are useful in a pinch but also more difficult to test&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Remember to save your work.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Model/Table/PostsTable.php
git commit -m &quot;Properly validate a submitted url&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;persisting-error-messages&quot;&gt;Persisting error messages&lt;/h3&gt;

&lt;p&gt;One thing you might notice when saving a post is that the validation errors from the &lt;code&gt;PostsTable&lt;/code&gt; are not shown. This is because we are overwriting the template’s entity in our &lt;code&gt;PostsListener::_setPostType()&lt;/code&gt; method. I’ve added the following right before I update the template entity in that method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$postType-&amp;gt;mergeErrors($event-&amp;gt;subject-&amp;gt;entity-&amp;gt;errors());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here is the code for &lt;code&gt;AbstractPostType::mergeErrors()&lt;/code&gt;. We want to ensure any existing errors from other places are properly persisted, so we need to merge our post errors &lt;em&gt;onto&lt;/em&gt; the post type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function mergeErrors(array $errors)
{
    foreach ($errors as $field =&amp;gt; $err) {
        if (!isset($this-&amp;gt;_errors[$field])) {
            $this-&amp;gt;_errors[$field] = $err;
            continue;
        }
        foreach ($err as $name =&amp;gt; $message) {
            $this-&amp;gt;_errors[$field][$name] = $message;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;This code is not unit tested, and error handling is a place where you may want to dive into unit testing to ensure you get it right. We may end up revisiting this implementation at a later date.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you try out the form now, you’ll see that we now have all the errors from our Post instance validation. I’ll save my work for now:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Listener/PostsListener.php src/PostType/AbstractPostType.php
git commit -m &quot;Persist validation errors when saving forms&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;For those that may just want to ensure their codebase matches what has been done so far, the codebase is available on GitHub and tagged as &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016/tree/0.0.16&quot;&gt;0.0.16&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We have now placed some mitigations in place for ensuring our users do not set invalid urls. We can now look into the routing layer portion of this, which will make the user-facing portion of our site much more usable.&lt;/p&gt;

&lt;p&gt;Be sure to follow along via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2016 CakeAdvent Calendar. Come back tomorrow for more delicious content.&lt;/p&gt;
</description>
        <pubDate>Fri, 16 Dec 2016 04:16:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/12/16/ensuring-blog-posts-properly-handle-custom-urls/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/12/16/ensuring-blog-posts-properly-handle-custom-urls/</guid>
        
        <category>application-rules</category>
        
        <category>validation</category>
        
        <category>cakeadvent-2016</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Theming our CMS</title>
        <description>&lt;p&gt;A friend of mine asked for a custom website, so here I am, writing a custom cms. I know, there are plenty of systems out there that would handle his needs, but it’s also a good excuse to play around with CakePHP 3, so here we are.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the lazy, the codebase we’ll be working on will be available on &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016&quot;&gt;GitHub&lt;/a&gt;. I will be pushing each set of changes on the date when each blog post in this series is published. No cheating!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;setting-up-a-theme&quot;&gt;Setting up a Theme&lt;/h2&gt;

&lt;p&gt;As much as I love the default CakePHP css, I’d like the default installation to look a bit different. To do so, I’ll distribute a custom theme with the Cms called &lt;code&gt;DefaultTheme&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In CakePHP 3, themes are distributed as plugins. This makes it pretty easy to create an installer or similar for your themes, as well as scaffold them :)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake bake plugin DefaultTheme -f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ve scaffolded a theme, but we’ll want to modify a few things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You remove the &lt;code&gt;plugins/DefaultTheme/config/routes.php&lt;/code&gt; file as we wont need it&lt;/li&gt;
  &lt;li&gt;Remove &lt;code&gt;plugins/DefaultTheme/src&lt;/code&gt; as we won’t be using the AppController that is created&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Modify your &lt;code&gt;config/bootstrap.php&lt;/code&gt; to &lt;em&gt;not&lt;/em&gt; load the plugin’s bootstrap or routes. It should look like so:&lt;/p&gt;

    &lt;p&gt;Plugin::load(‘DefaultTheme’);&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To load a theme, we’ll modify our &lt;code&gt;AppView&lt;/code&gt; - located in &lt;code&gt;src/View/AppView.php&lt;/code&gt; - to be the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function initialize()
{
    $this-&amp;gt;theme(&#39;DefaultTheme&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s save our work and move on:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add composer.json config/bootstrap.php plugins/DefaultTheme src/View/AppView.php
git commit -m &quot;Add a dummy DefaultTheme&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;cakephp-theme-internals&quot;&gt;CakePHP Theme internals&lt;/h2&gt;

&lt;p&gt;CakePHP themes are a bit weird. Here are some general guidelines:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Using a theme will inject it’s template files into the cake template search paths &lt;em&gt;first&lt;/em&gt;. If a file is not found in a theme, it will default to any other search paths (so the main &lt;code&gt;src/Template&lt;/code&gt; dir, or other plugins).&lt;/li&gt;
  &lt;li&gt;General template files, elements, and layouts can all be overriden from a theme.&lt;/li&gt;
  &lt;li&gt;Assets referenced from a theme will be loaded from that theme. If they aren’t found, CakePHP will try and load them from the main repo.&lt;/li&gt;
  &lt;li&gt;Assets - css, images, javascript files - will be proxied via PHP unless you symlink the theme’s webroot directory into place.&lt;/li&gt;
  &lt;li&gt;There is no way to override a file provided by a theme.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m not going to include all of my theme code, but I will show some interesting bits.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The theme is based on the &lt;a href=&quot;https://github.com/bencentra/centrarium&quot;&gt;Centrarium Jekyll Theme&lt;/a&gt;, and uses a logo by Kassy from &lt;a href=&quot;https://www.sketchport.com/drawing/1782016/camera&quot;&gt;sketchport&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’ll commit my theme so you can take a look at the changes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add plugins/DefaultTheme
git commit -m &quot;Implement DefaultTheme&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;custom-helper-templates&quot;&gt;Custom Helper Templates&lt;/h3&gt;

&lt;p&gt;In CakePHP 3, all helpers output html fragments based on a simple templating language. It uses string fragments to specify what the “template” should be for an html element, such as a &lt;code&gt;link&lt;/code&gt; or &lt;code&gt;image&lt;/code&gt; tag. It’s used throughout CakePHP, which is good as in our case, we’re going to modify what pagination looks like.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Templates use  style placeholders. It is important to not add any spaces around the  or the replacements will not work.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is what I’ve placed in my theme’s &lt;code&gt;home.ctp&lt;/code&gt; to customize what the &lt;code&gt;PaginatorHelper&lt;/code&gt; uses for building next/previous links:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
$this-&amp;gt;Paginator-&amp;gt;templates([
    &#39;nextDisabled&#39; =&amp;gt; implode(&#39; &#39;, [
        &#39;&amp;lt;span class=&quot;fa-stack fa-lg&quot;&amp;gt;&#39;,
            &#39;&amp;lt;i class=&quot;fa fa-square fa-stack-2x&quot;&amp;gt;&amp;lt;/i&amp;gt;&#39;,
            &#39;&amp;lt;i class=&quot;fa fa-angle-double-right fa-stack-1x fa-inverse&quot;&amp;gt;&amp;lt;/i&amp;gt;&#39;,
        &#39;&amp;lt;/span&amp;gt;&#39;,
    ]),
    &#39;nextActive&#39; =&amp;gt; implode(&#39; &#39;, [
        &#39;&amp;lt;a rel=&quot;prev&quot; href=&quot;&quot;&amp;gt;&#39;,
            &#39;&amp;lt;span class=&quot;fa-stack fa-lg&quot;&amp;gt;&#39;,
                &#39;&amp;lt;i class=&quot;fa fa-square fa-stack-2x&quot;&amp;gt;&amp;lt;/i&amp;gt;&#39;,
                &#39;&amp;lt;i class=&quot;fa fa-angle-double-right fa-stack-1x fa-inverse&quot;&amp;gt;&amp;lt;/i&amp;gt;&#39;,
            &#39;&amp;lt;/span&amp;gt;&#39;,
        &#39;&amp;lt;/a&amp;gt;&#39;,
    ]),
    &#39;prevDisabled&#39; =&amp;gt; implode(&#39; &#39;, [
        &#39;&amp;lt;span class=&quot;fa-stack fa-lg&quot;&amp;gt;&#39;,
            &#39;&amp;lt;i class=&quot;fa fa-square fa-stack-2x&quot;&amp;gt;&amp;lt;/i&amp;gt;&#39;,
            &#39;&amp;lt;i class=&quot;fa fa-angle-double-left fa-stack-1x fa-inverse&quot;&amp;gt;&amp;lt;/i&amp;gt;&#39;,
        &#39;&amp;lt;/span&amp;gt;&#39;,
    ]),
    &#39;prevActive&#39; =&amp;gt; implode(&#39; &#39;, [
        &#39;&amp;lt;a rel=&quot;prev&quot; href=&quot;&quot;&amp;gt;&#39;,
            &#39;&amp;lt;span class=&quot;fa-stack fa-lg&quot;&amp;gt;&#39;,
                &#39;&amp;lt;i class=&quot;fa fa-square fa-stack-2x&quot;&amp;gt;&amp;lt;/i&amp;gt;&#39;,
                &#39;&amp;lt;i class=&quot;fa fa-angle-double-left fa-stack-1x fa-inverse&quot;&amp;gt;&amp;lt;/i&amp;gt;&#39;,
            &#39;&amp;lt;/span&amp;gt;&#39;,
        &#39;&amp;lt;/a&amp;gt;&#39;,
    ]),
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also customize templates for the &lt;code&gt;FormHelper&lt;/code&gt; and &lt;code&gt;HtmlHelper&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;custom-theme-elements&quot;&gt;Custom Theme Elements&lt;/h3&gt;

&lt;p&gt;I’ve overriden what the post types will display as in my theme. If I hadn’t, we’d be using the default elements from the respective post type plugin. Here is what my &lt;code&gt;plugins/DefaultTheme/src/Template/Element/post_type/photo-index.ctp&lt;/code&gt; looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;h2&amp;gt;&amp;lt;?= $this-&amp;gt;Html-&amp;gt;link($post-&amp;gt;get(&#39;title&#39;), $post-&amp;gt;get(&#39;url&#39;)) ?&amp;gt;&amp;lt;/h2&amp;gt;
&amp;lt;section class=&quot;post-meta&quot;&amp;gt;
    &amp;lt;div class=&quot;post-date&quot;&amp;gt;&amp;lt;?= $this-&amp;gt;Time-&amp;gt;nice($post-&amp;gt;get(&#39;published_date&#39;)) ?&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/section&amp;gt;
&amp;lt;section class=&quot;post-excerpt&quot; itemprop=&quot;description&quot;&amp;gt;
    &amp;lt;?= $this-&amp;gt;Html-&amp;gt;image(&#39;../&#39; . $post-&amp;gt;get(&#39;photo_path&#39;)) ?&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that my image link works as normal, and displays the original post image as desired.&lt;/p&gt;

&lt;h3 id=&quot;theme-links&quot;&gt;Theme Links&lt;/h3&gt;

&lt;p&gt;One thing I’m doing in my theme is linking to custom pages, such as &lt;code&gt;/about&lt;/code&gt;, and also using the post urls as links. These aren’t currently routed by the CMS, so we’ll want to handle that next.&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;For those that may just want to ensure their codebase matches what has been done so far, the codebase is available on GitHub and tagged as &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016/tree/0.0.15&quot;&gt;0.0.15&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The frontend of our site is in decent shape, though now we have some routing work to do. None of our custom post types have their own user-reachable urls, so in our next post, we’ll update the CakePHP routing to understand our routing schema.&lt;/p&gt;

&lt;p&gt;Be sure to follow along via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2016 CakeAdvent Calendar. Come back tomorrow for more delicious content.&lt;/p&gt;
</description>
        <pubDate>Thu, 15 Dec 2016 03:20:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/12/15/theming-our-cms/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/12/15/theming-our-cms/</guid>
        
        <category>themes</category>
        
        <category>views</category>
        
        <category>cakeadvent-2016</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Photo Post Types</title>
        <description>&lt;p&gt;A friend of mine asked for a custom website, so here I am, writing a custom cms. I know, there are plenty of systems out there that would handle his needs, but it’s also a good excuse to play around with CakePHP 3, so here we are.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the lazy, the codebase we’ll be working on will be available on &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016&quot;&gt;GitHub&lt;/a&gt;. I will be pushing each set of changes on the date when each blog post in this series is published. No cheating!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;scaffolding-the-photoposttype-plugin&quot;&gt;Scaffolding the PhotoPostType plugin&lt;/h2&gt;

&lt;p&gt;For our photo posts, here are the extra fields we are tracking:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;photo&lt;/code&gt;: The name the user used for the image being uploaded&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;photo_dir&lt;/code&gt;: Path on disk - relative to www_root - where the file will be stored&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;photo_path&lt;/code&gt;: Path on disk - relative to www_root - where the file will be stored &lt;em&gt;including&lt;/em&gt; a sanitized filename&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’ll also want to validate that our photo is a valid image before attempting to upload it. Finally, we need to upload the image before saving the post itself. Let’s start by baking a &lt;code&gt;PhotoPostType&lt;/code&gt; plugin, which should also update our &lt;code&gt;composer.json&lt;/code&gt; to update code load paths.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake bake plugin PhotoPostType -f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we’ll create a &lt;code&gt;plugins/PhotoPostType/config/bootstrap.php&lt;/code&gt; to load our plugin post type.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
use Cake\Event\Event;
use Cake\Event\EventManager;

EventManager::instance()-&amp;gt;on(&#39;Posts.PostTypes.get&#39;, function (Event $event) {
  // The key is the Plugin name and the class
  // The value is what you want to display in the ui
  $event-&amp;gt;subject-&amp;gt;postTypes[&#39;PhotoPostType.PhotoPostType&#39;] = &#39;blog&#39;;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can remove the &lt;code&gt;plugins/PhotoPostType/config/routes.php&lt;/code&gt; file as we wont need it&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We’ll want to ensure that the bootstrap file is loaded for this plugin, so check to ensure that your &lt;code&gt;config/bootstrap.php&lt;/code&gt; has the following &lt;code&gt;Plugin::load&lt;/code&gt; line (update it if need be):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;Plugin::load(&#39;PhotoPostType&#39;, [&#39;bootstrap&#39; =&amp;gt; true, &#39;routes&#39; =&amp;gt; false]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remember to save your work!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add composer.json config/bootstrap.php plugins/PhotoPostType
git commit -m &quot;Scaffold the PhotoPostType plugin&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;photoposttype-form-fields-and-validation&quot;&gt;PhotoPostType form fields and validation&lt;/h2&gt;

&lt;p&gt;We will now need the &lt;code&gt;PostType&lt;/code&gt; class that contains the code for our form. Here are the initial contents of &lt;code&gt;plugins/PhotoPostType/PostType/PhotoPostType.php&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace PhotoPostType\PostType;

use App\PostType\AbstractPostType;
use Cake\Form\Schema;
use Cake\Validation\Validator;

class PhotoPostType extends AbstractPostType
{
    protected function _buildSchema(Schema $schema)
    {
        $schema = parent::_buildSchema($schema);
        $schema-&amp;gt;addField(&#39;photo&#39;, [&#39;type&#39; =&amp;gt; &#39;file&#39;]);
        $schema-&amp;gt;addField(&#39;photo_dir&#39;, [&#39;type&#39; =&amp;gt; &#39;hidden&#39;]);
        $schema-&amp;gt;addField(&#39;photo_path&#39;, [&#39;type&#39; =&amp;gt; &#39;hidden&#39;]);
        return $schema;
    }

    protected function _buildValidator(Validator $validator)
    {
        $validator = parent::_buildValidator($validator);
        $validator-&amp;gt;add(&#39;photo&#39;, &#39;valid-image&#39;, [
            &#39;rule&#39; =&amp;gt; [&#39;uploadedFile&#39;, [
                &#39;types&#39; =&amp;gt; [
                    &#39;image/bmp&#39;,
                    &#39;image/gif&#39;,
                    &#39;image/jpeg&#39;,
                    &#39;image/pjpeg&#39;,
                    &#39;image/png&#39;,
                    &#39;image/x-windows-bmp&#39;,
                    &#39;image/x-png&#39;,
                ],
                &#39;optional&#39; =&amp;gt; true,
            ]],
            &#39;message&#39; =&amp;gt; &#39;The uploaded photo was not a valid image&#39;
        ]);
        return $validator;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty simple. We’re adding a few fields for the form - two of which are hidden - and then adding a validation rule to allow &lt;em&gt;only&lt;/em&gt; images. Seems pretty straightforward. I’ll also commit my changes here.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add plugins/PhotoPostType/src/PostType/PhotoPostType.php
git commit -m &quot;Initial form display for photo post types&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;handling-file-uploads&quot;&gt;Handling file uploads&lt;/h3&gt;

&lt;p&gt;We’re going to need to actually write the files to disk. To do this, I’m going to use the wonderful &lt;a href=&quot;http://flysystem.thephpleague.com/&quot;&gt;League/Flysystem&lt;/a&gt; library. This will abstract actual file writing for me, and also potentially allow me to upload images to non-local storage.&lt;/p&gt;

&lt;p&gt;All the file upload logic begins in our &lt;code&gt;PhotoPostType::transformData()&lt;/code&gt; method. Here is the body of that method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function transformData($data)
{
    $photoExtension = pathinfo($data[&#39;photo&#39;][&#39;name&#39;], PATHINFO_EXTENSION);
    $photoDirectory  = &#39;files/Posts/photo/&#39; . uniqid();
    $photoFilename = uniqid() . &#39;.&#39; . $photoExtension;
    $photoPath $photoDirectory . &#39;/&#39; . $photoFilename
    $postAttributes = [
        [&#39;name&#39; =&amp;gt; &#39;photo_dir&#39;, &#39;value&#39; =&amp;gt; $photoDirectory],
        [&#39;name&#39; =&amp;gt; &#39;photo&#39;, &#39;value&#39; =&amp;gt; $data[&#39;photo&#39;][&#39;name&#39;]],
        [&#39;name&#39; =&amp;gt; &#39;photo_path&#39;, &#39;value&#39; =&amp;gt; $photoPath],
    ];

    $success = $this-&amp;gt;writeFile($data[&#39;photo&#39;], $photoPath);
    unset($data[&#39;photo&#39;], $data[&#39;photo_dir&#39;], $data[&#39;photo_path&#39;] $data[&#39;post_attributes&#39;]);
    if (!$success) {
        return $data;
    }

    $data[&#39;post_attributes&#39;] = $postAttributes;

    return $data;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s walk through this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I get the photo extension using the &lt;code&gt;pathinfo&lt;/code&gt; method. This might fail if there was no original extension on the uploaded file, so in a future revision, we’ll want to properly detect the mimetype and remap the extension, but this is good for now.&lt;/li&gt;
  &lt;li&gt;I’m using &lt;code&gt;uniqid&lt;/code&gt; to get a filepath on disk. I won’t currently be handling vacuuming old file uploads, so we want to ensure we don’t overwrite existing files. A good alternative would be to use &lt;code&gt;Text::uuid()&lt;/code&gt;, but I don’t expect any issues for my use case.&lt;/li&gt;
  &lt;li&gt;We’ll need to write the file to disk, and that logic is shown elsewhere.&lt;/li&gt;
  &lt;li&gt;If the file is saved successfully, we add the extra post attributes, and otherwise just return as is. We would be better suited in handling this error, but I’ll leave that up to the reader.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What does file uploading look like? First, add the following &lt;code&gt;use&lt;/code&gt; calls to the top of the class for classes that will be, well, used by our file uploading mechanism:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;use League\Flysystem\Adapter\Local;
use League\Flysystem\AdapterInterface;
use League\Flysystem\FileNotFoundException;
use League\Flysystem\Filesystem;
use League\Flysystem\FilesystemInterface;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the &lt;code&gt;PhotoPostType::writeFile()&lt;/code&gt; method (and related helper methods):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;protected function writeFile(array $filedata, $filepath)
{
    $success = false;
    $stream = @fopen($filedata[&#39;tmp_name&#39;], &#39;r&#39;);
    if ($stream === false) {
        return $success;
    }

    $filesystem = $this-&amp;gt;filesystem();
    $success = $filesystem-&amp;gt;writeStream($filepath, $stream);
    fclose($stream);

    return $success;
}

protected function filesystem()
{
    $adapter = new Local(WWW_ROOT);
    $filesystem = new Filesystem($adapter, [
        &#39;visibility&#39; =&amp;gt; AdapterInterface::VISIBILITY_PUBLIC
    ]);

    return $filesystem;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A bit to go through, but a pretty-straightforward read I think. Some implementation notes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I typically use streams for writing to flysystem. You can also write content directly, but as the file already exists locally, using a file stream is the most natural.&lt;/li&gt;
  &lt;li&gt;If we can’t open the temp file, we fail the write.&lt;/li&gt;
  &lt;li&gt;I’ve used an extra method to get the &lt;code&gt;Filesystem&lt;/code&gt; object, which will allow me to mock the filesystem for tests.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Neat! Let’s save our progress.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add plugins/PhotoPostType/src/PostType/PhotoPostType.php
git commit -m &quot;Handle file uploads for the photo post type&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;displaying-photos-in-the-frontend&quot;&gt;Displaying Photos in the frontend&lt;/h3&gt;

&lt;p&gt;Our default &lt;code&gt;src/Template/Element/post_type/photo-index.ctp&lt;/code&gt; and &lt;code&gt;src/Template/Element/post_type/photo-view.ctp&lt;/code&gt; template files are pretty trivial. I’m simply going to show the post type and then a link to the image in each:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;h3&amp;gt;&amp;lt;?= $post-&amp;gt;get(&#39;title&#39;) ?&amp;gt;&amp;lt;/h3&amp;gt;
&amp;lt;div&amp;gt;
    &amp;lt;?= $this-&amp;gt;Html-&amp;gt;image(&#39;../&#39; . $post-&amp;gt;get(&#39;photo_path&#39;)) ?&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is what it looks like (using my favorite picture of &lt;a href=&quot;https://twitter.com/grmpyprogrammer&quot;&gt;Chris Hartjes&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/12/14/baby-upload.png&quot; alt=&quot;baby image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Remember to commit your new files.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add plugins/PhotoPostType/src/Template/Element/post_type/photo-index.ctp plugins/PhotoPostType/src/Template/Element/post_type/photo-view.ctp
git commit -m &quot;Add default photo templates&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;For those that may just want to ensure their codebase matches what has been done so far, the codebase is available on GitHub and tagged as &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016/tree/0.0.14&quot;&gt;0.0.14&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We now have our custom photo post type, and it’s pretty bad-ass. While the admin ui could use some work - how do you know you’ve already uploaded an image? - we’re pretty far along.&lt;/p&gt;

&lt;p&gt;Be sure to follow along via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2016 CakeAdvent Calendar. Come back tomorrow for more delicious content.&lt;/p&gt;
</description>
        <pubDate>Wed, 14 Dec 2016 01:37:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/12/14/photo-post-types/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/12/14/photo-post-types/</guid>
        
        <category>uploads</category>
        
        <category>cakeadvent-2016</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Refactoring Post Types</title>
        <description>&lt;p&gt;A friend of mine asked for a custom website, so here I am, writing a custom cms. I know, there are plenty of systems out there that would handle his needs, but it’s also a good excuse to play around with CakePHP 3, so here we are.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the lazy, the codebase we’ll be working on will be available on &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016&quot;&gt;GitHub&lt;/a&gt;. I will be pushing each set of changes on the date when each blog post in this series is published. No cheating!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;updating-plugins&quot;&gt;Updating Plugins&lt;/h2&gt;

&lt;p&gt;Before we continue, lets be sure we’ve updated all our plugins. I like to do this each day so that I can get any bugfixes that come out for libraries my application depends upon. If there are any bugfixes for dependencies, we’ll grab those with the following &lt;code&gt;composer&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;composer update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Typically you would run tests at this stage, but since we have &lt;em&gt;yet&lt;/em&gt; to write any, that isn’t necessary.&lt;/p&gt;

&lt;p&gt;Let’s commit any updates:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add composer.lock
git commit -m &quot;Update unpinned dependencies&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;You should always verify your application still works after upgrading dependencies.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;duplicative-logic&quot;&gt;Duplicative Logic&lt;/h2&gt;

&lt;p&gt;In the process of adding a new post type, I noticed that there is a bit of duplication between the &lt;code&gt;PostsListener::beforeSave()&lt;/code&gt; and the &lt;code&gt;AbstractPostType::_execute()&lt;/code&gt; method. Specifically, we’re not even using the &lt;code&gt;_execute()&lt;/code&gt; logic in our save. I’m going to refactor it with the following goals:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Save logic belongs with Crud, so it will be removed from both the &lt;code&gt;PostsListener&lt;/code&gt; and &lt;code&gt;AbstractPostType&lt;/code&gt; classes.&lt;/li&gt;
  &lt;li&gt;Extra data from the request should be injected at the &lt;code&gt;PostsListener&lt;/code&gt; level.&lt;/li&gt;
  &lt;li&gt;The data that we’ll actually save should be returned by the &lt;code&gt;AbstractPostType::execute()&lt;/code&gt; method.&lt;/li&gt;
  &lt;li&gt;We should be able to lean on our &lt;code&gt;PostType&lt;/code&gt; validation rules as much as possible.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;dropping-extra-code-in-postslistenerbeforesave&quot;&gt;Dropping extra code in &lt;code&gt;PostsListener::beforeSave()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;This is the &lt;code&gt;PostsListener::beforeSave()&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Before Save
 *
 * @param \Cake\Event\Event $event Event
 * @return void
 */
public function beforeSave(Event $event)
{
    $type = $event-&amp;gt;subject-&amp;gt;entity-&amp;gt;type;
    if (empty($type)) {
        $passedArgs = $this-&amp;gt;_request()-&amp;gt;param(&#39;pass&#39;);
        $type = $passedArgs[0];
    }

    $event-&amp;gt;subject-&amp;gt;entity-&amp;gt;type = $type;

    $data = [
        &#39;user_id&#39; =&amp;gt; $this-&amp;gt;_controller()-&amp;gt;Auth-&amp;gt;user(&#39;id&#39;),
        &#39;type&#39; =&amp;gt; $type,
    ] + $this-&amp;gt;_request()-&amp;gt;data() + [&#39;published_date&#39; =&amp;gt; Time::now()];
    $postType = $event-&amp;gt;subject-&amp;gt;entity-&amp;gt;getPostType();
    $data = $postType-&amp;gt;execute($data);

    $PostsTable = TableRegistry::get(&#39;Posts&#39;);
    $PostsTable-&amp;gt;patchEntity($event-&amp;gt;subject-&amp;gt;entity, $data);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In it, you’ll see I can still inject data from the request - &lt;code&gt;user_id&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;published_date&lt;/code&gt; - but also get the “real” data from the specific &lt;code&gt;PostType::execute()&lt;/code&gt; method. As it’s the &lt;code&gt;Crud.beforeSave&lt;/code&gt; event, we don’t actually need to save data, and just patching it onto the event’s entity is enough.&lt;/p&gt;

&lt;h3 id=&quot;restructuring-abstractposttypeexecute&quot;&gt;Restructuring &lt;code&gt;AbstractPostType::_execute()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;This is my new &lt;code&gt;AbstractPostType::_execute()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;protected function _execute(array $data)
{
    if (empty($data[&#39;post_attributes&#39;])) {
        $data[&#39;post_attributes&#39;] = [];
    }

    $PostsTable = TableRegistry::get(&#39;Posts&#39;);
    $AttributesTable = TableRegistry::get(&#39;PostAttributes&#39;);
    $postAttributes = $data[&#39;post_attributes&#39;];

    $postColumns = $PostsTable-&amp;gt;schema()-&amp;gt;columns();
    $validColumns = $this-&amp;gt;schema()-&amp;gt;fields();
    foreach ($data as $key =&amp;gt; $value) {
        if (in_array($key, $postColumns)) {
            continue;
        }

        unset($data[$key]);
        if (!in_array($key, $validColumns)) {
            continue;
        }
        $postAttributes[] = [
            &#39;name&#39; =&amp;gt; $key,
            &#39;value&#39; =&amp;gt; $value,
        ];
    }

    $data[&#39;post_attributes&#39;] = $postAttributes;

    return $data;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A bit more going on here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We’re assuming there will &lt;em&gt;always&lt;/em&gt; be at least an empty set of &lt;code&gt;post_attributes&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;If a key is both not a valid post column and not a valid post-type field, then we drop it.&lt;/li&gt;
  &lt;li&gt;We’re no longer creating a &lt;code&gt;PostAttribute&lt;/code&gt; Entity, and instead allowing the &lt;code&gt;PostsTable-&amp;gt;patchEntity()&lt;/code&gt; call in the &lt;code&gt;PostsListener::beforeSave()&lt;/code&gt; to properly martial the data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With these two changes in place, you can test saving a post and everything should be just fine. Let’s commit:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Listener/PostsListener.php src/PostType/AbstractPostType.php
git commit -m &quot;Clean up post marshalling and saving&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;allowing-post-data-modification&quot;&gt;Allowing Post Data Modification&lt;/h3&gt;

&lt;p&gt;In our upcoming post type - the PhotoPostType - we’ll need to save the file to disk and also ensure we track a &lt;code&gt;photo_path&lt;/code&gt; that can be used to display the image. This is a bit more logic than our automated system will handle, so we’ll need an extra function call to perform these modifications. I’ve added the following method to &lt;code&gt;AbstractPostType&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function transformData($data)
{
    return $data;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default, my &lt;code&gt;AbstractPostType::transformData()&lt;/code&gt; is a no-op. And I call it &lt;em&gt;right&lt;/em&gt; after I set a default for &lt;code&gt;post_attributes&lt;/code&gt; in &lt;code&gt;AbstractPostType::_execute()&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$data = $this-&amp;gt;transformData($data);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Why can’t I just depend upon the UploadBehavior to do this logic for me? Many behaviors end up changing where things are stored in the &lt;code&gt;Table.beforeSave&lt;/code&gt; event, which happens &lt;em&gt;after&lt;/em&gt; the &lt;code&gt;Crud.beforeSave&lt;/code&gt; event. This means that we’d end up trashing the upload data before the &lt;code&gt;UploadBehavior&lt;/code&gt; can handle it. As well, that behavior doesn’t know anything about our weird &lt;code&gt;post_attributes&lt;/code&gt; system, so we’d need to handle the logic on our own.&lt;/p&gt;

&lt;p&gt;I’ll save my changes for now, and get to add a custom &lt;code&gt;PhotoPostType&lt;/code&gt; tomorrow.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/PostType/AbstractPostType.php
git commit -m &quot;Allow post types to transform the data before it is further marshalled&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;For those that may just want to ensure their codebase matches what has been done so far, the codebase is available on GitHub and tagged as &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016/tree/0.0.13&quot;&gt;0.0.13&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A bit of light refactoring is always useful to get your application priorities in order. In this case, it was absolutely necessary in order to figure out where exactly we’d need to hook in for our custom photo type.&lt;/p&gt;

&lt;p&gt;Be sure to follow along via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2016 CakeAdvent Calendar. Come back tomorrow for more delicious content.&lt;/p&gt;
</description>
        <pubDate>Tue, 13 Dec 2016 12:40:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/12/13/refactoring-post-types/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/12/13/refactoring-post-types/</guid>
        
        <category>refactoring</category>
        
        <category>cakeadvent-2016</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Error Handling new Posts</title>
        <description>&lt;p&gt;A friend of mine asked for a custom website, so here I am, writing a custom cms. I know, there are plenty of systems out there that would handle his needs, but it’s also a good excuse to play around with CakePHP 3, so here we are.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the lazy, the codebase we’ll be working on will be available on &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016&quot;&gt;GitHub&lt;/a&gt;. I will be pushing each set of changes on the date when each blog post in this series is published. No cheating!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;updating-plugins&quot;&gt;Updating Plugins&lt;/h2&gt;

&lt;p&gt;Before we continue, lets be sure we’ve updated all our plugins. I like to do this each day so that I can get any bugfixes that come out for libraries my application depends upon. In this case, there are a few bugfixes for some CakePHP plugins, so we’ll grab those with the following &lt;code&gt;composer&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;composer update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Typically you would run tests at this stage, but since we have &lt;em&gt;yet&lt;/em&gt; to write any, that isn’t necessary.&lt;/p&gt;

&lt;p&gt;Let’s commit any updates:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add composer.lock
git commit -m &quot;Update unpinned dependencies&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;You should always verify your application still works after upgrading dependencies.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;todays-todolist&quot;&gt;Today’s todolist&lt;/h2&gt;

&lt;p&gt;We’ll take care of the following two items today.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Only showing action buttons to add valid post types.&lt;/li&gt;
  &lt;li&gt;Redirecting when a new post is being added with an unspecified or invalid type.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;modifying-shown-buttons&quot;&gt;Modifying shown buttons&lt;/h3&gt;

&lt;p&gt;On the &lt;code&gt;/posts&lt;/code&gt; page, we currently show an &lt;code&gt;Add&lt;/code&gt; button and a &lt;code&gt;Home&lt;/code&gt; button. We should only show Add buttons, but &lt;em&gt;only&lt;/em&gt; for post types that exist. To do so, we’ll replace the scaffolded &lt;code&gt;actions&lt;/code&gt; viewblock with one that contains valid action urls. I’ve added the following to our &lt;code&gt;PostsListener::beforeHandleIndex()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;_controller()-&amp;gt;set(&#39;indexActions&#39;, $this-&amp;gt;_getIndexActions());
$this-&amp;gt;_action()-&amp;gt;config(&#39;scaffold.viewblocks&#39;, [
    &#39;actions&#39; =&amp;gt; [
        &#39;admin/Posts/index-actions&#39; =&amp;gt; &#39;element&#39;,
    ],
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’re going to rely on a special element - &lt;code&gt;src/Template/Element/admin/Posts/index-actions.ctp&lt;/code&gt; - to render the variable &lt;code&gt;indexActions&lt;/code&gt; for any viewblock named &lt;code&gt;actions&lt;/code&gt;. The contents of the &lt;code&gt;PostsListener::_getIndexActions()&lt;/code&gt; method is as follows.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Get valid actions for the index page
 *
 * @return array
 */
protected function _getIndexActions()
{
    $indexActions = [];
    $postTypes = PostsTable::postTypes();
    foreach ($postTypes as $class =&amp;gt; $alias) {
        $indexActions[] = [
            &#39;title&#39; =&amp;gt; __(&#39;Add {0}&#39;, $alias),
            &#39;url&#39; =&amp;gt; [&#39;controller&#39; =&amp;gt; &#39;Posts&#39;, &#39;action&#39; =&amp;gt; &#39;add&#39;, $alias],
            &#39;options&#39; =&amp;gt; [&#39;class&#39; =&amp;gt; &#39;btn btn-default&#39;],
            &#39;method&#39; =&amp;gt; &#39;GET&#39;,
        ];
    }
    return $indexActions;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty straightforward. I retrieve all available &lt;code&gt;PostType&lt;/code&gt; classes, then return each one as a link.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Remember to add &lt;code&gt;use App\Model\Table\PostsTable;&lt;/code&gt; to the top of your class, otherwise you’ll get an error regarding the class not existing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now on to our &lt;code&gt;index-actions.ctp&lt;/code&gt; template.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
foreach ($indexActions as $config) {
    echo $this-&amp;gt;element(&#39;CrudView.action-button&#39;, [&#39;config&#39; =&amp;gt; $config]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, I’m relying on the &lt;code&gt;Crud.action-button&lt;/code&gt; template to render the correct button link, so if that ever changes, we’ll get the correct update on our end. Time to commit:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Listener/PostsListener.php src/Template/Element/admin/Posts/index-actions.ctp
git commit -m &quot;Only show the buttons we want to show on the /posts page&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;redirecting-on-bad-blog-post-types&quot;&gt;Redirecting on bad blog post types&lt;/h3&gt;

&lt;p&gt;This one is pretty simple. For the &lt;code&gt;add&lt;/code&gt; action, we should only allow registered post types. This is my modified &lt;code&gt;PostsListener::beforeRenderAdd()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Before Render Add Action
 *
 * @param \Cake\Event\Event $event Event
 * @return void
 */
public function beforeRenderAdd(Event $event)
{
    $passedArgs = $this-&amp;gt;_request()-&amp;gt;param(&#39;pass&#39;);
    if (!PostsTable::isValidPostType($passedArgs)) {
        return $this-&amp;gt;_controller()-&amp;gt;redirect([
            &#39;controller&#39; =&amp;gt; &#39;Posts&#39;,
            &#39;action&#39; =&amp;gt; &#39;index&#39;,
        ]);
    }

    $event-&amp;gt;subject-&amp;gt;entity-&amp;gt;type = $passedArgs[0];
    $this-&amp;gt;_setPostType($event, $event-&amp;gt;subject-&amp;gt;entity-&amp;gt;getPostType());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, here is the method that checks if the PostType is valid. I’ve added it to the &lt;code&gt;PostTypesTrait&lt;/code&gt; that is used in the &lt;code&gt;PostsTable&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Checks if the passed arguments contain a valid post type
 *
 * @param string $passedArgs a list of passed request parameters
 * @return bool
 */
public static function isValidPostType($passedArgs)
{
    if (empty($passedArgs[0])) {
        return false;
    }

    $validPostType = false;
    $postTypes = static::postTypes();
    foreach ($postTypes as $class =&amp;gt; $alias) {
        if ($passedArgs[0] === $alias) {
            $validPostType = true;
            break;
        }
    }
    return $validPostType;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we should redirect back &lt;em&gt;even if&lt;/em&gt; the user tries to set an invalid post type. Commit time!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Listener/PostsListener.php src/Model/Table/Traits/PostTypesTrait.php
git commit -m &quot;Ensure users do not try to add a non-existent post type&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;homework&quot;&gt;Homework!&lt;/h2&gt;

&lt;p&gt;Create a validation rule for the &lt;code&gt;PostsTable&lt;/code&gt; that only allows &lt;code&gt;type&lt;/code&gt; to be a valid post type. Good luck!&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;For those that may just want to ensure their codebase matches what has been done so far, the codebase is available on GitHub and tagged as &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016/tree/0.0.12&quot;&gt;0.0.12&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We’re quickly wrapping up our blog’s admin panel. While there will definitely be a few more things to do to clean up the UI, it’s in great shape now. We’ll be turning our attention to the other post types now, which hopefully won’t require too many additions.&lt;/p&gt;

&lt;p&gt;Be sure to follow along via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2016 CakeAdvent Calendar. Come back tomorrow for more delicious content.&lt;/p&gt;
</description>
        <pubDate>Mon, 12 Dec 2016 12:06:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/12/12/error-handling-new-posts/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/12/12/error-handling-new-posts/</guid>
        
        <category>elements</category>
        
        <category>events</category>
        
        <category>viewblocks</category>
        
        <category>cakeadvent-2016</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
  </channel>
</rss>
